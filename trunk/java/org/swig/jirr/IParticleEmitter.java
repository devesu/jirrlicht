/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class IParticleEmitter extends IAttributeExchangingObject {
  private long swigCPtr;

  protected IParticleEmitter(long cPtr, boolean cMemoryOwn) {
    super(JirrJNI.IParticleEmitter_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IParticleEmitter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_IParticleEmitter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public int emitt(long now, long timeSinceLastCall, SWIGTYPE_p_p_irr__scene__SParticle outArray) {
    return JirrJNI.IParticleEmitter_emitt(swigCPtr, this, now, timeSinceLastCall, SWIGTYPE_p_p_irr__scene__SParticle.getCPtr(outArray));
  }

  public void setDirection(vector3df newDirection) {
    JirrJNI.IParticleEmitter_setDirection(swigCPtr, this, vector3df.getCPtr(newDirection), newDirection);
  }

  public void setMinParticlesPerSecond(long minPPS) {
    JirrJNI.IParticleEmitter_setMinParticlesPerSecond(swigCPtr, this, minPPS);
  }

  public void setMaxParticlesPerSecond(long maxPPS) {
    JirrJNI.IParticleEmitter_setMaxParticlesPerSecond(swigCPtr, this, maxPPS);
  }

  public void setMinStartColor(SColor color) {
    JirrJNI.IParticleEmitter_setMinStartColor(swigCPtr, this, SColor.getCPtr(color), color);
  }

  public void setMaxStartColor(SColor color) {
    JirrJNI.IParticleEmitter_setMaxStartColor(swigCPtr, this, SColor.getCPtr(color), color);
  }

  public void setMaxStartSize(dimension2df size) {
    JirrJNI.IParticleEmitter_setMaxStartSize(swigCPtr, this, dimension2df.getCPtr(size), size);
  }

  public void setMinStartSize(dimension2df size) {
    JirrJNI.IParticleEmitter_setMinStartSize(swigCPtr, this, dimension2df.getCPtr(size), size);
  }

  public void setMinLifeTime(long lifeTimeMin) {
    JirrJNI.IParticleEmitter_setMinLifeTime(swigCPtr, this, lifeTimeMin);
  }

  public void setMaxLifeTime(long lifeTimeMax) {
    JirrJNI.IParticleEmitter_setMaxLifeTime(swigCPtr, this, lifeTimeMax);
  }

  public void setMaxAngleDegrees(int maxAngleDegrees) {
    JirrJNI.IParticleEmitter_setMaxAngleDegrees(swigCPtr, this, maxAngleDegrees);
  }

  public vector3df getDirection() {
    return new vector3df(JirrJNI.IParticleEmitter_getDirection(swigCPtr, this), false);
  }

  public long getMinParticlesPerSecond() {
    return JirrJNI.IParticleEmitter_getMinParticlesPerSecond(swigCPtr, this);
  }

  public long getMaxParticlesPerSecond() {
    return JirrJNI.IParticleEmitter_getMaxParticlesPerSecond(swigCPtr, this);
  }

  public SColor getMinStartColor() {
    return new SColor(JirrJNI.IParticleEmitter_getMinStartColor(swigCPtr, this), false);
  }

  public SColor getMaxStartColor() {
    return new SColor(JirrJNI.IParticleEmitter_getMaxStartColor(swigCPtr, this), false);
  }

  public dimension2df getMaxStartSize() {
    return new dimension2df(JirrJNI.IParticleEmitter_getMaxStartSize(swigCPtr, this), false);
  }

  public dimension2df getMinStartSize() {
    return new dimension2df(JirrJNI.IParticleEmitter_getMinStartSize(swigCPtr, this), false);
  }

  public long getMinLifeTime() {
    return JirrJNI.IParticleEmitter_getMinLifeTime(swigCPtr, this);
  }

  public long getMaxLifeTime() {
    return JirrJNI.IParticleEmitter_getMaxLifeTime(swigCPtr, this);
  }

  public int getMaxAngleDegrees() {
    return JirrJNI.IParticleEmitter_getMaxAngleDegrees(swigCPtr, this);
  }

  public E_PARTICLE_EMITTER_TYPE getType() {
    return E_PARTICLE_EMITTER_TYPE.swigToEnum(JirrJNI.IParticleEmitter_getType(swigCPtr, this));
  }

}
