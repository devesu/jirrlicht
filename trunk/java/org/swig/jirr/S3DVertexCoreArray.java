/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class S3DVertexCoreArray {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected S3DVertexCoreArray(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(S3DVertexCoreArray obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_S3DVertexCoreArray(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public S3DVertexCoreArray() {
    this(JirrJNI.new_S3DVertexCoreArray__SWIG_0(), true);
  }

  public S3DVertexCoreArray(long start_count) {
    this(JirrJNI.new_S3DVertexCoreArray__SWIG_1(start_count), true);
  }

  public S3DVertexCoreArray(S3DVertexCoreArray other) {
    this(JirrJNI.new_S3DVertexCoreArray__SWIG_2(S3DVertexCoreArray.getCPtr(other), other), true);
  }

  public void reallocate(long new_size, boolean canShrink) {
    JirrJNI.S3DVertexCoreArray_reallocate__SWIG_0(swigCPtr, this, new_size, canShrink);
  }

  public void reallocate(long new_size) {
    JirrJNI.S3DVertexCoreArray_reallocate__SWIG_1(swigCPtr, this, new_size);
  }

  public void setAllocStrategy(SWIGTYPE_p_eAllocStrategy newStrategy) {
    JirrJNI.S3DVertexCoreArray_setAllocStrategy__SWIG_0(swigCPtr, this, SWIGTYPE_p_eAllocStrategy.getCPtr(newStrategy));
  }

  public void setAllocStrategy() {
    JirrJNI.S3DVertexCoreArray_setAllocStrategy__SWIG_1(swigCPtr, this);
  }

  public void push_back(S3DVertex element) {
    JirrJNI.S3DVertexCoreArray_push_back(swigCPtr, this, S3DVertex.getCPtr(element), element);
  }

  public void push_front(S3DVertex element) {
    JirrJNI.S3DVertexCoreArray_push_front(swigCPtr, this, S3DVertex.getCPtr(element), element);
  }

  public void insert(S3DVertex element, long index) {
    JirrJNI.S3DVertexCoreArray_insert__SWIG_0(swigCPtr, this, S3DVertex.getCPtr(element), element, index);
  }

  public void insert(S3DVertex element) {
    JirrJNI.S3DVertexCoreArray_insert__SWIG_1(swigCPtr, this, S3DVertex.getCPtr(element), element);
  }

  public void clear() {
    JirrJNI.S3DVertexCoreArray_clear(swigCPtr, this);
  }

  public void set_pointer(S3DVertex[] newPointer, long size, boolean _is_sorted, boolean _free_when_destroyed) {
    JirrJNI.S3DVertexCoreArray_set_pointer__SWIG_0(swigCPtr, this, S3DVertex.cArrayUnwrap(newPointer), size, _is_sorted, _free_when_destroyed);
  }

  public void set_pointer(S3DVertex[] newPointer, long size, boolean _is_sorted) {
    JirrJNI.S3DVertexCoreArray_set_pointer__SWIG_1(swigCPtr, this, S3DVertex.cArrayUnwrap(newPointer), size, _is_sorted);
  }

  public void set_pointer(S3DVertex[] newPointer, long size) {
    JirrJNI.S3DVertexCoreArray_set_pointer__SWIG_2(swigCPtr, this, S3DVertex.cArrayUnwrap(newPointer), size);
  }

  public void set_free_when_destroyed(boolean f) {
    JirrJNI.S3DVertexCoreArray_set_free_when_destroyed(swigCPtr, this, f);
  }

  public void set_used(long usedNow) {
    JirrJNI.S3DVertexCoreArray_set_used(swigCPtr, this, usedNow);
  }

  public S3DVertexCoreArray assignOperator(S3DVertexCoreArray other) {
    return new S3DVertexCoreArray(JirrJNI.S3DVertexCoreArray_assignOperator(swigCPtr, this, S3DVertexCoreArray.getCPtr(other), other), false);
  }

  public boolean equalsOperator(S3DVertexCoreArray other) {
    return JirrJNI.S3DVertexCoreArray_equalsOperator(swigCPtr, this, S3DVertexCoreArray.getCPtr(other), other);
  }

  public boolean notEqualsOperator(S3DVertexCoreArray other) {
    return JirrJNI.S3DVertexCoreArray_notEqualsOperator(swigCPtr, this, S3DVertexCoreArray.getCPtr(other), other);
  }

  public S3DVertex getLast() {
    return new S3DVertex(JirrJNI.S3DVertexCoreArray_getLast(swigCPtr, this), false);
  }

  public S3DVertex getLastConst() {
    return new S3DVertex(JirrJNI.S3DVertexCoreArray_getLastConst(swigCPtr, this), false);
  }

  public S3DVertex[] pointer() {
    return S3DVertex.cArrayWrap(JirrJNI.S3DVertexCoreArray_pointer(swigCPtr, this), false);
  }

  public S3DVertex[] const_pointer() {
    return S3DVertex.cArrayWrap(JirrJNI.S3DVertexCoreArray_const_pointer(swigCPtr, this), false);
  }

  public long size() {
    return JirrJNI.S3DVertexCoreArray_size(swigCPtr, this);
  }

  public long allocated_size() {
    return JirrJNI.S3DVertexCoreArray_allocated_size(swigCPtr, this);
  }

  public boolean empty() {
    return JirrJNI.S3DVertexCoreArray_empty(swigCPtr, this);
  }

  public int binary_search_multi(S3DVertex element, SWIGTYPE_p_int last) {
    return JirrJNI.S3DVertexCoreArray_binary_search_multi(swigCPtr, this, S3DVertex.getCPtr(element), element, SWIGTYPE_p_int.getCPtr(last));
  }

  public int linear_reverse_search(S3DVertex element) {
    return JirrJNI.S3DVertexCoreArray_linear_reverse_search(swigCPtr, this, S3DVertex.getCPtr(element), element);
  }

  public void erase(long index) {
    JirrJNI.S3DVertexCoreArray_erase__SWIG_0(swigCPtr, this, index);
  }

  public void erase(long index, int count) {
    JirrJNI.S3DVertexCoreArray_erase__SWIG_1(swigCPtr, this, index, count);
  }

  public void set_sorted(boolean _is_sorted) {
    JirrJNI.S3DVertexCoreArray_set_sorted(swigCPtr, this, _is_sorted);
  }

  public void swap(S3DVertexCoreArray other) {
    JirrJNI.S3DVertexCoreArray_swap(swigCPtr, this, S3DVertexCoreArray.getCPtr(other), other);
  }

}
