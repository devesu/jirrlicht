/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class aabbox3df {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected aabbox3df(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(aabbox3df obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_aabbox3df(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public aabbox3df() {
    this(JirrJNI.new_aabbox3df__SWIG_0(), true);
  }

  public aabbox3df(vector3df min, vector3df max) {
    this(JirrJNI.new_aabbox3df__SWIG_1(vector3df.getCPtr(min), min, vector3df.getCPtr(max), max), true);
  }

  public aabbox3df(vector3df init) {
    this(JirrJNI.new_aabbox3df__SWIG_2(vector3df.getCPtr(init), init), true);
  }

  public aabbox3df(float minx, float miny, float minz, float maxx, float maxy, float maxz) {
    this(JirrJNI.new_aabbox3df__SWIG_3(minx, miny, minz, maxx, maxy, maxz), true);
  }

  public boolean equalsOperator(aabbox3df other) {
    return JirrJNI.aabbox3df_equalsOperator(swigCPtr, this, aabbox3df.getCPtr(other), other);
  }

  public boolean notEqualsOperator(aabbox3df other) {
    return JirrJNI.aabbox3df_notEqualsOperator(swigCPtr, this, aabbox3df.getCPtr(other), other);
  }

  public void reset(float x, float y, float z) {
    JirrJNI.aabbox3df_reset__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void reset(aabbox3df initValue) {
    JirrJNI.aabbox3df_reset__SWIG_1(swigCPtr, this, aabbox3df.getCPtr(initValue), initValue);
  }

  public void reset(vector3df initValue) {
    JirrJNI.aabbox3df_reset__SWIG_2(swigCPtr, this, vector3df.getCPtr(initValue), initValue);
  }

  public void addInternalPoint(vector3df p) {
    JirrJNI.aabbox3df_addInternalPoint__SWIG_0(swigCPtr, this, vector3df.getCPtr(p), p);
  }

  public void addInternalBox(aabbox3df b) {
    JirrJNI.aabbox3df_addInternalBox(swigCPtr, this, aabbox3df.getCPtr(b), b);
  }

  public void addInternalPoint(float x, float y, float z) {
    JirrJNI.aabbox3df_addInternalPoint__SWIG_1(swigCPtr, this, x, y, z);
  }

  public vector3df getCenter() {
    return new vector3df(JirrJNI.aabbox3df_getCenter(swigCPtr, this), true);
  }

  public vector3df getExtent() {
    return new vector3df(JirrJNI.aabbox3df_getExtent(swigCPtr, this), true);
  }

  public boolean isEmpty() {
    return JirrJNI.aabbox3df_isEmpty(swigCPtr, this);
  }

  public float getVolume() {
    return JirrJNI.aabbox3df_getVolume(swigCPtr, this);
  }

  public float getArea() {
    return JirrJNI.aabbox3df_getArea(swigCPtr, this);
  }

  public void getEdges(vector3df edges) {
    JirrJNI.aabbox3df_getEdges(swigCPtr, this, vector3df.getCPtr(edges), edges);
  }

  public void repair() {
    JirrJNI.aabbox3df_repair(swigCPtr, this);
  }

  public aabbox3df getInterpolated(aabbox3df other, float d) {
    return new aabbox3df(JirrJNI.aabbox3df_getInterpolated(swigCPtr, this, aabbox3df.getCPtr(other), other, d), true);
  }

  public boolean isPointInside(vector3df p) {
    return JirrJNI.aabbox3df_isPointInside(swigCPtr, this, vector3df.getCPtr(p), p);
  }

  public boolean isPointTotalInside(vector3df p) {
    return JirrJNI.aabbox3df_isPointTotalInside(swigCPtr, this, vector3df.getCPtr(p), p);
  }

  public boolean isFullInside(aabbox3df other) {
    return JirrJNI.aabbox3df_isFullInside(swigCPtr, this, aabbox3df.getCPtr(other), other);
  }

  public boolean intersectsWithBox(aabbox3df other) {
    return JirrJNI.aabbox3df_intersectsWithBox(swigCPtr, this, aabbox3df.getCPtr(other), other);
  }

  public boolean intersectsWithLine(line3df line) {
    return JirrJNI.aabbox3df_intersectsWithLine__SWIG_0(swigCPtr, this, line3df.getCPtr(line), line);
  }

  public boolean intersectsWithLine(vector3df linemiddle, vector3df linevect, float halflength) {
    return JirrJNI.aabbox3df_intersectsWithLine__SWIG_1(swigCPtr, this, vector3df.getCPtr(linemiddle), linemiddle, vector3df.getCPtr(linevect), linevect, halflength);
  }

  public EIntersectionRelation3D classifyPlaneRelation(plane3df plane) {
    return EIntersectionRelation3D.swigToEnum(JirrJNI.aabbox3df_classifyPlaneRelation(swigCPtr, this, plane3df.getCPtr(plane), plane));
  }

  public void setMinEdge(vector3df value) {
    JirrJNI.aabbox3df_MinEdge_set(swigCPtr, this, vector3df.getCPtr(value), value);
  }

  public vector3df getMinEdge() {
    long cPtr = JirrJNI.aabbox3df_MinEdge_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector3df(cPtr, false);
  }

  public void setMaxEdge(vector3df value) {
    JirrJNI.aabbox3df_MaxEdge_set(swigCPtr, this, vector3df.getCPtr(value), value);
  }

  public vector3df getMaxEdge() {
    long cPtr = JirrJNI.aabbox3df_MaxEdge_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector3df(cPtr, false);
  }

}
