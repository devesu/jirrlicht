/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class IMeshManipulator {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected IMeshManipulator(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IMeshManipulator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_IMeshManipulator(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void flipSurfaces(IMesh mesh) {
    JirrJNI.IMeshManipulator_flipSurfaces(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
  }

  public void setVertexColorAlpha(IMesh mesh, int alpha) {
    JirrJNI.IMeshManipulator_setVertexColorAlpha__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, alpha);
  }

  public void setVertexColorAlpha(IMeshBuffer buffer, int alpha) {
    JirrJNI.IMeshManipulator_setVertexColorAlpha__SWIG_1(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, alpha);
  }

  public void setVertexColors(IMesh mesh, SColor color) {
    JirrJNI.IMeshManipulator_setVertexColors__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, SColor.getCPtr(color), color);
  }

  public void setVertexColors(IMeshBuffer buffer, SColor color) {
    JirrJNI.IMeshManipulator_setVertexColors__SWIG_1(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, SColor.getCPtr(color), color);
  }

  public void recalculateNormals(IMesh mesh, boolean smooth, boolean angleWeighted) {
    JirrJNI.IMeshManipulator_recalculateNormals__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, smooth, angleWeighted);
  }

  public void recalculateNormals(IMesh mesh, boolean smooth) {
    JirrJNI.IMeshManipulator_recalculateNormals__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh, smooth);
  }

  public void recalculateNormals(IMesh mesh) {
    JirrJNI.IMeshManipulator_recalculateNormals__SWIG_2(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
  }

  public void recalculateNormals(IMeshBuffer buffer, boolean smooth, boolean angleWeighted) {
    JirrJNI.IMeshManipulator_recalculateNormals__SWIG_3(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, smooth, angleWeighted);
  }

  public void recalculateNormals(IMeshBuffer buffer, boolean smooth) {
    JirrJNI.IMeshManipulator_recalculateNormals__SWIG_4(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, smooth);
  }

  public void recalculateNormals(IMeshBuffer buffer) {
    JirrJNI.IMeshManipulator_recalculateNormals__SWIG_5(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer);
  }

  public void recalculateTangents(IMesh mesh, boolean recalculateNormals, boolean smooth, boolean angleWeighted) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, recalculateNormals, smooth, angleWeighted);
  }

  public void recalculateTangents(IMesh mesh, boolean recalculateNormals, boolean smooth) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh, recalculateNormals, smooth);
  }

  public void recalculateTangents(IMesh mesh, boolean recalculateNormals) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_2(swigCPtr, this, IMesh.getCPtr(mesh), mesh, recalculateNormals);
  }

  public void recalculateTangents(IMesh mesh) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_3(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
  }

  public void recalculateTangents(IMeshBuffer buffer, boolean recalculateNormals, boolean smooth, boolean angleWeighted) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_4(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, recalculateNormals, smooth, angleWeighted);
  }

  public void recalculateTangents(IMeshBuffer buffer, boolean recalculateNormals, boolean smooth) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_5(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, recalculateNormals, smooth);
  }

  public void recalculateTangents(IMeshBuffer buffer, boolean recalculateNormals) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_6(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, recalculateNormals);
  }

  public void recalculateTangents(IMeshBuffer buffer) {
    JirrJNI.IMeshManipulator_recalculateTangents__SWIG_7(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer);
  }

  public void scale(IMesh mesh, vector3df factor) {
    JirrJNI.IMeshManipulator_scale__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, vector3df.getCPtr(factor), factor);
  }

  public void scale(IMeshBuffer buffer, vector3df factor) {
    JirrJNI.IMeshManipulator_scale__SWIG_1(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, vector3df.getCPtr(factor), factor);
  }

  public void scaleMesh(IMesh mesh, vector3df factor) {
    JirrJNI.IMeshManipulator_scaleMesh(swigCPtr, this, IMesh.getCPtr(mesh), mesh, vector3df.getCPtr(factor), factor);
  }

  public void scaleTCoords(IMesh mesh, vector2df factor, long level) {
    JirrJNI.IMeshManipulator_scaleTCoords__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, vector2df.getCPtr(factor), factor, level);
  }

  public void scaleTCoords(IMesh mesh, vector2df factor) {
    JirrJNI.IMeshManipulator_scaleTCoords__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh, vector2df.getCPtr(factor), factor);
  }

  public void scaleTCoords(IMeshBuffer buffer, vector2df factor, long level) {
    JirrJNI.IMeshManipulator_scaleTCoords__SWIG_2(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, vector2df.getCPtr(factor), factor, level);
  }

  public void scaleTCoords(IMeshBuffer buffer, vector2df factor) {
    JirrJNI.IMeshManipulator_scaleTCoords__SWIG_3(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, vector2df.getCPtr(factor), factor);
  }

  public void transform(IMesh mesh, SWIGTYPE_p_irr__core__CMatrix4T_float_t m) {
    JirrJNI.IMeshManipulator_transform__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, SWIGTYPE_p_irr__core__CMatrix4T_float_t.getCPtr(m));
  }

  public void transform(IMeshBuffer buffer, SWIGTYPE_p_irr__core__CMatrix4T_float_t m) {
    JirrJNI.IMeshManipulator_transform__SWIG_1(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, SWIGTYPE_p_irr__core__CMatrix4T_float_t.getCPtr(m));
  }

  public void transformMesh(IMesh mesh, SWIGTYPE_p_irr__core__CMatrix4T_float_t m) {
    JirrJNI.IMeshManipulator_transformMesh(swigCPtr, this, IMesh.getCPtr(mesh), mesh, SWIGTYPE_p_irr__core__CMatrix4T_float_t.getCPtr(m));
  }

  public void makePlanarTextureMapping(IMesh mesh, float resolution) {
    JirrJNI.IMeshManipulator_makePlanarTextureMapping__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, resolution);
  }

  public void makePlanarTextureMapping(IMesh mesh) {
    JirrJNI.IMeshManipulator_makePlanarTextureMapping__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
  }

  public void makePlanarTextureMapping(IMeshBuffer meshbuffer, float resolution) {
    JirrJNI.IMeshManipulator_makePlanarTextureMapping__SWIG_2(swigCPtr, this, IMeshBuffer.getCPtr(meshbuffer), meshbuffer, resolution);
  }

  public void makePlanarTextureMapping(IMeshBuffer meshbuffer) {
    JirrJNI.IMeshManipulator_makePlanarTextureMapping__SWIG_3(swigCPtr, this, IMeshBuffer.getCPtr(meshbuffer), meshbuffer);
  }

  public void makePlanarTextureMapping(IMesh mesh, float resolutionS, float resolutionT, short axis, vector3df offset) {
    JirrJNI.IMeshManipulator_makePlanarTextureMapping__SWIG_4(swigCPtr, this, IMesh.getCPtr(mesh), mesh, resolutionS, resolutionT, axis, vector3df.getCPtr(offset), offset);
  }

  public void makePlanarTextureMapping(IMeshBuffer buffer, float resolutionS, float resolutionT, short axis, vector3df offset) {
    JirrJNI.IMeshManipulator_makePlanarTextureMapping__SWIG_5(swigCPtr, this, IMeshBuffer.getCPtr(buffer), buffer, resolutionS, resolutionT, axis, vector3df.getCPtr(offset), offset);
  }

  public SMesh createMeshCopy(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshCopy(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new SMesh(cPtr, false);
  }

  public IMesh createMeshWithTangents(IMesh mesh, boolean recalculateNormals, boolean smooth, boolean angleWeighted, boolean recalculateTangents) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWithTangents__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, recalculateNormals, smooth, angleWeighted, recalculateTangents);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWithTangents(IMesh mesh, boolean recalculateNormals, boolean smooth, boolean angleWeighted) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWithTangents__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh, recalculateNormals, smooth, angleWeighted);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWithTangents(IMesh mesh, boolean recalculateNormals, boolean smooth) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWithTangents__SWIG_2(swigCPtr, this, IMesh.getCPtr(mesh), mesh, recalculateNormals, smooth);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWithTangents(IMesh mesh, boolean recalculateNormals) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWithTangents__SWIG_3(swigCPtr, this, IMesh.getCPtr(mesh), mesh, recalculateNormals);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWithTangents(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWithTangents__SWIG_4(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWith2TCoords(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWith2TCoords(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWith1TCoords(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWith1TCoords(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshUniquePrimitives(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshUniquePrimitives(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWelded(IMesh mesh, float tolerance) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWelded__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, tolerance);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public IMesh createMeshWelded(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createMeshWelded__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

  public int getPolyCount(IMesh mesh) {
    return JirrJNI.IMeshManipulator_getPolyCount__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
  }

  public int getPolyCount(IAnimatedMesh mesh) {
    return JirrJNI.IMeshManipulator_getPolyCount__SWIG_1(swigCPtr, this, IAnimatedMesh.getCPtr(mesh), mesh);
  }

  public IAnimatedMesh createAnimatedMesh(IMesh mesh, E_ANIMATED_MESH_TYPE type) {
    long cPtr = JirrJNI.IMeshManipulator_createAnimatedMesh__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, type.swigValue());
    return (cPtr == 0) ? null : new IAnimatedMesh(cPtr, false);
  }

  public IAnimatedMesh createAnimatedMesh(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createAnimatedMesh__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new IAnimatedMesh(cPtr, false);
  }

  public IMesh createForsythOptimizedMesh(IMesh mesh) {
    long cPtr = JirrJNI.IMeshManipulator_createForsythOptimizedMesh(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new IMesh(cPtr, false);
  }

}
