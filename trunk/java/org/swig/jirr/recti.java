/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class recti {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected recti(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(recti obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_recti(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public recti() {
    this(JirrJNI.new_recti__SWIG_0(), true);
  }

  public recti(int x, int y, int x2, int y2) {
    this(JirrJNI.new_recti__SWIG_1(x, y, x2, y2), true);
  }

  public recti(vector2di upperLeft, vector2di lowerRight) {
    this(JirrJNI.new_recti__SWIG_2(vector2di.getCPtr(upperLeft), upperLeft, vector2di.getCPtr(lowerRight), lowerRight), true);
  }

  public recti addOperator(vector2di pos) {
    return new recti(JirrJNI.recti_addOperator(swigCPtr, this, vector2di.getCPtr(pos), pos), true);
  }

  public recti assignPlusOperator(vector2di pos) {
    return new recti(JirrJNI.recti_assignPlusOperator(swigCPtr, this, vector2di.getCPtr(pos), pos), false);
  }

  public recti subtractOperator(vector2di pos) {
    return new recti(JirrJNI.recti_subtractOperator(swigCPtr, this, vector2di.getCPtr(pos), pos), true);
  }

  public recti assignMinusOperator(vector2di pos) {
    return new recti(JirrJNI.recti_assignMinusOperator(swigCPtr, this, vector2di.getCPtr(pos), pos), false);
  }

  public boolean equalsOperator(recti other) {
    return JirrJNI.recti_equalsOperator(swigCPtr, this, recti.getCPtr(other), other);
  }

  public boolean notEqualsOperator(recti other) {
    return JirrJNI.recti_notEqualsOperator(swigCPtr, this, recti.getCPtr(other), other);
  }

  public boolean lessThanOperator(recti other) {
    return JirrJNI.recti_lessThanOperator(swigCPtr, this, recti.getCPtr(other), other);
  }

  public int getArea() {
    return JirrJNI.recti_getArea(swigCPtr, this);
  }

  public boolean isPointInside(vector2di pos) {
    return JirrJNI.recti_isPointInside(swigCPtr, this, vector2di.getCPtr(pos), pos);
  }

  public boolean isRectCollided(recti other) {
    return JirrJNI.recti_isRectCollided(swigCPtr, this, recti.getCPtr(other), other);
  }

  public void clipAgainst(recti other) {
    JirrJNI.recti_clipAgainst(swigCPtr, this, recti.getCPtr(other), other);
  }

  public boolean constrainTo(recti other) {
    return JirrJNI.recti_constrainTo(swigCPtr, this, recti.getCPtr(other), other);
  }

  public int getWidth() {
    return JirrJNI.recti_getWidth(swigCPtr, this);
  }

  public int getHeight() {
    return JirrJNI.recti_getHeight(swigCPtr, this);
  }

  public void repair() {
    JirrJNI.recti_repair(swigCPtr, this);
  }

  public boolean isValid() {
    return JirrJNI.recti_isValid(swigCPtr, this);
  }

  public vector2di getCenter() {
    return new vector2di(JirrJNI.recti_getCenter(swigCPtr, this), true);
  }

  public dimension2di getSize() {
    return new dimension2di(JirrJNI.recti_getSize(swigCPtr, this), true);
  }

  public void addInternalPoint(vector2di p) {
    JirrJNI.recti_addInternalPoint__SWIG_0(swigCPtr, this, vector2di.getCPtr(p), p);
  }

  public void addInternalPoint(int x, int y) {
    JirrJNI.recti_addInternalPoint__SWIG_1(swigCPtr, this, x, y);
  }

  public void setUpperLeftCorner(vector2di value) {
    JirrJNI.recti_UpperLeftCorner_set(swigCPtr, this, vector2di.getCPtr(value), value);
  }

  public vector2di getUpperLeftCorner() {
    long cPtr = JirrJNI.recti_UpperLeftCorner_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector2di(cPtr, false);
  }

  public void setLowerRightCorner(vector2di value) {
    JirrJNI.recti_LowerRightCorner_set(swigCPtr, this, vector2di.getCPtr(value), value);
  }

  public vector2di getLowerRightCorner() {
    long cPtr = JirrJNI.recti_LowerRightCorner_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector2di(cPtr, false);
  }

  public void setRect(int x1, int y1, int x2, int y2) {
    JirrJNI.recti_setRect(swigCPtr, this, x1, y1, x2, y2);
  }

}
