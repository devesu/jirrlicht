/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class dimension2df {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected dimension2df(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(dimension2df obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_dimension2df(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public dimension2df() {
    this(JirrJNI.new_dimension2df__SWIG_0(), true);
  }

  public dimension2df(float width, float height) {
    this(JirrJNI.new_dimension2df__SWIG_1(width, height), true);
  }

  public dimension2df(vector2df other) {
    this(JirrJNI.new_dimension2df__SWIG_2(vector2df.getCPtr(other), other), true);
  }

  public boolean equalsOperator(dimension2df other) {
    return JirrJNI.dimension2df_equalsOperator__SWIG_0(swigCPtr, this, dimension2df.getCPtr(other), other);
  }

  public boolean notEqualsOperator(dimension2df other) {
    return JirrJNI.dimension2df_notEqualsOperator__SWIG_0(swigCPtr, this, dimension2df.getCPtr(other), other);
  }

  public boolean equalsOperator(vector2df other) {
    return JirrJNI.dimension2df_equalsOperator__SWIG_1(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public boolean notEqualsOperator(vector2df other) {
    return JirrJNI.dimension2df_notEqualsOperator__SWIG_1(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public dimension2df set(float width, float height) {
    return new dimension2df(JirrJNI.dimension2df_set(swigCPtr, this, width, height), false);
  }

  public dimension2df assignDivideOperator(float scale) {
    return new dimension2df(JirrJNI.dimension2df_assignDivideOperator(swigCPtr, this, scale), false);
  }

  public dimension2df dividedOperator(float scale) {
    return new dimension2df(JirrJNI.dimension2df_dividedOperator(swigCPtr, this, scale), true);
  }

  public dimension2df assignTimesOperator(float scale) {
    return new dimension2df(JirrJNI.dimension2df_assignTimesOperator(swigCPtr, this, scale), false);
  }

  public dimension2df timesOperator(float scale) {
    return new dimension2df(JirrJNI.dimension2df_timesOperator(swigCPtr, this, scale), true);
  }

  public dimension2df assignPlusOperator(dimension2df other) {
    return new dimension2df(JirrJNI.dimension2df_assignPlusOperator(swigCPtr, this, dimension2df.getCPtr(other), other), false);
  }

  public dimension2df addOperator(dimension2df other) {
    return new dimension2df(JirrJNI.dimension2df_addOperator(swigCPtr, this, dimension2df.getCPtr(other), other), true);
  }

  public dimension2df assignMinusOperator(dimension2df other) {
    return new dimension2df(JirrJNI.dimension2df_assignMinusOperator(swigCPtr, this, dimension2df.getCPtr(other), other), false);
  }

  public dimension2df subtractOperator(dimension2df other) {
    return new dimension2df(JirrJNI.dimension2df_subtractOperator(swigCPtr, this, dimension2df.getCPtr(other), other), true);
  }

  public float getArea() {
    return JirrJNI.dimension2df_getArea(swigCPtr, this);
  }

  public dimension2df getOptimalSize(boolean requirePowerOfTwo, boolean requireSquare, boolean larger, long maxValue) {
    return new dimension2df(JirrJNI.dimension2df_getOptimalSize__SWIG_0(swigCPtr, this, requirePowerOfTwo, requireSquare, larger, maxValue), true);
  }

  public dimension2df getOptimalSize(boolean requirePowerOfTwo, boolean requireSquare, boolean larger) {
    return new dimension2df(JirrJNI.dimension2df_getOptimalSize__SWIG_1(swigCPtr, this, requirePowerOfTwo, requireSquare, larger), true);
  }

  public dimension2df getOptimalSize(boolean requirePowerOfTwo, boolean requireSquare) {
    return new dimension2df(JirrJNI.dimension2df_getOptimalSize__SWIG_2(swigCPtr, this, requirePowerOfTwo, requireSquare), true);
  }

  public dimension2df getOptimalSize(boolean requirePowerOfTwo) {
    return new dimension2df(JirrJNI.dimension2df_getOptimalSize__SWIG_3(swigCPtr, this, requirePowerOfTwo), true);
  }

  public dimension2df getOptimalSize() {
    return new dimension2df(JirrJNI.dimension2df_getOptimalSize__SWIG_4(swigCPtr, this), true);
  }

  public dimension2df getInterpolated(dimension2df other, float d) {
    return new dimension2df(JirrJNI.dimension2df_getInterpolated(swigCPtr, this, dimension2df.getCPtr(other), other, d), true);
  }

  public void setWidth(float value) {
    JirrJNI.dimension2df_Width_set(swigCPtr, this, value);
  }

  public float getWidth() {
    return JirrJNI.dimension2df_Width_get(swigCPtr, this);
  }

  public void setHeight(float value) {
    JirrJNI.dimension2df_Height_set(swigCPtr, this, value);
  }

  public float getHeight() {
    return JirrJNI.dimension2df_Height_get(swigCPtr, this);
  }

}
