/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class vector2df {
  protected long swigCPtr;
  protected boolean swigCMemOwn;

  protected vector2df(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(vector2df obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_vector2df(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public vector2df() {
    this(JirrJNI.new_vector2df__SWIG_0(), true);
  }

  public vector2df(float nx, float ny) {
    this(JirrJNI.new_vector2df__SWIG_1(nx, ny), true);
  }

  public vector2df(float n) {
    this(JirrJNI.new_vector2df__SWIG_2(n), true);
  }

  public vector2df(vector2df other) {
    this(JirrJNI.new_vector2df__SWIG_3(vector2df.getCPtr(other), other), true);
  }

  public vector2df(dimension2df other) {
    this(JirrJNI.new_vector2df__SWIG_4(dimension2df.getCPtr(other), other), true);
  }

  public vector2df subtractOperator() {
    return new vector2df(JirrJNI.vector2df_subtractOperator__SWIG_0(swigCPtr, this), true);
  }

  public vector2df assignOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_assignOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), false);
  }

  public vector2df assignOperator(dimension2df other) {
    return new vector2df(JirrJNI.vector2df_assignOperator__SWIG_1(swigCPtr, this, dimension2df.getCPtr(other), other), false);
  }

  public vector2df addOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_addOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), true);
  }

  public vector2df addOperator(dimension2df other) {
    return new vector2df(JirrJNI.vector2df_addOperator__SWIG_1(swigCPtr, this, dimension2df.getCPtr(other), other), true);
  }

  public vector2df assignPlusOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_assignPlusOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), false);
  }

  public vector2df addOperator(float v) {
    return new vector2df(JirrJNI.vector2df_addOperator__SWIG_2(swigCPtr, this, v), true);
  }

  public vector2df assignPlusOperator(float v) {
    return new vector2df(JirrJNI.vector2df_assignPlusOperator__SWIG_1(swigCPtr, this, v), false);
  }

  public vector2df assignPlusOperator(dimension2df other) {
    return new vector2df(JirrJNI.vector2df_assignPlusOperator__SWIG_2(swigCPtr, this, dimension2df.getCPtr(other), other), false);
  }

  public vector2df subtractOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_subtractOperator__SWIG_1(swigCPtr, this, vector2df.getCPtr(other), other), true);
  }

  public vector2df subtractOperator(dimension2df other) {
    return new vector2df(JirrJNI.vector2df_subtractOperator__SWIG_2(swigCPtr, this, dimension2df.getCPtr(other), other), true);
  }

  public vector2df assignMinusOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_assignMinusOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), false);
  }

  public vector2df subtractOperator(float v) {
    return new vector2df(JirrJNI.vector2df_subtractOperator__SWIG_3(swigCPtr, this, v), true);
  }

  public vector2df assignMinusOperator(float v) {
    return new vector2df(JirrJNI.vector2df_assignMinusOperator__SWIG_1(swigCPtr, this, v), false);
  }

  public vector2df assignMinusOperator(dimension2df other) {
    return new vector2df(JirrJNI.vector2df_assignMinusOperator__SWIG_2(swigCPtr, this, dimension2df.getCPtr(other), other), false);
  }

  public vector2df timesOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_timesOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), true);
  }

  public vector2df assignTimesOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_assignTimesOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), false);
  }

  public vector2df timesOperator(float v) {
    return new vector2df(JirrJNI.vector2df_timesOperator__SWIG_1(swigCPtr, this, v), true);
  }

  public vector2df assignTimesOperator(float v) {
    return new vector2df(JirrJNI.vector2df_assignTimesOperator__SWIG_1(swigCPtr, this, v), false);
  }

  public vector2df dividedOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_dividedOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), true);
  }

  public vector2df assignDivideOperator(vector2df other) {
    return new vector2df(JirrJNI.vector2df_assignDivideOperator__SWIG_0(swigCPtr, this, vector2df.getCPtr(other), other), false);
  }

  public vector2df dividedOperator(float v) {
    return new vector2df(JirrJNI.vector2df_dividedOperator__SWIG_1(swigCPtr, this, v), true);
  }

  public vector2df assignDivideOperator(float v) {
    return new vector2df(JirrJNI.vector2df_assignDivideOperator__SWIG_1(swigCPtr, this, v), false);
  }

  public boolean lessThanOrEqualOperator(vector2df other) {
    return JirrJNI.vector2df_lessThanOrEqualOperator(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public boolean moreThanOrEqualOperator(vector2df other) {
    return JirrJNI.vector2df_moreThanOrEqualOperator(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public boolean lessThanOperator(vector2df other) {
    return JirrJNI.vector2df_lessThanOperator(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public boolean moreThanOperator(vector2df other) {
    return JirrJNI.vector2df_moreThanOperator(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public boolean equalsOperator(vector2df other) {
    return JirrJNI.vector2df_equalsOperator(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public boolean notEqualsOperator(vector2df other) {
    return JirrJNI.vector2df_notEqualsOperator(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public boolean equals(vector2df other) {
    return JirrJNI.vector2df_equals(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public vector2df set(float nx, float ny) {
    return new vector2df(JirrJNI.vector2df_set__SWIG_0(swigCPtr, this, nx, ny), false);
  }

  public vector2df set(vector2df p) {
    return new vector2df(JirrJNI.vector2df_set__SWIG_1(swigCPtr, this, vector2df.getCPtr(p), p), false);
  }

  public float getLength() {
    return JirrJNI.vector2df_getLength(swigCPtr, this);
  }

  public float getLengthSQ() {
    return JirrJNI.vector2df_getLengthSQ(swigCPtr, this);
  }

  public float dotProduct(vector2df other) {
    return JirrJNI.vector2df_dotProduct(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public float getDistanceFrom(vector2df other) {
    return JirrJNI.vector2df_getDistanceFrom(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public float getDistanceFromSQ(vector2df other) {
    return JirrJNI.vector2df_getDistanceFromSQ(swigCPtr, this, vector2df.getCPtr(other), other);
  }

  public vector2df rotateBy(double degrees, vector2df center) {
    return new vector2df(JirrJNI.vector2df_rotateBy__SWIG_0(swigCPtr, this, degrees, vector2df.getCPtr(center), center), false);
  }

  public vector2df rotateBy(double degrees) {
    return new vector2df(JirrJNI.vector2df_rotateBy__SWIG_1(swigCPtr, this, degrees), false);
  }

  public vector2df normalize() {
    return new vector2df(JirrJNI.vector2df_normalize(swigCPtr, this), false);
  }

  public double getAngleTrig() {
    return JirrJNI.vector2df_getAngleTrig(swigCPtr, this);
  }

  public double getAngle() {
    return JirrJNI.vector2df_getAngle(swigCPtr, this);
  }

  public double getAngleWith(vector2df b) {
    return JirrJNI.vector2df_getAngleWith(swigCPtr, this, vector2df.getCPtr(b), b);
  }

  public boolean isBetweenPoints(vector2df begin, vector2df end) {
    return JirrJNI.vector2df_isBetweenPoints(swigCPtr, this, vector2df.getCPtr(begin), begin, vector2df.getCPtr(end), end);
  }

  public vector2df getInterpolated(vector2df other, double d) {
    return new vector2df(JirrJNI.vector2df_getInterpolated(swigCPtr, this, vector2df.getCPtr(other), other, d), true);
  }

  public vector2df getInterpolated_quadratic(vector2df v2, vector2df v3, double d) {
    return new vector2df(JirrJNI.vector2df_getInterpolated_quadratic(swigCPtr, this, vector2df.getCPtr(v2), v2, vector2df.getCPtr(v3), v3, d), true);
  }

  public vector2df interpolate(vector2df a, vector2df b, double d) {
    return new vector2df(JirrJNI.vector2df_interpolate(swigCPtr, this, vector2df.getCPtr(a), a, vector2df.getCPtr(b), b, d), false);
  }

  public void setX(float value) {
    JirrJNI.vector2df_X_set(swigCPtr, this, value);
  }

  public float getX() {
    return JirrJNI.vector2df_X_get(swigCPtr, this);
  }

  public void setY(float value) {
    JirrJNI.vector2df_Y_set(swigCPtr, this, value);
  }

  public float getY() {
    return JirrJNI.vector2df_Y_get(swigCPtr, this);
  }

}
