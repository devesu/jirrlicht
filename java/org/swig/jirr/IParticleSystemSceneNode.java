/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class IParticleSystemSceneNode extends ISceneNode {
  private long swigCPtr;

  protected IParticleSystemSceneNode(long cPtr, boolean cMemoryOwn) {
    super(JirrJNI.IParticleSystemSceneNode_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IParticleSystemSceneNode obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_IParticleSystemSceneNode(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setParticleSize(dimension2df size) {
    JirrJNI.IParticleSystemSceneNode_setParticleSize__SWIG_0(swigCPtr, this, dimension2df.getCPtr(size), size);
  }

  public void setParticleSize() {
    JirrJNI.IParticleSystemSceneNode_setParticleSize__SWIG_1(swigCPtr, this);
  }

  public void setParticlesAreGlobal(boolean global) {
    JirrJNI.IParticleSystemSceneNode_setParticlesAreGlobal__SWIG_0(swigCPtr, this, global);
  }

  public void setParticlesAreGlobal() {
    JirrJNI.IParticleSystemSceneNode_setParticlesAreGlobal__SWIG_1(swigCPtr, this);
  }

  public void clearParticles() {
    JirrJNI.IParticleSystemSceneNode_clearParticles(swigCPtr, this);
  }

  public void doParticleSystem(long time) {
    JirrJNI.IParticleSystemSceneNode_doParticleSystem(swigCPtr, this, time);
  }

  public IParticleEmitter getEmitter() {
    long cPtr = JirrJNI.IParticleSystemSceneNode_getEmitter(swigCPtr, this);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public void setEmitter(IParticleEmitter emitter) {
    JirrJNI.IParticleSystemSceneNode_setEmitter(swigCPtr, this, IParticleEmitter.getCPtr(emitter), emitter);
  }

  public void addAffector(IParticleAffector affector) {
    JirrJNI.IParticleSystemSceneNode_addAffector(swigCPtr, this, IParticleAffector.getCPtr(affector), affector);
  }

  public SWIGTYPE_p_irr__core__listT_irr__scene__IParticleAffector_p_t getAffectors() {
    return new SWIGTYPE_p_irr__core__listT_irr__scene__IParticleAffector_p_t(JirrJNI.IParticleSystemSceneNode_getAffectors(swigCPtr, this), false);
  }

  public void removeAllAffectors() {
    JirrJNI.IParticleSystemSceneNode_removeAllAffectors(swigCPtr, this);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize, dimension2df maxStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_0(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize, dimension2df.getCPtr(maxStartSize), maxStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_1(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_2(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_3(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_4(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_5(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_6(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_7(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_8(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_9(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_10(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction, float normalDirectionModifier) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_11(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection, vector3df direction) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_12(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection, vector3df.getCPtr(direction), direction);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node, boolean useNormalDirection) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_13(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node, useNormalDirection);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter createAnimatedMeshSceneNodeEmitter(IAnimatedMeshSceneNode node) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_14(swigCPtr, this, IAnimatedMeshSceneNode.getCPtr(node), node);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAnimatedMeshSceneNodeEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize, dimension2df maxStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_0(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize, dimension2df.getCPtr(maxStartSize), maxStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_1(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_2(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_3(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_4(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_5(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_6(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_7(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction, long minParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_8(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction, minParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box, vector3df direction) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_9(swigCPtr, this, aabbox3df.getCPtr(box), box, vector3df.getCPtr(direction), direction);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter(aabbox3df box) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_10(swigCPtr, this, aabbox3df.getCPtr(box), box);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleBoxEmitter createBoxEmitter() {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createBoxEmitter__SWIG_11(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleBoxEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize, dimension2df maxStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_0(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize, dimension2df.getCPtr(maxStartSize), maxStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_1(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_2(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_3(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_4(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_5(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_6(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_7(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction, long minParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_8(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction, minParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly, vector3df direction) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_9(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly, vector3df.getCPtr(direction), direction);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length, boolean outlineOnly) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_10(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length, outlineOnly);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleCylinderEmitter createCylinderEmitter(vector3df center, float radius, vector3df normal, float length) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createCylinderEmitter__SWIG_11(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(normal), normal, length);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleCylinderEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize, dimension2df maxStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_0(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize, dimension2df.getCPtr(maxStartSize), maxStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_1(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_2(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_3(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_4(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_5(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_6(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond, long maxParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_7(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond, maxParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex, long minParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_8(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex, minParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber, boolean everyMeshVertex) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_9(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber, everyMeshVertex);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier, int mbNumber) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_10(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier, mbNumber);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction, float normalDirectionModifier) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_11(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction, normalDirectionModifier);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection, vector3df direction) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_12(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection, vector3df.getCPtr(direction), direction);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh, boolean useNormalDirection) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_13(swigCPtr, this, IMesh.getCPtr(mesh), mesh, useNormalDirection);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleMeshEmitter createMeshEmitter(IMesh mesh) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createMeshEmitter__SWIG_14(swigCPtr, this, IMesh.getCPtr(mesh), mesh);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleMeshEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize, dimension2df maxStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_0(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize, dimension2df.getCPtr(maxStartSize), maxStartSize);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_1(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_2(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_3(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_4(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_5(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_6(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_7(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction, long minParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_8(swigCPtr, this, vector3df.getCPtr(direction), direction, minParticlesPerSecond);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter(vector3df direction) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_9(swigCPtr, this, vector3df.getCPtr(direction), direction);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public IParticleEmitter createPointEmitter() {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createPointEmitter__SWIG_10(swigCPtr, this);
    return (cPtr == 0) ? null : new IParticleEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize, dimension2df maxStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_0(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize, dimension2df.getCPtr(maxStartSize), maxStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_1(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_2(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_3(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_4(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_5(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_6(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_7(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction, long minParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_8(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction, minParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness, vector3df direction) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_9(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness, vector3df.getCPtr(direction), direction);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRingEmitter createRingEmitter(vector3df center, float radius, float ringThickness) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRingEmitter__SWIG_10(swigCPtr, this, vector3df.getCPtr(center), center, radius, ringThickness);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRingEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize, dimension2df maxStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_0(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize, dimension2df.getCPtr(maxStartSize), maxStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees, dimension2df minStartSize) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_1(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees, dimension2df.getCPtr(minStartSize), minStartSize);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax, int maxAngleDegrees) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_2(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax, maxAngleDegrees);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin, long lifeTimeMax) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_3(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin, lifeTimeMax);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor, long lifeTimeMin) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_4(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor, lifeTimeMin);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor, SColor maxStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_5(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor, SColor.getCPtr(maxStartColor), maxStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond, SColor minStartColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_6(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond, SColor.getCPtr(minStartColor), minStartColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond, long maxParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_7(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond, maxParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction, long minParticlesPerSecond) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_8(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction, minParticlesPerSecond);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius, vector3df direction) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_9(swigCPtr, this, vector3df.getCPtr(center), center, radius, vector3df.getCPtr(direction), direction);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleSphereEmitter createSphereEmitter(vector3df center, float radius) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createSphereEmitter__SWIG_10(swigCPtr, this, vector3df.getCPtr(center), center, radius);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleSphereEmitter(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAttractionAffector createAttractionAffector(vector3df point, float speed, boolean attract, boolean affectX, boolean affectY, boolean affectZ) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAttractionAffector__SWIG_0(swigCPtr, this, vector3df.getCPtr(point), point, speed, attract, affectX, affectY, affectZ);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAttractionAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAttractionAffector createAttractionAffector(vector3df point, float speed, boolean attract, boolean affectX, boolean affectY) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAttractionAffector__SWIG_1(swigCPtr, this, vector3df.getCPtr(point), point, speed, attract, affectX, affectY);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAttractionAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAttractionAffector createAttractionAffector(vector3df point, float speed, boolean attract, boolean affectX) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAttractionAffector__SWIG_2(swigCPtr, this, vector3df.getCPtr(point), point, speed, attract, affectX);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAttractionAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAttractionAffector createAttractionAffector(vector3df point, float speed, boolean attract) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAttractionAffector__SWIG_3(swigCPtr, this, vector3df.getCPtr(point), point, speed, attract);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAttractionAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAttractionAffector createAttractionAffector(vector3df point, float speed) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAttractionAffector__SWIG_4(swigCPtr, this, vector3df.getCPtr(point), point, speed);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAttractionAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleAttractionAffector createAttractionAffector(vector3df point) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createAttractionAffector__SWIG_5(swigCPtr, this, vector3df.getCPtr(point), point);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleAttractionAffector(cPtr, false);
  }

  public IParticleAffector createScaleParticleAffector(dimension2df scaleTo) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createScaleParticleAffector__SWIG_0(swigCPtr, this, dimension2df.getCPtr(scaleTo), scaleTo);
    return (cPtr == 0) ? null : new IParticleAffector(cPtr, false);
  }

  public IParticleAffector createScaleParticleAffector() {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createScaleParticleAffector__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new IParticleAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleFadeOutAffector createFadeOutParticleAffector(SColor targetColor, long timeNeededToFadeOut) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_0(swigCPtr, this, SColor.getCPtr(targetColor), targetColor, timeNeededToFadeOut);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleFadeOutAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleFadeOutAffector createFadeOutParticleAffector(SColor targetColor) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_1(swigCPtr, this, SColor.getCPtr(targetColor), targetColor);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleFadeOutAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleFadeOutAffector createFadeOutParticleAffector() {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_2(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleFadeOutAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleGravityAffector createGravityAffector(vector3df gravity, long timeForceLost) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createGravityAffector__SWIG_0(swigCPtr, this, vector3df.getCPtr(gravity), gravity, timeForceLost);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleGravityAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleGravityAffector createGravityAffector(vector3df gravity) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createGravityAffector__SWIG_1(swigCPtr, this, vector3df.getCPtr(gravity), gravity);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleGravityAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleGravityAffector createGravityAffector() {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createGravityAffector__SWIG_2(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleGravityAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRotationAffector createRotationAffector(vector3df speed, vector3df pivotPoint) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRotationAffector__SWIG_0(swigCPtr, this, vector3df.getCPtr(speed), speed, vector3df.getCPtr(pivotPoint), pivotPoint);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRotationAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRotationAffector createRotationAffector(vector3df speed) {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRotationAffector__SWIG_1(swigCPtr, this, vector3df.getCPtr(speed), speed);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRotationAffector(cPtr, false);
  }

  public SWIGTYPE_p_IParticleRotationAffector createRotationAffector() {
    long cPtr = JirrJNI.IParticleSystemSceneNode_createRotationAffector__SWIG_2(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_IParticleRotationAffector(cPtr, false);
  }

}
