/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class IImage {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected IImage(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IImage obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_IImage(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_void lock() {
    long cPtr = JirrJNI.IImage_lock(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void unlock() {
    JirrJNI.IImage_unlock(swigCPtr, this);
  }

  public SWIGTYPE_p_irr__core__dimension2dT_unsigned_int_t getDimension() {
    return new SWIGTYPE_p_irr__core__dimension2dT_unsigned_int_t(JirrJNI.IImage_getDimension(swigCPtr, this), false);
  }

  public long getBitsPerPixel() {
    return JirrJNI.IImage_getBitsPerPixel(swigCPtr, this);
  }

  public long getBytesPerPixel() {
    return JirrJNI.IImage_getBytesPerPixel(swigCPtr, this);
  }

  public long getImageDataSizeInBytes() {
    return JirrJNI.IImage_getImageDataSizeInBytes(swigCPtr, this);
  }

  public long getImageDataSizeInPixels() {
    return JirrJNI.IImage_getImageDataSizeInPixels(swigCPtr, this);
  }

  public SColor getPixel(long x, long y) {
    return new SColor(JirrJNI.IImage_getPixel(swigCPtr, this, x, y), true);
  }

  public void setPixel(long x, long y, SColor color, boolean blend) {
    JirrJNI.IImage_setPixel__SWIG_0(swigCPtr, this, x, y, SColor.getCPtr(color), color, blend);
  }

  public void setPixel(long x, long y, SColor color) {
    JirrJNI.IImage_setPixel__SWIG_1(swigCPtr, this, x, y, SColor.getCPtr(color), color);
  }

  public ECOLOR_FORMAT getColorFormat() {
    return ECOLOR_FORMAT.swigToEnum(JirrJNI.IImage_getColorFormat(swigCPtr, this));
  }

  public long getRedMask() {
    return JirrJNI.IImage_getRedMask(swigCPtr, this);
  }

  public long getGreenMask() {
    return JirrJNI.IImage_getGreenMask(swigCPtr, this);
  }

  public long getBlueMask() {
    return JirrJNI.IImage_getBlueMask(swigCPtr, this);
  }

  public long getAlphaMask() {
    return JirrJNI.IImage_getAlphaMask(swigCPtr, this);
  }

  public long getPitch() {
    return JirrJNI.IImage_getPitch(swigCPtr, this);
  }

  public void copyToScaling(SWIGTYPE_p_void target, long width, long height, ECOLOR_FORMAT format, long pitch) {
    JirrJNI.IImage_copyToScaling__SWIG_0(swigCPtr, this, SWIGTYPE_p_void.getCPtr(target), width, height, format.swigValue(), pitch);
  }

  public void copyToScaling(SWIGTYPE_p_void target, long width, long height, ECOLOR_FORMAT format) {
    JirrJNI.IImage_copyToScaling__SWIG_1(swigCPtr, this, SWIGTYPE_p_void.getCPtr(target), width, height, format.swigValue());
  }

  public void copyToScaling(SWIGTYPE_p_void target, long width, long height) {
    JirrJNI.IImage_copyToScaling__SWIG_2(swigCPtr, this, SWIGTYPE_p_void.getCPtr(target), width, height);
  }

  public void copyToScaling(IImage target) {
    JirrJNI.IImage_copyToScaling__SWIG_3(swigCPtr, this, IImage.getCPtr(target), target);
  }

  public void copyTo(IImage target, vector2di pos) {
    JirrJNI.IImage_copyTo__SWIG_0(swigCPtr, this, IImage.getCPtr(target), target, vector2di.getCPtr(pos), pos);
  }

  public void copyTo(IImage target) {
    JirrJNI.IImage_copyTo__SWIG_1(swigCPtr, this, IImage.getCPtr(target), target);
  }

  public void copyTo(IImage target, vector2di pos, recti sourceRect, recti clipRect) {
    JirrJNI.IImage_copyTo__SWIG_2(swigCPtr, this, IImage.getCPtr(target), target, vector2di.getCPtr(pos), pos, recti.getCPtr(sourceRect), sourceRect, recti.getCPtr(clipRect), clipRect);
  }

  public void copyTo(IImage target, vector2di pos, recti sourceRect) {
    JirrJNI.IImage_copyTo__SWIG_3(swigCPtr, this, IImage.getCPtr(target), target, vector2di.getCPtr(pos), pos, recti.getCPtr(sourceRect), sourceRect);
  }

  public void copyToWithAlpha(IImage target, vector2di pos, recti sourceRect, SColor color, recti clipRect) {
    JirrJNI.IImage_copyToWithAlpha__SWIG_0(swigCPtr, this, IImage.getCPtr(target), target, vector2di.getCPtr(pos), pos, recti.getCPtr(sourceRect), sourceRect, SColor.getCPtr(color), color, recti.getCPtr(clipRect), clipRect);
  }

  public void copyToWithAlpha(IImage target, vector2di pos, recti sourceRect, SColor color) {
    JirrJNI.IImage_copyToWithAlpha__SWIG_1(swigCPtr, this, IImage.getCPtr(target), target, vector2di.getCPtr(pos), pos, recti.getCPtr(sourceRect), sourceRect, SColor.getCPtr(color), color);
  }

  public void copyToScalingBoxFilter(IImage target, int bias, boolean blend) {
    JirrJNI.IImage_copyToScalingBoxFilter__SWIG_0(swigCPtr, this, IImage.getCPtr(target), target, bias, blend);
  }

  public void copyToScalingBoxFilter(IImage target, int bias) {
    JirrJNI.IImage_copyToScalingBoxFilter__SWIG_1(swigCPtr, this, IImage.getCPtr(target), target, bias);
  }

  public void copyToScalingBoxFilter(IImage target) {
    JirrJNI.IImage_copyToScalingBoxFilter__SWIG_2(swigCPtr, this, IImage.getCPtr(target), target);
  }

  public void fill(SColor color) {
    JirrJNI.IImage_fill(swigCPtr, this, SColor.getCPtr(color), color);
  }

  public static long getBitsPerPixelFromFormat(ECOLOR_FORMAT format) {
    return JirrJNI.IImage_getBitsPerPixelFromFormat(format.swigValue());
  }

  public static boolean isRenderTargetOnlyFormat(ECOLOR_FORMAT format) {
    return JirrJNI.IImage_isRenderTargetOnlyFormat(format.swigValue());
  }
}
