/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class S3DVertexTangents extends S3DVertex {
  private long swigCPtr;

  protected S3DVertexTangents(long cPtr, boolean cMemoryOwn) {
    super(JirrJNI.S3DVertexTangents_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(S3DVertexTangents obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_S3DVertexTangents(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected static long[] cArrayUnwrap(S3DVertexTangents[] arrayWrapper) {
      long[] cArray = new long[arrayWrapper.length];
      for (int i=0; i<arrayWrapper.length; i++)
        cArray[i] = S3DVertexTangents.getCPtr(arrayWrapper[i]);
      return cArray;
  }

  protected static S3DVertexTangents[] cArrayWrap(long[] cArray, boolean cMemoryOwn) {
    S3DVertexTangents[] arrayWrapper = new S3DVertexTangents[cArray.length];
    for (int i=0; i<cArray.length; i++)
      arrayWrapper[i] = new S3DVertexTangents(cArray[i], cMemoryOwn);
    return arrayWrapper;
  }

  public S3DVertexTangents() {
    this(JirrJNI.new_S3DVertexTangents__SWIG_0(), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu, float tv, float tanx, float tany, float tanz, float bx, float by, float bz) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_1(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu, tv, tanx, tany, tanz, bx, by, bz), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu, float tv, float tanx, float tany, float tanz, float bx, float by) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_2(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu, tv, tanx, tany, tanz, bx, by), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu, float tv, float tanx, float tany, float tanz, float bx) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_3(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu, tv, tanx, tany, tanz, bx), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu, float tv, float tanx, float tany, float tanz) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_4(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu, tv, tanx, tany, tanz), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu, float tv, float tanx, float tany) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_5(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu, tv, tanx, tany), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu, float tv, float tanx) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_6(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu, tv, tanx), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu, float tv) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_7(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu, tv), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c, float tu) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_8(x, y, z, nx, ny, nz, SColor.getCPtr(c), c, tu), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz, SColor c) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_9(x, y, z, nx, ny, nz, SColor.getCPtr(c), c), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny, float nz) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_10(x, y, z, nx, ny, nz), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx, float ny) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_11(x, y, z, nx, ny), true);
  }

  public S3DVertexTangents(float x, float y, float z, float nx) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_12(x, y, z, nx), true);
  }

  public S3DVertexTangents(float x, float y, float z) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_13(x, y, z), true);
  }

  public S3DVertexTangents(vector3df pos, SColor c, vector2df tcoords) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_14(vector3df.getCPtr(pos), pos, SColor.getCPtr(c), c, vector2df.getCPtr(tcoords), tcoords), true);
  }

  public S3DVertexTangents(vector3df pos, vector3df normal, SColor c, vector2df tcoords, vector3df tangent, vector3df binormal) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_15(vector3df.getCPtr(pos), pos, vector3df.getCPtr(normal), normal, SColor.getCPtr(c), c, vector2df.getCPtr(tcoords), tcoords, vector3df.getCPtr(tangent), tangent, vector3df.getCPtr(binormal), binormal), true);
  }

  public S3DVertexTangents(vector3df pos, vector3df normal, SColor c, vector2df tcoords, vector3df tangent) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_16(vector3df.getCPtr(pos), pos, vector3df.getCPtr(normal), normal, SColor.getCPtr(c), c, vector2df.getCPtr(tcoords), tcoords, vector3df.getCPtr(tangent), tangent), true);
  }

  public S3DVertexTangents(vector3df pos, vector3df normal, SColor c, vector2df tcoords) {
    this(JirrJNI.new_S3DVertexTangents__SWIG_17(vector3df.getCPtr(pos), pos, vector3df.getCPtr(normal), normal, SColor.getCPtr(c), c, vector2df.getCPtr(tcoords), tcoords), true);
  }

  public void setTangent(vector3df value) {
    JirrJNI.S3DVertexTangents_Tangent_set(swigCPtr, this, vector3df.getCPtr(value), value);
  }

  public vector3df getTangent() {
    long cPtr = JirrJNI.S3DVertexTangents_Tangent_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector3df(cPtr, false);
  }

  public void setBinormal(vector3df value) {
    JirrJNI.S3DVertexTangents_Binormal_set(swigCPtr, this, vector3df.getCPtr(value), value);
  }

  public vector3df getBinormal() {
    long cPtr = JirrJNI.S3DVertexTangents_Binormal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector3df(cPtr, false);
  }

  public boolean equalsOperator(S3DVertexTangents other) {
    return JirrJNI.S3DVertexTangents_equalsOperator(swigCPtr, this, S3DVertexTangents.getCPtr(other), other);
  }

  public boolean notEqualsOperator(S3DVertexTangents other) {
    return JirrJNI.S3DVertexTangents_notEqualsOperator(swigCPtr, this, S3DVertexTangents.getCPtr(other), other);
  }

  public boolean lessThanOperator(S3DVertexTangents other) {
    return JirrJNI.S3DVertexTangents_lessThanOperator(swigCPtr, this, S3DVertexTangents.getCPtr(other), other);
  }

  public E_VERTEX_TYPE getType() {
    return E_VERTEX_TYPE.swigToEnum(JirrJNI.S3DVertexTangents_getType(swigCPtr, this));
  }

  public S3DVertexTangents getInterpolated(S3DVertexTangents other, float d) {
    return new S3DVertexTangents(JirrJNI.S3DVertexTangents_getInterpolated(swigCPtr, this, S3DVertexTangents.getCPtr(other), other, d), true);
  }

}
