/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class ICameraSceneNode extends ISceneNode {
  private long swigCPtr;

  protected ICameraSceneNode(long cPtr, boolean cMemoryOwn) {
    super(JirrJNI.ICameraSceneNode_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ICameraSceneNode obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_ICameraSceneNode(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void setProjectionMatrix(SWIGTYPE_p_irr__core__CMatrix4T_float_t projection, boolean isOrthogonal) {
    JirrJNI.ICameraSceneNode_setProjectionMatrix__SWIG_0(swigCPtr, this, SWIGTYPE_p_irr__core__CMatrix4T_float_t.getCPtr(projection), isOrthogonal);
  }

  public void setProjectionMatrix(SWIGTYPE_p_irr__core__CMatrix4T_float_t projection) {
    JirrJNI.ICameraSceneNode_setProjectionMatrix__SWIG_1(swigCPtr, this, SWIGTYPE_p_irr__core__CMatrix4T_float_t.getCPtr(projection));
  }

  public SWIGTYPE_p_irr__core__CMatrix4T_float_t getProjectionMatrix() {
    return new SWIGTYPE_p_irr__core__CMatrix4T_float_t(JirrJNI.ICameraSceneNode_getProjectionMatrix(swigCPtr, this), false);
  }

  public SWIGTYPE_p_irr__core__CMatrix4T_float_t getViewMatrix() {
    return new SWIGTYPE_p_irr__core__CMatrix4T_float_t(JirrJNI.ICameraSceneNode_getViewMatrix(swigCPtr, this), false);
  }

  public void setViewMatrixAffector(SWIGTYPE_p_irr__core__CMatrix4T_float_t affector) {
    JirrJNI.ICameraSceneNode_setViewMatrixAffector(swigCPtr, this, SWIGTYPE_p_irr__core__CMatrix4T_float_t.getCPtr(affector));
  }

  public SWIGTYPE_p_irr__core__CMatrix4T_float_t getViewMatrixAffector() {
    return new SWIGTYPE_p_irr__core__CMatrix4T_float_t(JirrJNI.ICameraSceneNode_getViewMatrixAffector(swigCPtr, this), false);
  }

  public boolean OnEvent(SEvent event) {
    return JirrJNI.ICameraSceneNode_OnEvent(swigCPtr, this, SEvent.getCPtr(event), event);
  }

  public void setTarget(vector3df pos) {
    JirrJNI.ICameraSceneNode_setTarget(swigCPtr, this, vector3df.getCPtr(pos), pos);
  }

  public void setRotation(vector3df rotation) {
    JirrJNI.ICameraSceneNode_setRotation(swigCPtr, this, vector3df.getCPtr(rotation), rotation);
  }

  public vector3df getTarget() {
    return new vector3df(JirrJNI.ICameraSceneNode_getTarget(swigCPtr, this), false);
  }

  public void setUpVector(vector3df pos) {
    JirrJNI.ICameraSceneNode_setUpVector(swigCPtr, this, vector3df.getCPtr(pos), pos);
  }

  public vector3df getUpVector() {
    return new vector3df(JirrJNI.ICameraSceneNode_getUpVector(swigCPtr, this), false);
  }

  public float getNearValue() {
    return JirrJNI.ICameraSceneNode_getNearValue(swigCPtr, this);
  }

  public float getFarValue() {
    return JirrJNI.ICameraSceneNode_getFarValue(swigCPtr, this);
  }

  public float getAspectRatio() {
    return JirrJNI.ICameraSceneNode_getAspectRatio(swigCPtr, this);
  }

  public float getFOV() {
    return JirrJNI.ICameraSceneNode_getFOV(swigCPtr, this);
  }

  public void setNearValue(float zn) {
    JirrJNI.ICameraSceneNode_setNearValue(swigCPtr, this, zn);
  }

  public void setFarValue(float zf) {
    JirrJNI.ICameraSceneNode_setFarValue(swigCPtr, this, zf);
  }

  public void setAspectRatio(float aspect) {
    JirrJNI.ICameraSceneNode_setAspectRatio(swigCPtr, this, aspect);
  }

  public void setFOV(float fovy) {
    JirrJNI.ICameraSceneNode_setFOV(swigCPtr, this, fovy);
  }

  public SViewFrustum getViewFrustum() {
    long cPtr = JirrJNI.ICameraSceneNode_getViewFrustum(swigCPtr, this);
    return (cPtr == 0) ? null : new SViewFrustum(cPtr, false);
  }

  public void setInputReceiverEnabled(boolean enabled) {
    JirrJNI.ICameraSceneNode_setInputReceiverEnabled(swigCPtr, this, enabled);
  }

  public boolean isInputReceiverEnabled() {
    return JirrJNI.ICameraSceneNode_isInputReceiverEnabled(swigCPtr, this);
  }

  public boolean isOrthogonal() {
    return JirrJNI.ICameraSceneNode_isOrthogonal(swigCPtr, this);
  }

  public void bindTargetAndRotation(boolean bound) {
    JirrJNI.ICameraSceneNode_bindTargetAndRotation(swigCPtr, this, bound);
  }

  public boolean getTargetAndRotationBinding() {
    return JirrJNI.ICameraSceneNode_getTargetAndRotationBinding(swigCPtr, this);
  }

  public void serializeAttributes(IAttributes out, SAttributeReadWriteOptions options) {
    JirrJNI.ICameraSceneNode_serializeAttributes__SWIG_0(swigCPtr, this, IAttributes.getCPtr(out), out, SAttributeReadWriteOptions.getCPtr(options), options);
  }

  public void serializeAttributes(IAttributes out) {
    JirrJNI.ICameraSceneNode_serializeAttributes__SWIG_1(swigCPtr, this, IAttributes.getCPtr(out), out);
  }

  public void deserializeAttributes(IAttributes in, SAttributeReadWriteOptions options) {
    JirrJNI.ICameraSceneNode_deserializeAttributes__SWIG_0(swigCPtr, this, IAttributes.getCPtr(in), in, SAttributeReadWriteOptions.getCPtr(options), options);
  }

  public void deserializeAttributes(IAttributes in) {
    JirrJNI.ICameraSceneNode_deserializeAttributes__SWIG_1(swigCPtr, this, IAttributes.getCPtr(in), in);
  }

}
