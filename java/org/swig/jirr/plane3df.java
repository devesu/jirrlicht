/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.swig.jirr;

public class plane3df {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected plane3df(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(plane3df obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JirrJNI.delete_plane3df(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public plane3df() {
    this(JirrJNI.new_plane3df__SWIG_0(), true);
  }

  public plane3df(vector3df MPoint, vector3df Normal) {
    this(JirrJNI.new_plane3df__SWIG_1(vector3df.getCPtr(MPoint), MPoint, vector3df.getCPtr(Normal), Normal), true);
  }

  public plane3df(float px, float py, float pz, float nx, float ny, float nz) {
    this(JirrJNI.new_plane3df__SWIG_2(px, py, pz, nx, ny, nz), true);
  }

  public plane3df(vector3df point1, vector3df point2, vector3df point3) {
    this(JirrJNI.new_plane3df__SWIG_3(vector3df.getCPtr(point1), point1, vector3df.getCPtr(point2), point2, vector3df.getCPtr(point3), point3), true);
  }

  public plane3df(vector3df normal, float d) {
    this(JirrJNI.new_plane3df__SWIG_4(vector3df.getCPtr(normal), normal, d), true);
  }

  public boolean equalsOperator(plane3df other) {
    return JirrJNI.plane3df_equalsOperator(swigCPtr, this, plane3df.getCPtr(other), other);
  }

  public boolean notEqualsOperator(plane3df other) {
    return JirrJNI.plane3df_notEqualsOperator(swigCPtr, this, plane3df.getCPtr(other), other);
  }

  public void setPlane(vector3df point, vector3df nvector) {
    JirrJNI.plane3df_setPlane__SWIG_0(swigCPtr, this, vector3df.getCPtr(point), point, vector3df.getCPtr(nvector), nvector);
  }

  public void setPlane(vector3df nvect, float d) {
    JirrJNI.plane3df_setPlane__SWIG_1(swigCPtr, this, vector3df.getCPtr(nvect), nvect, d);
  }

  public void setPlane(vector3df point1, vector3df point2, vector3df point3) {
    JirrJNI.plane3df_setPlane__SWIG_2(swigCPtr, this, vector3df.getCPtr(point1), point1, vector3df.getCPtr(point2), point2, vector3df.getCPtr(point3), point3);
  }

  public boolean getIntersectionWithLine(vector3df linePoint, vector3df lineVect, vector3df outIntersection) {
    return JirrJNI.plane3df_getIntersectionWithLine(swigCPtr, this, vector3df.getCPtr(linePoint), linePoint, vector3df.getCPtr(lineVect), lineVect, vector3df.getCPtr(outIntersection), outIntersection);
  }

  public float getKnownIntersectionWithLine(vector3df linePoint1, vector3df linePoint2) {
    return JirrJNI.plane3df_getKnownIntersectionWithLine(swigCPtr, this, vector3df.getCPtr(linePoint1), linePoint1, vector3df.getCPtr(linePoint2), linePoint2);
  }

  public boolean getIntersectionWithLimitedLine(vector3df linePoint1, vector3df linePoint2, vector3df outIntersection) {
    return JirrJNI.plane3df_getIntersectionWithLimitedLine(swigCPtr, this, vector3df.getCPtr(linePoint1), linePoint1, vector3df.getCPtr(linePoint2), linePoint2, vector3df.getCPtr(outIntersection), outIntersection);
  }

  public EIntersectionRelation3D classifyPointRelation(vector3df point) {
    return EIntersectionRelation3D.swigToEnum(JirrJNI.plane3df_classifyPointRelation(swigCPtr, this, vector3df.getCPtr(point), point));
  }

  public void recalculateD(vector3df MPoint) {
    JirrJNI.plane3df_recalculateD(swigCPtr, this, vector3df.getCPtr(MPoint), MPoint);
  }

  public vector3df getMemberPoint() {
    return new vector3df(JirrJNI.plane3df_getMemberPoint(swigCPtr, this), true);
  }

  public boolean existsIntersection(plane3df other) {
    return JirrJNI.plane3df_existsIntersection(swigCPtr, this, plane3df.getCPtr(other), other);
  }

  public boolean getIntersectionWithPlane(plane3df other, vector3df outLinePoint, vector3df outLineVect) {
    return JirrJNI.plane3df_getIntersectionWithPlane(swigCPtr, this, plane3df.getCPtr(other), other, vector3df.getCPtr(outLinePoint), outLinePoint, vector3df.getCPtr(outLineVect), outLineVect);
  }

  public boolean getIntersectionWithPlanes(plane3df o1, plane3df o2, vector3df outPoint) {
    return JirrJNI.plane3df_getIntersectionWithPlanes(swigCPtr, this, plane3df.getCPtr(o1), o1, plane3df.getCPtr(o2), o2, vector3df.getCPtr(outPoint), outPoint);
  }

  public boolean isFrontFacing(vector3df lookDirection) {
    return JirrJNI.plane3df_isFrontFacing(swigCPtr, this, vector3df.getCPtr(lookDirection), lookDirection);
  }

  public float getDistanceTo(vector3df point) {
    return JirrJNI.plane3df_getDistanceTo(swigCPtr, this, vector3df.getCPtr(point), point);
  }

  public void setNormal(vector3df value) {
    JirrJNI.plane3df_Normal_set(swigCPtr, this, vector3df.getCPtr(value), value);
  }

  public vector3df getNormal() {
    long cPtr = JirrJNI.plane3df_Normal_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vector3df(cPtr, false);
  }

  public void setD(float value) {
    JirrJNI.plane3df_D_set(swigCPtr, this, value);
  }

  public float getD() {
    return JirrJNI.plane3df_D_get(swigCPtr, this);
  }

}
