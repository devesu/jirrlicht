/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
#include"stdafx.h"
#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_JirrJNI = NULL;
    jmethodID director_methids[43];
  }
}

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include "wchar.h"

int wstrlen(const wchar_t *s)
{
	int cnt = 0;
	while(*s++)
		cnt++;
	return cnt;
}


#include <irrlicht.h>
#include <IMeshLoader.h>
#include <IGPUProgrammingServices.h>
#include "IGUIElementFactory.h"
#include "jirr.h"
using namespace irr;
using namespace irr::video;
using namespace irr::scene;
using namespace irr::gui;
using namespace irr::core;
using namespace irr::io;

SWIGINTERN bool irr_video_SMaterial_isWireframe(irr::video::SMaterial *self){return self->Wireframe;}
SWIGINTERN void irr_video_SMaterial_setTexture__SWIG_1(irr::video::SMaterial *self,int index,irr::video::ITexture *texture){self->setTexture(index, texture);}
SWIGINTERN int irr_SEvent_getKeyInputChar(irr::SEvent *self){return self->KeyInput.Char;}
SWIGINTERN irr::EKEY_CODE irr_SEvent_getKeyInputKey(irr::SEvent *self){return self->KeyInput.Key;}
SWIGINTERN bool irr_SEvent_isKeyInputPressedDown(irr::SEvent *self){return self->KeyInput.PressedDown;}
SWIGINTERN bool irr_SEvent_isKeyInputShift(irr::SEvent *self){return self->KeyInput.Shift;}
SWIGINTERN bool irr_SEvent_isKeyInputCtrl(irr::SEvent *self){return self->KeyInput.Control;}
SWIGINTERN irr::s32 irr_SEvent_getMouseInputX(irr::SEvent *self){return self->MouseInput.X;}
SWIGINTERN irr::s32 irr_SEvent_getMouseInputY(irr::SEvent *self){return self->MouseInput.Y;}
SWIGINTERN irr::f32 irr_SEvent_getMouseInputWheel(irr::SEvent *self){return self->MouseInput.Wheel;}
SWIGINTERN irr::EMOUSE_INPUT_EVENT irr_SEvent_getMouseInputEvent(irr::SEvent *self){return self->MouseInput.Event;}
SWIGINTERN irr::gui::IGUIElement *irr_SEvent_getGUIEventCaller(irr::SEvent *self){return self->GUIEvent.Caller;}
SWIGINTERN irr::gui::EGUI_EVENT_TYPE irr_SEvent_getGUIEventType(irr::SEvent *self){return self->GUIEvent.EventType;}
SWIGINTERN irr::c8 const *irr_SEvent_getLogEventText(irr::SEvent *self){return self->LogEvent.Text;}
SWIGINTERN irr::ELOG_LEVEL irr_SEvent_getLogEventLevel(irr::SEvent *self){return self->LogEvent.Level;}
SWIGINTERN irr::s32 irr_SEvent_getUserEventData1(irr::SEvent *self){return self->UserEvent.UserData1;}
SWIGINTERN irr::s32 irr_SEvent_getUserEventData2(irr::SEvent *self){return self->UserEvent.UserData2;}
SWIGINTERN irr::SKeyMap *irr_scene_ISceneManager_createKeyMaps(irr::scene::ISceneManager *self,int length){
		SKeyMap *keyMaps = new SKeyMap[length];
		//return (SKeyMap*)&keyMaps[0];
		return keyMaps;
	}
SWIGINTERN void irr_scene_ISceneManager_addToKeyMaps(irr::scene::ISceneManager *self,irr::SKeyMap *maps,irr::SKeyMap *keyMap,int pos){
		maps[pos].Action = keyMap->Action;
		maps[pos].KeyCode = keyMap->KeyCode;
		//maps[pos] = keyMap;
		//SKeyMap **myArray = *(void**)maps;
		//myArray[pos] = keyMap;
		
		//*(SKeyMap **)(array[pos]) = keyMap;
		//SKeyMap *array = maps;
	   //*(void **)&array[pos] = keyMap;
	}
SWIGINTERN irr::SKeyMap *irr_scene_ISceneManager_getCustomDefaultKeymap(irr::scene::ISceneManager *self){
		SKeyMap *maps = new SKeyMap[8];
		maps[0].Action = EKA_MOVE_FORWARD;
		maps[0].KeyCode = KEY_UP;
		maps[1].Action = EKA_MOVE_FORWARD;
		maps[1].KeyCode = KEY_KEY_W;
        
		maps[2].Action = EKA_MOVE_BACKWARD;
		maps[2].KeyCode = KEY_DOWN;
		maps[3].Action = EKA_MOVE_BACKWARD;
		maps[3].KeyCode = KEY_KEY_S;
        
		maps[4].Action = EKA_STRAFE_LEFT;
		maps[4].KeyCode = KEY_LEFT;
		maps[5].Action = EKA_STRAFE_LEFT;
		maps[5].KeyCode = KEY_KEY_A;
        
		maps[6].Action = EKA_STRAFE_RIGHT;
		maps[6].KeyCode = KEY_RIGHT;
		maps[7].Action = EKA_STRAFE_RIGHT;
		maps[7].KeyCode = KEY_KEY_D;
		
		return (SKeyMap *)&maps[0];
	}
SWIGINTERN irr::scene::ICameraSceneNode *irr_scene_ISceneManager_addCameraSceneNodeFPS__SWIG_11(irr::scene::ISceneManager *self,irr::scene::ISceneNode *parent,irr::f32 rotateSpeed,irr::f32 moveSpeed,irr::s32 id,int actions[],int keyCodes[],irr::s32 keyMapSize){
		SKeyMap*maps=new SKeyMap[keyMapSize];
		for (int i = 0; i < keyMapSize; i++)
		{
			maps[i].Action = (irr::EKEY_ACTION)actions[i];
			maps[i].KeyCode = (irr::EKEY_CODE)keyCodes[i];
		}	
		ICameraSceneNode*cam=self->addCameraSceneNodeFPS(parent, rotateSpeed, moveSpeed, id, maps, keyMapSize);
		delete[]maps;
		return cam;
	}
SWIGINTERN void irr_scene_ISceneNode_setMaterialTypeByInt(irr::scene::ISceneNode *self,irr::s32 type){
		self->setMaterialType((E_MATERIAL_TYPE)type);
	}
SWIGINTERN void irr_scene_ISceneNode_OnRegisterSceneNodeJava(irr::scene::ISceneNode *self){
		// no directors for this method
		self->ISceneNode::OnRegisterSceneNode();
	}
SWIGINTERN irr::video::S3DVertex *irr_scene_ISceneNode_getDefaultVertices(irr::scene::ISceneNode *self){
		S3DVertex Vertices[4];

		Vertices[0] = video::S3DVertex(0,0,10, 1,1,0, video::SColor(255,0,255,255), 0, 1);
		Vertices[1] = video::S3DVertex(10,0,-10, 1,0,0, video::SColor(255,255,0,255), 1, 1);
		Vertices[2] = video::S3DVertex(0,20,0, 0,1,1, video::SColor(255,255,255,0), 1, 0);
		Vertices[3] = video::S3DVertex(-10,0,-10, 0,0,1, video::SColor(255,0,255,0), 0, 0);
		
		return Vertices;
	}
SWIGINTERN void irr_core_rect_Sl_s32_Sg__setRect(irr::core::rect< s32 > *self,irr::s32 x1,irr::s32 y1,irr::s32 x2,irr::s32 y2){		
		self->UpperLeftCorner = vector2d<s32>(x1, y1);
		self->LowerRightCorner = vector2d<s32>(x2, y2);
	}


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "irrlicht_wrap.h"

SwigDirector_IEventReceiver::SwigDirector_IEventReceiver(JNIEnv *jenv) : irr::IEventReceiver(), Swig::Director(jenv) {
}

SwigDirector_IEventReceiver::~SwigDirector_IEventReceiver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_IEventReceiver::OnEvent(irr::SEvent const &event) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevent = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method irr::IEventReceiver::OnEvent.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(irr::SEvent **)&jevent = (irr::SEvent *) &event; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_JirrJNI, Swig::director_methids[0], swigjobj, jevent);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IEventReceiver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnEvent", "(Lorg/swig/jirr/SEvent;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/swig/jirr/IEventReceiver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ISceneNode::SwigDirector_ISceneNode(JNIEnv *jenv, irr::scene::ISceneNode *parent, irr::scene::ISceneManager *mgr, irr::s32 id, irr::core::vector3df const &position, irr::core::vector3df const &rotation, irr::core::vector3df const &scale) : irr::scene::ISceneNode(parent, mgr, id, position, rotation, scale), Swig::Director(jenv) {
}

void SwigDirector_ISceneNode::serializeAttributes(irr::io::IAttributes *out, irr::io::SAttributeReadWriteOptions *options) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jout = 0 ;
  jlong joptions = 0 ;
  
  if (!swig_override[0]) {
    irr::scene::ISceneNode::serializeAttributes(out,options);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::io::IAttributes **)&jout) = (irr::io::IAttributes *) out; 
    *((irr::io::SAttributeReadWriteOptions **)&joptions) = (irr::io::SAttributeReadWriteOptions *) options; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[1], swigjobj, jout, joptions);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::deserializeAttributes(irr::io::IAttributes *in, irr::io::SAttributeReadWriteOptions *options) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jin = 0 ;
  jlong joptions = 0 ;
  
  if (!swig_override[2]) {
    irr::scene::ISceneNode::deserializeAttributes(in,options);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::io::IAttributes **)&jin) = (irr::io::IAttributes *) in; 
    *((irr::io::SAttributeReadWriteOptions **)&joptions) = (irr::io::SAttributeReadWriteOptions *) options; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[3], swigjobj, jin, joptions);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_ISceneNode::~SwigDirector_ISceneNode() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ISceneNode::OnRegisterSceneNode() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    irr::scene::ISceneNode::OnRegisterSceneNode();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[5], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::OnAnimate(irr::u32 timeMs) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jtimeMs  ;
  
  if (!swig_override[5]) {
    irr::scene::ISceneNode::OnAnimate(timeMs);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimeMs = (jlong) timeMs;
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[6], swigjobj, jtimeMs);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::render() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method irr::scene::ISceneNode::render.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

irr::core::aabbox3d< irr::f32 > const &SwigDirector_ISceneNode::getBoundingBox() const {
  static irr::core::aabbox3d< irr::f32 > result_default = irr::core::aabbox3d< irr::f32 > () ;
  irr::core::aabbox3d< irr::f32 > *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method irr::scene::ISceneNode::getBoundingBox.");
    return (irr::core::aabbox3d< irr::f32 > const &)*c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[8], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (irr::core::aabbox3d< irr::f32 > const &)*c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::aabbox3d< irr::f32 > const &");
      return (irr::core::aabbox3d< irr::f32 > const &)*c_result;
    }
    c_result = *(irr::core::aabbox3d< irr::f32 > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (irr::core::aabbox3d< irr::f32 > const &)*c_result;
}

irr::core::aabbox3d< irr::f32 > const SwigDirector_ISceneNode::getTransformedBoundingBox() const {
  irr::core::aabbox3d< irr::f32 > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  irr::core::aabbox3d< irr::f32 > const *argp ;
  
  if (!swig_override[8]) {
    return irr::scene::ISceneNode::getTransformedBoundingBox();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[9], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(irr::core::aabbox3d< irr::f32 > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::aabbox3d< irr::f32 > const");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

irr::core::matrix4 const &SwigDirector_ISceneNode::getAbsoluteTransformation() const {
  static irr::core::matrix4 result_default = irr::core::matrix4 () ;
  irr::core::matrix4 *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return irr::scene::ISceneNode::getAbsoluteTransformation();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[10], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (irr::core::matrix4 const &)*c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::matrix4 const &");
      return (irr::core::matrix4 const &)*c_result;
    }
    c_result = *(irr::core::matrix4 **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (irr::core::matrix4 const &)*c_result;
}

irr::core::matrix4 SwigDirector_ISceneNode::getRelativeTransformation() const {
  SwigValueWrapper< irr::core::CMatrix4< float > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  irr::core::matrix4 *argp ;
  
  if (!swig_override[10]) {
    return irr::scene::ISceneNode::getRelativeTransformation();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[11], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(irr::core::matrix4 **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::matrix4");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ISceneNode::isVisible() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return irr::scene::ISceneNode::isVisible();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_JirrJNI, Swig::director_methids[12], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ISceneNode::isTrulyVisible() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[12]) {
    return irr::scene::ISceneNode::isTrulyVisible();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_JirrJNI, Swig::director_methids[13], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ISceneNode::setVisible(bool isVisible) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jisVisible  ;
  
  if (!swig_override[13]) {
    irr::scene::ISceneNode::setVisible(isVisible);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jisVisible = (jboolean) isVisible;
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[14], swigjobj, jisVisible);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

irr::s32 SwigDirector_ISceneNode::getID() const {
  irr::s32 c_result = SwigValueInit< irr::s32 >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[14]) {
    return irr::scene::ISceneNode::getID();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_JirrJNI, Swig::director_methids[15], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (irr::s32)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ISceneNode::setID(irr::s32 id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jid  ;
  
  if (!swig_override[15]) {
    irr::scene::ISceneNode::setID(id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = (jint) id;
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[16], swigjobj, jid);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::addChild(irr::scene::ISceneNode *child) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jchild = 0 ;
  
  if (!swig_override[16]) {
    irr::scene::ISceneNode::addChild(child);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::scene::ISceneNode **)&jchild) = (irr::scene::ISceneNode *) child; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[17], swigjobj, jchild);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ISceneNode::removeChild(irr::scene::ISceneNode *child) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jchild = 0 ;
  
  if (!swig_override[17]) {
    return irr::scene::ISceneNode::removeChild(child);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::scene::ISceneNode **)&jchild) = (irr::scene::ISceneNode *) child; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_JirrJNI, Swig::director_methids[18], swigjobj, jchild);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ISceneNode::removeAll() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[18]) {
    irr::scene::ISceneNode::removeAll();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[19], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::remove() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[19]) {
    irr::scene::ISceneNode::remove();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[20], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::addAnimator(irr::scene::ISceneNodeAnimator *animator) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong janimator = 0 ;
  
  if (!swig_override[20]) {
    irr::scene::ISceneNode::addAnimator(animator);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::scene::ISceneNodeAnimator **)&janimator) = (irr::scene::ISceneNodeAnimator *) animator; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[21], swigjobj, janimator);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::removeAnimator(irr::scene::ISceneNodeAnimator *animator) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong janimator = 0 ;
  
  if (!swig_override[21]) {
    irr::scene::ISceneNode::removeAnimator(animator);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::scene::ISceneNodeAnimator **)&janimator) = (irr::scene::ISceneNodeAnimator *) animator; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[22], swigjobj, janimator);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::removeAnimators() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[22]) {
    irr::scene::ISceneNode::removeAnimators();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[23], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

irr::u32 SwigDirector_ISceneNode::getMaterialCount() const {
  irr::u32 c_result = SwigValueInit< irr::u32 >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[23]) {
    return irr::scene::ISceneNode::getMaterialCount();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[24], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (irr::u32)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

irr::core::vector3df const &SwigDirector_ISceneNode::getScale() const {
  static irr::core::vector3df result_default = irr::core::vector3df () ;
  irr::core::vector3df *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[24]) {
    return irr::scene::ISceneNode::getScale();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[25], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (irr::core::vector3df const &)*c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::vector3df const &");
      return (irr::core::vector3df const &)*c_result;
    }
    c_result = *(irr::core::vector3df **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (irr::core::vector3df const &)*c_result;
}

void SwigDirector_ISceneNode::setScale(irr::core::vector3df const &scale) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jscale = 0 ;
  
  if (!swig_override[25]) {
    irr::scene::ISceneNode::setScale(scale);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(irr::core::vector3df **)&jscale = (irr::core::vector3df *) &scale; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[26], swigjobj, jscale);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

irr::core::vector3df const &SwigDirector_ISceneNode::getRotation() const {
  static irr::core::vector3df result_default = irr::core::vector3df () ;
  irr::core::vector3df *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[26]) {
    return irr::scene::ISceneNode::getRotation();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[27], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (irr::core::vector3df const &)*c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::vector3df const &");
      return (irr::core::vector3df const &)*c_result;
    }
    c_result = *(irr::core::vector3df **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (irr::core::vector3df const &)*c_result;
}

void SwigDirector_ISceneNode::setRotation(irr::core::vector3df const &rotation) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrotation = 0 ;
  
  if (!swig_override[27]) {
    irr::scene::ISceneNode::setRotation(rotation);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(irr::core::vector3df **)&jrotation = (irr::core::vector3df *) &rotation; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[28], swigjobj, jrotation);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

irr::core::vector3df const &SwigDirector_ISceneNode::getPosition() const {
  static irr::core::vector3df result_default = irr::core::vector3df () ;
  irr::core::vector3df *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[28]) {
    return irr::scene::ISceneNode::getPosition();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[29], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (irr::core::vector3df const &)*c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::vector3df const &");
      return (irr::core::vector3df const &)*c_result;
    }
    c_result = *(irr::core::vector3df **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (irr::core::vector3df const &)*c_result;
}

void SwigDirector_ISceneNode::setPosition(irr::core::vector3df const &newpos) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnewpos = 0 ;
  
  if (!swig_override[29]) {
    irr::scene::ISceneNode::setPosition(newpos);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(irr::core::vector3df **)&jnewpos = (irr::core::vector3df *) &newpos; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[30], swigjobj, jnewpos);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

irr::core::vector3df SwigDirector_ISceneNode::getAbsolutePosition() const {
  irr::core::vector3df c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  irr::core::vector3df *argp ;
  
  if (!swig_override[30]) {
    return irr::scene::ISceneNode::getAbsolutePosition();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[31], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(irr::core::vector3df **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type irr::core::vector3df");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ISceneNode::setDebugDataVisible(irr::u32 state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstate  ;
  
  if (!swig_override[31]) {
    irr::scene::ISceneNode::setDebugDataVisible(state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstate = (jlong) state;
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[32], swigjobj, jstate);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::setParent(irr::scene::ISceneNode *newParent) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnewParent = 0 ;
  
  if (!swig_override[32]) {
    irr::scene::ISceneNode::setParent(newParent);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::scene::ISceneNode **)&jnewParent) = (irr::scene::ISceneNode *) newParent; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[33], swigjobj, jnewParent);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::setTriangleSelector(irr::scene::ITriangleSelector *selector) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jselector = 0 ;
  
  if (!swig_override[33]) {
    irr::scene::ISceneNode::setTriangleSelector(selector);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::scene::ITriangleSelector **)&jselector) = (irr::scene::ITriangleSelector *) selector; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[34], swigjobj, jselector);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ISceneNode::updateAbsolutePosition() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[34]) {
    irr::scene::ISceneNode::updateAbsolutePosition();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[35], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

irr::scene::ESCENE_NODE_TYPE SwigDirector_ISceneNode::getType() const {
  irr::scene::ESCENE_NODE_TYPE c_result = SwigValueInit< irr::scene::ESCENE_NODE_TYPE >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[35]) {
    return irr::scene::ISceneNode::getType();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_JirrJNI, Swig::director_methids[36], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (irr::scene::ESCENE_NODE_TYPE)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

irr::scene::ISceneNode *SwigDirector_ISceneNode::clone(irr::scene::ISceneNode *newParent, irr::scene::ISceneManager *newManager) {
  irr::scene::ISceneNode *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnewParent = 0 ;
  jlong jnewManager = 0 ;
  
  if (!swig_override[36]) {
    return irr::scene::ISceneNode::clone(newParent,newManager);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::scene::ISceneNode **)&jnewParent) = (irr::scene::ISceneNode *) newParent; 
    *((irr::scene::ISceneManager **)&jnewManager) = (irr::scene::ISceneManager *) newManager; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[37], swigjobj, jnewParent, jnewManager);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(irr::scene::ISceneNode **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

irr::scene::ISceneManager *SwigDirector_ISceneNode::getSceneManager() const {
  irr::scene::ISceneManager *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[39]) {
    return irr::scene::ISceneNode::getSceneManager();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_JirrJNI, Swig::director_methids[40], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(irr::scene::ISceneManager **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ISceneNode::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "serializeAttributes", "(Lorg/swig/jirr/IAttributes;Lorg/swig/jirr/SAttributeReadWriteOptions;)V", NULL 
    },
    {
      "serializeAttributes", "(Lorg/swig/jirr/IAttributes;)V", NULL 
    },
    {
      "deserializeAttributes", "(Lorg/swig/jirr/IAttributes;Lorg/swig/jirr/SAttributeReadWriteOptions;)V", NULL 
    },
    {
      "deserializeAttributes", "(Lorg/swig/jirr/IAttributes;)V", NULL 
    },
    {
      "OnRegisterSceneNode", "()V", NULL 
    },
    {
      "OnAnimate", "(J)V", NULL 
    },
    {
      "render", "()V", NULL 
    },
    {
      "getBoundingBoxConst", "()Lorg/swig/jirr/aabbox3df;", NULL 
    },
    {
      "getTransformedBoundingBox", "()Lorg/swig/jirr/aabbox3df;", NULL 
    },
    {
      "getAbsoluteTransformation", "()Lorg/swig/jirr/CMatrix4f;", NULL 
    },
    {
      "getRelativeTransformation", "()Lorg/swig/jirr/CMatrix4f;", NULL 
    },
    {
      "isVisible", "()Z", NULL 
    },
    {
      "isTrulyVisible", "()Z", NULL 
    },
    {
      "setVisible", "(Z)V", NULL 
    },
    {
      "getID", "()I", NULL 
    },
    {
      "setID", "(I)V", NULL 
    },
    {
      "addChild", "(Lorg/swig/jirr/ISceneNode;)V", NULL 
    },
    {
      "removeChild", "(Lorg/swig/jirr/ISceneNode;)Z", NULL 
    },
    {
      "removeAll", "()V", NULL 
    },
    {
      "remove", "()V", NULL 
    },
    {
      "addAnimator", "(Lorg/swig/jirr/ISceneNodeAnimator;)V", NULL 
    },
    {
      "removeAnimator", "(Lorg/swig/jirr/ISceneNodeAnimator;)V", NULL 
    },
    {
      "removeAnimators", "()V", NULL 
    },
    {
      "getMaterialCount", "()J", NULL 
    },
    {
      "getScale", "()Lorg/swig/jirr/vector3df;", NULL 
    },
    {
      "setScale", "(Lorg/swig/jirr/vector3df;)V", NULL 
    },
    {
      "getRotation", "()Lorg/swig/jirr/vector3df;", NULL 
    },
    {
      "setRotation", "(Lorg/swig/jirr/vector3df;)V", NULL 
    },
    {
      "getPosition", "()Lorg/swig/jirr/vector3df;", NULL 
    },
    {
      "setPosition", "(Lorg/swig/jirr/vector3df;)V", NULL 
    },
    {
      "getAbsolutePosition", "()Lorg/swig/jirr/vector3df;", NULL 
    },
    {
      "setDebugDataVisible", "(J)V", NULL 
    },
    {
      "setParent", "(Lorg/swig/jirr/ISceneNode;)V", NULL 
    },
    {
      "setTriangleSelector", "(Lorg/swig/jirr/ITriangleSelector;)V", NULL 
    },
    {
      "updateAbsolutePosition", "()V", NULL 
    },
    {
      "getType", "()Lorg/swig/jirr/ESCENE_NODE_TYPE;", NULL 
    },
    {
      "clone", "(Lorg/swig/jirr/ISceneNode;Lorg/swig/jirr/ISceneManager;)Lorg/swig/jirr/ISceneNode;", NULL 
    },
    {
      "clone", "(Lorg/swig/jirr/ISceneNode;)Lorg/swig/jirr/ISceneNode;", NULL 
    },
    {
      "clone", "()Lorg/swig/jirr/ISceneNode;", NULL 
    },
    {
      "getSceneManager", "()Lorg/swig/jirr/ISceneManager;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/swig/jirr/ISceneNode");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 40; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IShaderConstantSetCallBack::SwigDirector_IShaderConstantSetCallBack(JNIEnv *jenv) : irr::video::IShaderConstantSetCallBack(), Swig::Director(jenv) {
}

void SwigDirector_IShaderConstantSetCallBack::OnSetMaterial(irr::video::SMaterial const &material) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmaterial = 0 ;
  
  if (!swig_override[0]) {
    irr::video::IShaderConstantSetCallBack::OnSetMaterial(material);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(irr::video::SMaterial **)&jmaterial = (irr::video::SMaterial *) &material; 
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[41], swigjobj, jmaterial);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IShaderConstantSetCallBack::OnSetConstants(irr::video::IMaterialRendererServices *services, irr::s32 userData) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jservices = 0 ;
  jint juserData  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method irr::video::IShaderConstantSetCallBack::OnSetConstants.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((irr::video::IMaterialRendererServices **)&jservices) = (irr::video::IMaterialRendererServices *) services; 
    juserData = (jint) userData;
    jenv->CallStaticVoidMethod(Swig::jclass_JirrJNI, Swig::director_methids[42], swigjobj, jservices, juserData);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IShaderConstantSetCallBack::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnSetMaterial", "(Lorg/swig/jirr/SMaterial;)V", NULL 
    },
    {
      "OnSetConstants", "(Lorg/swig/jirr/IMaterialRendererServices;I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/swig/jirr/IShaderConstantSetCallBack");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUIElementTypeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUIElementTypeNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ROUNDING_1ERROR_1S32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::s32)(irr::s32)irr::core::ROUNDING_ERROR_S32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ROUNDING_1ERROR_1S64_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  s64 result;
  
  (void)jenv;
  (void)jcls;
  result = (s64)irr::core::ROUNDING_ERROR_S64;
  *(s64 **)&jresult = new s64((const s64 &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ROUNDING_1ERROR_1f32_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f32)(irr::f32)irr::core::ROUNDING_ERROR_f32;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_ROUNDING_1ERROR_1f64_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f64)(irr::f64)irr::core::ROUNDING_ERROR_f64;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_PI_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f32)(irr::f32)irr::core::PI;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_RECIPROCAL_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f32)(irr::f32)irr::core::RECIPROCAL_PI;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_HALF_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f32)(irr::f32)irr::core::HALF_PI;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_PI64_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f64)(irr::f64)irr::core::PI64;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_RECIPROCAL_1PI64_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f64)(irr::f64)irr::core::RECIPROCAL_PI64;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_DEGTORAD_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f32)(irr::f32)irr::core::DEGTORAD;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_RADTODEG_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f32)(irr::f32)irr::core::RADTODEG;
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_DEGTORAD64_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f64)(irr::f64)irr::core::DEGTORAD64;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_RADTODEG64_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f64)(irr::f64)irr::core::RADTODEG64;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_radToDeg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::radToDeg(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_radToDeg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  result = (irr::f64)irr::core::radToDeg(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_degToRad_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::degToRad(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_degToRad_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  result = (irr::f64)irr::core::degToRad(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 arg2 ;
  irr::f64 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = (irr::f64)jarg3; 
  result = (bool)irr::core::equals(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jboolean jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  arg2 = (irr::f64)jarg2; 
  result = (bool)irr::core::equals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (bool)irr::core::equals(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jboolean jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (bool)irr::core::equals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equalsByUlp(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)irr::core::equalsByUlp(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (bool)irr::core::equals(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (bool)irr::core::equals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (bool)irr::core::equals(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (bool)irr::core::equals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  s64 arg1 ;
  s64 arg2 ;
  s64 arg3 ;
  s64 const *argp1 ;
  s64 const *argp2 ;
  s64 const *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(s64 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(s64 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(s64 **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)irr::core::equals(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_equals_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  s64 arg1 ;
  s64 arg2 ;
  s64 const *argp1 ;
  s64 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(s64 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(s64 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)irr::core::equals(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jboolean jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  arg2 = (irr::f64)jarg2; 
  result = (bool)irr::core::iszero(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jboolean jresult = 0 ;
  irr::f64 arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  result = (bool)irr::core::iszero(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jboolean jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (bool)irr::core::iszero(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jboolean jresult = 0 ;
  irr::f32 arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (bool)irr::core::iszero(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_isnotzero_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jboolean jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (bool)irr::core::isnotzero(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_isnotzero_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jboolean jresult = 0 ;
  irr::f32 arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (bool)irr::core::isnotzero(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (bool)irr::core::iszero(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  irr::s32 arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  result = (bool)irr::core::iszero(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (bool)irr::core::iszero(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  irr::u32 arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (bool)irr::core::iszero(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  s64 arg1 ;
  s64 arg2 ;
  s64 const *argp1 ;
  s64 const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(s64 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(s64 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)irr::core::iszero(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_iszero_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  s64 arg1 ;
  s64 const *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(s64 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)irr::core::iszero(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_s32_1min(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::s32)irr::core::s32_min(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_s32_1max(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::s32)irr::core::s32_max(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_s32_1clamp(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::s32)irr::core::s32_clamp(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_inttofloat_1u_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::inttofloat *arg1 = (irr::core::inttofloat *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::inttofloat **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->u = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_inttofloat_1u_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::inttofloat *arg1 = (irr::core::inttofloat *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::inttofloat **)&jarg1; 
  result = (irr::u32) ((arg1)->u);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_inttofloat_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::inttofloat *arg1 = (irr::core::inttofloat *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::inttofloat **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_inttofloat_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::inttofloat *arg1 = (irr::core::inttofloat *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::inttofloat **)&jarg1; 
  result = (irr::s32) ((arg1)->s);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_inttofloat_1f_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::inttofloat *arg1 = (irr::core::inttofloat *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::inttofloat **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->f = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_inttofloat_1f_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::inttofloat *arg1 = (irr::core::inttofloat *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::inttofloat **)&jarg1; 
  result = (irr::f32) ((arg1)->f);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1inttofloat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::inttofloat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::inttofloat *)new irr::core::inttofloat();
  *(irr::core::inttofloat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1inttofloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::inttofloat *arg1 = (irr::core::inttofloat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::inttofloat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IR(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::u32)irr::core::IR(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_FR_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  irr::u32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::f32)irr::core::FR(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_FR_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jfloat jresult = 0 ;
  irr::s32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  result = (irr::f32)irr::core::FR(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_if_1c_1a_1else_1b_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::s32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (irr::u32)irr::core::if_c_a_else_b(arg1,arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_if_1c_1a_1else_1b_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  irr::s16 arg1 ;
  irr::u16 arg2 ;
  irr::u16 arg3 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s16)jarg1; 
  arg2 = (irr::u16)jarg2; 
  arg3 = (irr::u16)jarg3; 
  result = (irr::u16)irr::core::if_c_a_else_b(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_if_1c_1a_1else_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  irr::s32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::u32)irr::core::if_c_a_else_0(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_setbit_1cond(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  irr::u32 *arg1 = 0 ;
  irr::s32 arg2 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::u32 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return ;
  } 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  irr::core::setbit_cond(*arg1,arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_round_1(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::round_(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_clearFPUException(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  irr::core::clearFPUException();
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_squareroot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::squareroot(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_squareroot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  result = (irr::f64)irr::core::squareroot(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_squareroot_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  result = (irr::s32)irr::core::squareroot(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_squareroot_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  s64 arg1 ;
  s64 const *argp1 ;
  s64 result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(s64 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null s64 const");
    return 0;
  }
  arg1 = *argp1; 
  result = irr::core::squareroot(arg1);
  *(s64 **)&jresult = new s64((const s64 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_reciprocal_1squareroot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  result = (irr::f64)irr::core::reciprocal_squareroot(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_reciprocal_1squareroot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::reciprocal_squareroot(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_reciprocal_1squareroot_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  result = (irr::s32)irr::core::reciprocal_squareroot(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_reciprocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::reciprocal(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_reciprocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f64)jarg1; 
  result = (irr::f64)irr::core::reciprocal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_reciprocal_1approxim(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::reciprocal_approxim(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_floor32(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jint jresult = 0 ;
  irr::f32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::s32)irr::core::floor32(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ceil32(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jint jresult = 0 ;
  irr::f32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::s32)irr::core::ceil32(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_round32(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jint jresult = 0 ;
  irr::f32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::s32)irr::core::round32(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_f32_1max3(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::f32)irr::core::f32_max3(arg1,arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_f32_1min3(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::f32)irr::core::f32_min3(arg1,arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_fract(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::f32)irr::core::fract(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_LOCALE_1DECIMAL_1POINTS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::stringc *arg1 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::stringc **)&jarg1; 
  irr::core::LOCALE_DECIMAL_POINTS = *arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_LOCALE_1DECIMAL_1POINTS_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::stringc *)&irr::core::LOCALE_DECIMAL_POINTS;
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_org_swig_jirr_JirrJNI_fast_1atof_1table_1get(JNIEnv *jenv, jclass jcls) {
  jfloatArray jresult = 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (float *)(float *)irr::core::fast_atof_table;
  jresult = SWIG_JavaArrayOutFloat(jenv, result, 17); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul10_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  result = (irr::u32)irr::core::strtoul10((char const *)arg1,(char const **)arg2);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul10_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (irr::u32)irr::core::strtoul10((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_strtol10_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  result = (irr::s32)irr::core::strtol10((char const *)arg1,(char const **)arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_strtol10_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (irr::s32)irr::core::strtol10((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ctoul16(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  jlong jresult = 0 ;
  char arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  result = (irr::u32)irr::core::ctoul16(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  result = (irr::u32)irr::core::strtoul16((char const *)arg1,(char const **)arg2);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (irr::u32)irr::core::strtoul16((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  result = (irr::u32)irr::core::strtoul8((char const *)arg1,(char const **)arg2);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (irr::u32)irr::core::strtoul8((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul_1prefix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  result = (irr::u32)irr::core::strtoul_prefix((char const *)arg1,(char const **)arg2);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_strtoul_1prefix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (irr::u32)irr::core::strtoul_prefix((char const *)arg1);
  jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_strtof10_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jfloat jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  result = (irr::f32)irr::core::strtof10((char const *)arg1,(char const **)arg2);
  jresult = (jfloat)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_strtof10_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jfloat jresult = 0 ;
  char *arg1 = (char *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (irr::f32)irr::core::strtof10((char const *)arg1);
  jresult = (jfloat)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_fast_1atof_1move(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  irr::f32 *arg2 = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(irr::f32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return 0;
  } 
  result = (char *)irr::core::fast_atof_move((char const *)arg1,*arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_fast_1atof_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jfloat jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(char ***)&jarg2; 
  result = (float)irr::core::fast_atof((char const *)arg1,(char const **)arg2);
  jresult = (jfloat)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_fast_1atof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jfloat jresult = 0 ;
  char *arg1 = (char *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (float)irr::core::fast_atof((char const *)arg1);
  jresult = (jfloat)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_locale_1current_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  irr::core::eLocaleID arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::core::eLocaleID)jarg1; 
  irr::core::locale_current = arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_locale_1current_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  irr::core::eLocaleID result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::eLocaleID)irr::core::locale_current;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_locale_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  irr::core::eLocaleID arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::core::eLocaleID)jarg1; 
  irr::core::locale_set(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_locale_1lower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::u32)irr::core::locale_lower(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_locale_1upper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::u32)irr::core::locale_upper(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_isFileExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *arg2 = 0 ;
  io::path *arg3 = 0 ;
  io::path *arg4 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg2 = *(io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg3 = *(io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg4 = *(io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)irr::core::isFileExtension((io::path const &)*arg1,(io::path const &)*arg2,(io::path const &)*arg3,(io::path const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_hasFileExtension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *arg2 = 0 ;
  io::path *arg3 = 0 ;
  io::path *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg2 = *(io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg3 = *(io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg4 = *(io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  result = (bool)irr::core::hasFileExtension((io::path const &)*arg1,(io::path const &)*arg2,(io::path const &)*arg3,(io::path const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_hasFileExtension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *arg2 = 0 ;
  io::path *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg2 = *(io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg3 = *(io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  result = (bool)irr::core::hasFileExtension((io::path const &)*arg1,(io::path const &)*arg2,(io::path const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_hasFileExtension_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg2 = *(io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  result = (bool)irr::core::hasFileExtension((io::path const &)*arg1,(io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_cutFilenameExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *arg2 = 0 ;
  io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path & reference is null");
    return 0;
  } 
  arg2 = *(io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  result = (io::path *) &irr::core::cutFilenameExtension(*arg1,(io::path const &)*arg2);
  *(io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getFileNameExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *arg2 = 0 ;
  io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path & reference is null");
    return 0;
  } 
  arg2 = *(io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  result = (io::path *) &irr::core::getFileNameExtension(*arg1,(io::path const &)*arg2);
  *(io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_deletePathFromFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path & reference is null");
    return 0;
  } 
  result = (io::path *) &irr::core::deletePathFromFilename(*arg1);
  *(io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_deletePathFromPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  io::path *arg1 = 0 ;
  irr::s32 arg2 ;
  io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path & reference is null");
    return 0;
  } 
  arg2 = (irr::s32)jarg2; 
  result = (io::path *) &irr::core::deletePathFromPath(*arg1,arg2);
  *(io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_isInSameDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  io::path *arg1 = 0 ;
  io::path *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  arg2 = *(io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)irr::core::isInSameDirectory((io::path const &)*arg1,(io::path const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_splitFilename_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  io::path *arg1 = 0 ;
  io::path *arg2 = (io::path *) 0 ;
  io::path *arg3 = (io::path *) 0 ;
  io::path *arg4 = (io::path *) 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return ;
  } 
  arg2 = *(io::path **)&jarg2; 
  arg3 = *(io::path **)&jarg3; 
  arg4 = *(io::path **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  irr::core::splitFilename((io::path const &)*arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_splitFilename_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  io::path *arg1 = 0 ;
  io::path *arg2 = (io::path *) 0 ;
  io::path *arg3 = (io::path *) 0 ;
  io::path *arg4 = (io::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return ;
  } 
  arg2 = *(io::path **)&jarg2; 
  arg3 = *(io::path **)&jarg3; 
  arg4 = *(io::path **)&jarg4; 
  irr::core::splitFilename((io::path const &)*arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_splitFilename_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  io::path *arg1 = 0 ;
  io::path *arg2 = (io::path *) 0 ;
  io::path *arg3 = (io::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return ;
  } 
  arg2 = *(io::path **)&jarg2; 
  arg3 = *(io::path **)&jarg3; 
  irr::core::splitFilename((io::path const &)*arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_splitFilename_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  io::path *arg1 = 0 ;
  io::path *arg2 = (io::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return ;
  } 
  arg2 = *(io::path **)&jarg2; 
  irr::core::splitFilename((io::path const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_splitFilename_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  io::path *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(io::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "io::path const & reference is null");
    return ;
  } 
  irr::core::splitFilename((io::path const &)*arg1);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_isdigit(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  result = (irr::s32)irr::core::isdigit(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_isspace(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  result = (irr::s32)irr::core::isspace(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_isupper(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s32)jarg1; 
  result = (irr::s32)irr::core::isupper(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1quaternion_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::quaternion *)new irr::core::quaternion();
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1quaternion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::core::quaternion *)new irr::core::quaternion(arg1,arg2,arg3,arg4);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1quaternion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::core::quaternion *)new irr::core::quaternion(arg1,arg2,arg3);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1quaternion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *)new irr::core::quaternion((irr::core::vector3df const &)*arg1);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1quaternion_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::core::matrix4 *arg1 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::matrix4 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *)new irr::core::quaternion((irr::core::matrix4 const &)*arg1);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::quaternion const *)arg1)->operator ==((irr::core::quaternion const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::quaternion const *)arg1)->operator !=((irr::core::quaternion const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1assignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *) &(arg1)->operator =((irr::core::quaternion const &)*arg2);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1assignOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *) &(arg1)->operator =((irr::core::matrix4 const &)*arg2);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1addOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = ((irr::core::quaternion const *)arg1)->operator +((irr::core::quaternion const &)*arg2);
  *(irr::core::quaternion **)&jresult = new irr::core::quaternion((const irr::core::quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1timesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = ((irr::core::quaternion const *)arg1)->operator *((irr::core::quaternion const &)*arg2);
  *(irr::core::quaternion **)&jresult = new irr::core::quaternion((const irr::core::quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1timesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::core::quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = ((irr::core::quaternion const *)arg1)->operator *(arg2);
  *(irr::core::quaternion **)&jresult = new irr::core::quaternion((const irr::core::quaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1assignTimesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (irr::core::quaternion *) &(arg1)->operator *=(arg2);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1timesOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = ((irr::core::quaternion const *)arg1)->operator *((irr::core::vector3df const &)*arg2);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1assignTimesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *) &(arg1)->operator *=((irr::core::quaternion const &)*arg2);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = (irr::f32)((irr::core::quaternion const *)arg1)->dotProduct((irr::core::quaternion const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::core::quaternion *) &(arg1)->set(arg2,arg3,arg4,arg5);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::core::quaternion *) &(arg1)->set(arg2,arg3,arg4);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *) &(arg1)->set((irr::core::vector3df const &)*arg2);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *) &(arg1)->set((irr::core::quaternion const &)*arg2);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jboolean jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::f32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (bool)((irr::core::quaternion const *)arg1)->equals((irr::core::quaternion const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::quaternion const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::quaternion const *)arg1)->equals((irr::core::quaternion const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = (irr::core::quaternion *) &(arg1)->normalize();
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1getMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  SwigValueWrapper< irr::core::CMatrix4< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = ((irr::core::quaternion const *)arg1)->getMatrix();
  *(irr::core::matrix4 **)&jresult = new irr::core::matrix4((const irr::core::matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1getMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  ((irr::core::quaternion const *)arg1)->getMatrix(*arg2,(irr::core::vector3df const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1getMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 & reference is null");
    return ;
  } 
  ((irr::core::quaternion const *)arg1)->getMatrix(*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1getMatrixCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  ((irr::core::quaternion const *)arg1)->getMatrixCenter(*arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1getMatrix_1transposed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 & reference is null");
    return ;
  } 
  ((irr::core::quaternion const *)arg1)->getMatrix_transposed(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1makeInverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = (irr::core::quaternion *) &(arg1)->makeInverse();
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1lerp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion arg2 ;
  irr::core::quaternion arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *argp2 ;
  irr::core::quaternion *argp3 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  argp2 = *(irr::core::quaternion **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(irr::core::quaternion **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::core::quaternion *) &(arg1)->lerp(arg2,arg3,arg4);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1slerp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion arg2 ;
  irr::core::quaternion arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::quaternion *argp2 ;
  irr::core::quaternion *argp3 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  argp2 = *(irr::core::quaternion **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(irr::core::quaternion **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::core::quaternion *) &(arg1)->slerp(arg2,arg3,arg4,arg5);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1slerp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion arg2 ;
  irr::core::quaternion arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *argp2 ;
  irr::core::quaternion *argp3 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  argp2 = *(irr::core::quaternion **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(irr::core::quaternion **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::core::quaternion *) &(arg1)->slerp(arg2,arg3,arg4);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1fromAngleAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *) &(arg1)->fromAngleAxis(arg2,(irr::core::vector3df const &)*arg3);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1toAngleAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::f32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return ;
  } 
  ((irr::core::quaternion const *)arg1)->toAngleAxis(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1toEuler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return ;
  } 
  ((irr::core::quaternion const *)arg1)->toEuler(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1makeIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = (irr::core::quaternion *) &(arg1)->makeIdentity();
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1rotationFromTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::core::quaternion *) &(arg1)->rotationFromTo((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = (irr::f32) ((arg1)->X);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = (irr::f32) ((arg1)->Y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1Z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1Z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = (irr::f32) ((arg1)->Z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1W_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->W = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_quaternion_1W_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  result = (irr::f32) ((arg1)->W);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1quaternion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::quaternion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_RGBA16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::u16)irr::video::RGBA16(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_RGBA16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (irr::u16)irr::video::RGBA16(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_RGB16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (irr::u16)irr::video::RGB16(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_RGB16from16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  irr::u16 arg1 ;
  irr::u16 arg2 ;
  irr::u16 arg3 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  arg2 = (irr::u16)jarg2; 
  arg3 = (irr::u16)jarg3; 
  result = (irr::u16)irr::video::RGB16from16(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_X8R8G8B8toA1R5G5B5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  irr::u32 arg1 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::u16)irr::video::X8R8G8B8toA1R5G5B5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_A8R8G8B8toA1R5G5B5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  irr::u32 arg1 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::u16)irr::video::A8R8G8B8toA1R5G5B5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_A8R8G8B8toR5G6B5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  irr::u32 arg1 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::u16)irr::video::A8R8G8B8toR5G6B5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_A1R5G5B5toA8R8G8B8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u32)irr::video::A1R5G5B5toA8R8G8B8(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_R5G6B5toA8R8G8B8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u32)irr::video::R5G6B5toA8R8G8B8(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_R5G6B5toA1R5G5B5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  irr::u16 arg1 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u16)irr::video::R5G6B5toA1R5G5B5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_A1R5G5B5toR5G6B5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  irr::u16 arg1 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u16)irr::video::A1R5G5B5toR5G6B5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getAlpha(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u32)irr::video::getAlpha(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getRed(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u32)irr::video::getRed(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getGreen(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u32)irr::video::getGreen(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getBlue(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u16)jarg1; 
  result = (irr::u32)irr::video::getBlue(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_getAverage(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jint jresult = 0 ;
  irr::s16 arg1 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::s16)jarg1; 
  result = (irr::s32)irr::video::getAverage(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::SColor *)new irr::video::SColor();
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::video::SColor *)new irr::video::SColor(arg1,arg2,arg3,arg4);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::video::SColor *)new irr::video::SColor(arg1);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::u32)((irr::video::SColor const *)arg1)->getAlpha();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getRed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::u32)((irr::video::SColor const *)arg1)->getRed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getGreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::u32)((irr::video::SColor const *)arg1)->getGreen();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getBlue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::u32)((irr::video::SColor const *)arg1)->getBlue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getLightness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::f32)((irr::video::SColor const *)arg1)->getLightness();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getLuminance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::f32)((irr::video::SColor const *)arg1)->getLuminance();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::u32)((irr::video::SColor const *)arg1)->getAverage();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setAlpha(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1setRed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setRed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1setGreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setGreen(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1setBlue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setBlue(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SColor_1toA1R5G5B5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::u16)((irr::video::SColor const *)arg1)->toA1R5G5B5();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1toOpenGLColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u8 *arg2 = (irr::u8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(irr::u8 **)&jarg2; 
  ((irr::video::SColor const *)arg1)->toOpenGLColor(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SColor_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::SColor const *)arg1)->operator ==((irr::video::SColor const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SColor_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::SColor const *)arg1)->operator !=((irr::video::SColor const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SColor_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::SColor const *)arg1)->operator <((irr::video::SColor const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1addOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = ((irr::video::SColor const *)arg1)->operator +((irr::video::SColor const &)*arg2);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = ((irr::video::SColor const *)arg1)->getInterpolated((irr::video::SColor const &)*arg2,arg3);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getInterpolated_1quadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::SColor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg4 = (irr::f32)jarg4; 
  result = ((irr::video::SColor const *)arg1)->getInterpolated_quadratic((irr::video::SColor const &)*arg2,(irr::video::SColor const &)*arg3,arg4);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1setData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::video::ECOLOR_FORMAT)jarg3; 
  (arg1)->setData((void const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::video::ECOLOR_FORMAT)jarg3; 
  (arg1)->getData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColor_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColor_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColor **)&jarg1; 
  result = (irr::u32) ((arg1)->color);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::SColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorf_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::SColorf *)new irr::video::SColorf();
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::video::SColorf *)new irr::video::SColorf(arg1,arg2,arg3,arg4);
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorf_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::video::SColorf *)new irr::video::SColorf(arg1,arg2,arg3);
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorf_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColor arg1 ;
  irr::video::SColor *argp1 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(irr::video::SColor **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg1 = *argp1; 
  result = (irr::video::SColorf *)new irr::video::SColorf(arg1);
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1toSColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = ((irr::video::SColorf const *)arg1)->toSColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::video::SColorf result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColorf const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = ((irr::video::SColorf const *)arg1)->getInterpolated((irr::video::SColorf const &)*arg2,arg3);
  *(irr::video::SColorf **)&jresult = new irr::video::SColorf((const irr::video::SColorf &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1getInterpolated_1quadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  irr::video::SColorf *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::video::SColorf result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColorf const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::SColorf **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColorf const & reference is null");
    return 0;
  } 
  arg4 = (irr::f32)jarg4; 
  result = ((irr::video::SColorf const *)arg1)->getInterpolated_quadratic((irr::video::SColorf const &)*arg2,(irr::video::SColorf const &)*arg3,arg4);
  *(irr::video::SColorf **)&jresult = new irr::video::SColorf((const irr::video::SColorf &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1setColorComponentValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::s32 arg2 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  (arg1)->setColorComponentValue(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32)((irr::video::SColorf const *)arg1)->getAlpha();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1getRed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32)((irr::video::SColorf const *)arg1)->getRed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1getGreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32)((irr::video::SColorf const *)arg1)->getGreen();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1getBlue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32)((irr::video::SColorf const *)arg1)->getBlue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32) ((arg1)->r);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32) ((arg1)->g);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32) ((arg1)->b);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorf_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  result = (irr::f32) ((arg1)->a);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SColorf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::SColorf **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorHSL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::video::SColorHSL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::video::SColorHSL *)new irr::video::SColorHSL(arg1,arg2,arg3);
  *(irr::video::SColorHSL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorHSL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::video::SColorHSL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (irr::video::SColorHSL *)new irr::video::SColorHSL(arg1,arg2);
  *(irr::video::SColorHSL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorHSL_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::video::SColorHSL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  result = (irr::video::SColorHSL *)new irr::video::SColorHSL(arg1);
  *(irr::video::SColorHSL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SColorHSL_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::SColorHSL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::SColorHSL *)new irr::video::SColorHSL();
  *(irr::video::SColorHSL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1fromRGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColorf const & reference is null");
    return ;
  } 
  (arg1)->fromRGB((irr::video::SColorf const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1toRGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColorf & reference is null");
    return ;
  } 
  ((irr::video::SColorHSL const *)arg1)->toRGB(*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1Hue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Hue = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1Hue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  result = (irr::f32) ((arg1)->Hue);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1Saturation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Saturation = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1Saturation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  result = (irr::f32) ((arg1)->Saturation);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1Luminance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Luminance = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SColorHSL_1Luminance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  result = (irr::f32) ((arg1)->Luminance);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SColorHSL(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::SColorHSL **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_LightTypeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::video::LightTypeNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SLight(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::SLight *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::SLight *)new irr::video::SLight();
  *(irr::video::SLight **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1AmbientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::SColorf *arg2 = (irr::video::SColorf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2; 
  if (arg1) (arg1)->AmbientColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SLight_1AmbientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::video::SColorf *)& ((arg1)->AmbientColor);
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1DiffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::SColorf *arg2 = (irr::video::SColorf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2; 
  if (arg1) (arg1)->DiffuseColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SLight_1DiffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::video::SColorf *)& ((arg1)->DiffuseColor);
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1SpecularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::SColorf *arg2 = (irr::video::SColorf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2; 
  if (arg1) (arg1)->SpecularColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SLight_1SpecularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::video::SColorf *)& ((arg1)->SpecularColor);
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Attenuation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->Attenuation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Attenuation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->Attenuation);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1OuterCone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->OuterCone = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SLight_1OuterCone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::f32) ((arg1)->OuterCone);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1InnerCone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->InnerCone = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SLight_1InnerCone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::f32) ((arg1)->InnerCone);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Falloff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Falloff = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Falloff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::f32) ((arg1)->Falloff);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->Position);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->Direction = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->Direction);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Radius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::f32) ((arg1)->Radius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::E_LIGHT_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = (irr::video::E_LIGHT_TYPE)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SLight_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  irr::video::E_LIGHT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (irr::video::E_LIGHT_TYPE) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SLight_1CastShadows_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CastShadows = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SLight_1CastShadows_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SLight **)&jarg1; 
  result = (bool) ((arg1)->CastShadows);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SLight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::SLight *arg1 = (irr::video::SLight *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::SLight **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SKeyMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::SKeyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::SKeyMap *)new irr::SKeyMap();
  *(irr::SKeyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SKeyMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  irr::EKEY_ACTION arg1 ;
  irr::EKEY_CODE arg2 ;
  irr::SKeyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::EKEY_ACTION)jarg1; 
  arg2 = (irr::EKEY_CODE)jarg2; 
  result = (irr::SKeyMap *)new irr::SKeyMap(arg1,arg2);
  *(irr::SKeyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SKeyMap_1Action_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::SKeyMap *arg1 = (irr::SKeyMap *) 0 ;
  irr::EKEY_ACTION arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SKeyMap **)&jarg1; 
  arg2 = (irr::EKEY_ACTION)jarg2; 
  if (arg1) (arg1)->Action = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SKeyMap_1Action_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SKeyMap *arg1 = (irr::SKeyMap *) 0 ;
  irr::EKEY_ACTION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SKeyMap **)&jarg1; 
  result = (irr::EKEY_ACTION) ((arg1)->Action);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SKeyMap_1KeyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::SKeyMap *arg1 = (irr::SKeyMap *) 0 ;
  irr::EKEY_CODE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SKeyMap **)&jarg1; 
  arg2 = (irr::EKEY_CODE)jarg2; 
  if (arg1) (arg1)->KeyCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SKeyMap_1KeyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SKeyMap *arg1 = (irr::SKeyMap *) 0 ;
  irr::EKEY_CODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SKeyMap **)&jarg1; 
  result = (irr::EKEY_CODE) ((arg1)->KeyCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SKeyMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::SKeyMap *arg1 = (irr::SKeyMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::SKeyMap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_sBuiltInVertexTypeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char **)(char **)irr::video::sBuiltInVertexTypeNames;
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::S3DVertex *)new irr::video::S3DVertex();
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  result = (irr::video::S3DVertex *)new irr::video::S3DVertex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::core::vector2d< irr::f32 > *arg4 = 0 ;
  irr::video::SColor *argp3 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(irr::core::vector2d< irr::f32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertex *)new irr::video::S3DVertex((irr::core::vector3df const &)*arg1,(irr::core::vector3df const &)*arg2,arg3,(irr::core::vector2d< irr::f32 > const &)*arg4);
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1Pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->Pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1Pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->Pos);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1Normal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->Normal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1Normal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->Normal);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1Color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2; 
  if (arg1) (arg1)->Color = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1Color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  result = (irr::video::SColor *)& ((arg1)->Color);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1TCoords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::core::vector2d< irr::f32 > *arg2 = (irr::core::vector2d< irr::f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::f32 > **)&jarg2; 
  if (arg1) (arg1)->TCoords = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1TCoords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::core::vector2d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  result = (irr::core::vector2d< irr::f32 > *)& ((arg1)->TCoords);
  *(irr::core::vector2d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertex const *)arg1)->operator ==((irr::video::S3DVertex const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertex const *)arg1)->operator !=((irr::video::S3DVertex const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertex const *)arg1)->operator <((irr::video::S3DVertex const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::video::E_VERTEX_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  result = (irr::video::E_VERTEX_TYPE)((irr::video::S3DVertex const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::video::S3DVertex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (arg1)->getInterpolated((irr::video::S3DVertex const &)*arg2,arg3);
  *(irr::video::S3DVertex **)&jresult = new irr::video::S3DVertex((const irr::video::S3DVertex &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1S3DVertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::S3DVertex *arg1 = (irr::video::S3DVertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::S3DVertex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords();
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::video::SColor arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::f32 arg8 ;
  irr::video::SColor *argp4 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  arg8 = (irr::f32)jarg8; 
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::video::SColor arg2 ;
  irr::core::vector2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector2d< irr::f32 > *arg4 = 0 ;
  irr::video::SColor *argp2 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::vector2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector2d< irr::f32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords((irr::core::vector3df const &)*arg1,arg2,(irr::core::vector2d< irr::f32 > const &)*arg3,(irr::core::vector2d< irr::f32 > const &)*arg4);
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  irr::core::vector2d< irr::f32 > *arg4 = 0 ;
  irr::core::vector2d< irr::f32 > *arg5 = 0 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::SColor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector2d< irr::f32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords((irr::core::vector3df const &)*arg1,(irr::core::vector3df const &)*arg2,(irr::video::SColor const &)*arg3,(irr::core::vector2d< irr::f32 > const &)*arg4,(irr::core::vector2d< irr::f32 > const &)*arg5);
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::f32 arg11 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  arg11 = (irr::f32)jarg11; 
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::core::vector2d< irr::f32 > *arg4 = 0 ;
  irr::video::SColor *argp3 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(irr::core::vector2d< irr::f32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords((irr::core::vector3df const &)*arg1,(irr::core::vector3df const &)*arg2,arg3,(irr::core::vector2d< irr::f32 > const &)*arg4);
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertex2TCoords_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertex *arg1 = 0 ;
  irr::video::S3DVertex2TCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertex2TCoords *)new irr::video::S3DVertex2TCoords(*arg1);
  *(irr::video::S3DVertex2TCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1TCoords2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::core::vector2d< irr::f32 > *arg2 = (irr::core::vector2d< irr::f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::f32 > **)&jarg2; 
  if (arg1) (arg1)->TCoords2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1TCoords2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::core::vector2d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  result = (irr::core::vector2d< irr::f32 > *)& ((arg1)->TCoords2);
  *(irr::core::vector2d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  arg2 = *(irr::video::S3DVertex2TCoords **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex2TCoords const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertex2TCoords const *)arg1)->operator ==((irr::video::S3DVertex2TCoords const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  arg2 = *(irr::video::S3DVertex2TCoords **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex2TCoords const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertex2TCoords const *)arg1)->operator !=((irr::video::S3DVertex2TCoords const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  arg2 = *(irr::video::S3DVertex2TCoords **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex2TCoords const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertex2TCoords const *)arg1)->operator <((irr::video::S3DVertex2TCoords const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::video::E_VERTEX_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  result = (irr::video::E_VERTEX_TYPE)((irr::video::S3DVertex2TCoords const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::video::S3DVertex2TCoords result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  arg2 = *(irr::video::S3DVertex2TCoords **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex2TCoords const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (arg1)->getInterpolated((irr::video::S3DVertex2TCoords const &)*arg2,arg3);
  *(irr::video::S3DVertex2TCoords **)&jresult = new irr::video::S3DVertex2TCoords((const irr::video::S3DVertex2TCoords &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1S3DVertex2TCoords(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::S3DVertex2TCoords *arg1 = (irr::video::S3DVertex2TCoords *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::S3DVertex2TCoords **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents();
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14, jfloat jarg15) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::f32 arg11 ;
  irr::f32 arg12 ;
  irr::f32 arg13 ;
  irr::f32 arg14 ;
  irr::f32 arg15 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  arg11 = (irr::f32)jarg11; 
  arg12 = (irr::f32)jarg12; 
  arg13 = (irr::f32)jarg13; 
  arg14 = (irr::f32)jarg14; 
  arg15 = (irr::f32)jarg15; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13, jfloat jarg14) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::f32 arg11 ;
  irr::f32 arg12 ;
  irr::f32 arg13 ;
  irr::f32 arg14 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  arg11 = (irr::f32)jarg11; 
  arg12 = (irr::f32)jarg12; 
  arg13 = (irr::f32)jarg13; 
  arg14 = (irr::f32)jarg14; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12, jfloat jarg13) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::f32 arg11 ;
  irr::f32 arg12 ;
  irr::f32 arg13 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  arg11 = (irr::f32)jarg11; 
  arg12 = (irr::f32)jarg12; 
  arg13 = (irr::f32)jarg13; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11, jfloat jarg12) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::f32 arg11 ;
  irr::f32 arg12 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  arg11 = (irr::f32)jarg11; 
  arg12 = (irr::f32)jarg12; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9, jfloat jarg10, jfloat jarg11) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::f32 arg11 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  arg11 = (irr::f32)jarg11; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9, jfloat jarg10) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8, jfloat jarg9) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_, jfloat jarg8) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::f32 arg8 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::f32)jarg8; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor arg7 ;
  irr::video::SColor *argp7 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5,arg6);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4,arg5);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3,arg4);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::f32)jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents(arg1,arg2,arg3);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::video::SColor arg2 ;
  irr::core::vector2df *arg3 = 0 ;
  irr::video::SColor *argp2 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::vector2df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents((irr::core::vector3df const &)*arg1,arg2,(irr::core::vector2df const &)*arg3);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::core::vector2df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::video::SColor *argp3 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(irr::core::vector2df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents((irr::core::vector3df const &)*arg1,(irr::core::vector3df const &)*arg2,arg3,(irr::core::vector2df const &)*arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::core::vector2df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::video::SColor *argp3 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(irr::core::vector2df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents((irr::core::vector3df const &)*arg1,(irr::core::vector3df const &)*arg2,arg3,(irr::core::vector2df const &)*arg4,(irr::core::vector3df const &)*arg5);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexTangents_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::core::vector2df *arg4 = 0 ;
  irr::video::SColor *argp3 ;
  irr::video::S3DVertexTangents *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(irr::core::vector2df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return 0;
  } 
  result = (irr::video::S3DVertexTangents *)new irr::video::S3DVertexTangents((irr::core::vector3df const &)*arg1,(irr::core::vector3df const &)*arg2,arg3,(irr::core::vector2df const &)*arg4);
  *(irr::video::S3DVertexTangents **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1Tangent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->Tangent = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1Tangent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->Tangent);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1Binormal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->Binormal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1Binormal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->Binormal);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::video::S3DVertexTangents *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  arg2 = *(irr::video::S3DVertexTangents **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertexTangents const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertexTangents const *)arg1)->operator ==((irr::video::S3DVertexTangents const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::video::S3DVertexTangents *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  arg2 = *(irr::video::S3DVertexTangents **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertexTangents const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertexTangents const *)arg1)->operator !=((irr::video::S3DVertexTangents const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::video::S3DVertexTangents *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  arg2 = *(irr::video::S3DVertexTangents **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertexTangents const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::S3DVertexTangents const *)arg1)->operator <((irr::video::S3DVertexTangents const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::video::E_VERTEX_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  result = (irr::video::E_VERTEX_TYPE)((irr::video::S3DVertexTangents const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  irr::video::S3DVertexTangents *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::video::S3DVertexTangents result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  arg2 = *(irr::video::S3DVertexTangents **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertexTangents const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (arg1)->getInterpolated((irr::video::S3DVertexTangents const &)*arg2,arg3);
  *(irr::video::S3DVertexTangents **)&jresult = new irr::video::S3DVertexTangents((const irr::video::S3DVertexTangents &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1S3DVertexTangents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::S3DVertexTangents *arg1 = (irr::video::S3DVertexTangents *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::S3DVertexTangents **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getVertexPitchFromType(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::video::E_VERTEX_TYPE arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_VERTEX_TYPE)jarg1; 
  result = (irr::u32)irr::video::getVertexPitchFromType(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ILogger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::ILogger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1getLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::ELOG_LEVEL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  result = (irr::ELOG_LEVEL)((irr::ILogger const *)arg1)->getLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1setLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::ELOG_LEVEL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  arg2 = (irr::ELOG_LEVEL)jarg2; 
  (arg1)->setLogLevel(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::ELOG_LEVEL arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  arg4 = (irr::ELOG_LEVEL)jarg4; 
  (arg1)->log((irr::c8 const *)arg2,(wchar_t const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->log((irr::c8 const *)arg2,(wchar_t const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1log_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::ELOG_LEVEL arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  arg4 = (irr::ELOG_LEVEL)jarg4; 
  (arg1)->log((wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1log_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->log((wchar_t const *)arg2,(wchar_t const *)arg3);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1log_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::ELOG_LEVEL arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = (irr::ELOG_LEVEL)jarg3; 
  (arg1)->log((wchar_t const *)arg2,arg3);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILogger_1log_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ILogger **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->log((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (void *)(arg1)->lock();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IImage const *)arg1)->getDimension();
  *(irr::core::dimension2d< irr::u32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getBitsPerPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getBitsPerPixel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getBytesPerPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getBytesPerPixel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getImageDataSizeInBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getImageDataSizeInBytes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getImageDataSizeInPixels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getImageDataSizeInPixels();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = ((irr::video::IImage const *)arg1)->getPixel(arg2,arg3);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1setPixel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(irr::video::SColor **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  (arg1)->setPixel(arg2,arg3,(irr::video::SColor const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1setPixel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(irr::video::SColor **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->setPixel(arg2,arg3,(irr::video::SColor const &)*arg4);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getColorFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::video::ECOLOR_FORMAT)((irr::video::IImage const *)arg1)->getColorFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getRedMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getRedMask();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getGreenMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getGreenMask();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getBlueMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getBlueMask();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getAlphaMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getAlphaMask();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  result = (irr::u32)((irr::video::IImage const *)arg1)->getPitch();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToScaling_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::ECOLOR_FORMAT arg5 ;
  irr::u32 arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::video::ECOLOR_FORMAT)jarg5; 
  arg6 = (irr::u32)jarg6; 
  (arg1)->copyToScaling(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToScaling_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::ECOLOR_FORMAT arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::video::ECOLOR_FORMAT)jarg5; 
  (arg1)->copyToScaling(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToScaling_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  (arg1)->copyToScaling(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToScaling_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  (arg1)->copyToScaling(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->copyTo(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  (arg1)->copyTo(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  (arg1)->copyTo(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyTo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->copyTo(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToWithAlpha_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6; 
  (arg1)->copyToWithAlpha(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::video::SColor const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToWithAlpha_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::video::SColor *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->copyToWithAlpha(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::video::SColor const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToScalingBoxFilter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->copyToScalingBoxFilter(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToScalingBoxFilter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->copyToScalingBoxFilter(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1copyToScalingBoxFilter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  (arg1)->copyToScalingBoxFilter(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IImage_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImage **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->fill((irr::video::SColor const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImage_1getBitsPerPixelFromFormat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::video::ECOLOR_FORMAT arg1 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::ECOLOR_FORMAT)jarg1; 
  result = (irr::u32)irr::video::IImage::getBitsPerPixelFromFormat(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IImage_1isRenderTargetOnlyFormat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  irr::video::ECOLOR_FORMAT arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::ECOLOR_FORMAT)jarg1; 
  result = (bool)irr::video::IImage::isRenderTargetOnlyFormat(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IImage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1lock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_TEXTURE_LOCK_MODE arg2 ;
  irr::u32 arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  arg2 = (irr::video::E_TEXTURE_LOCK_MODE)jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (void *)(arg1)->lock(arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1lock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_TEXTURE_LOCK_MODE arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  arg2 = (irr::video::E_TEXTURE_LOCK_MODE)jarg2; 
  result = (void *)(arg1)->lock(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1lock_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (void *)(arg1)->lock();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1getOriginalSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::ITexture const *)arg1)->getOriginalSize();
  *(irr::core::dimension2d< irr::u32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::ITexture const *)arg1)->getSize();
  *(irr::core::dimension2d< irr::u32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1getDriverType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_DRIVER_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (irr::video::E_DRIVER_TYPE)((irr::video::ITexture const *)arg1)->getDriverType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1getColorFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (irr::video::ECOLOR_FORMAT)((irr::video::ITexture const *)arg1)->getColorFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1getPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (irr::u32)((irr::video::ITexture const *)arg1)->getPitch();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1hasMipMaps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (bool)((irr::video::ITexture const *)arg1)->hasMipMaps();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1hasAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (bool)((irr::video::ITexture const *)arg1)->hasAlpha();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1regenerateMipMapLevels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->regenerateMipMapLevels(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1regenerateMipMapLevels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  (arg1)->regenerateMipMapLevels();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1isRenderTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (bool)((irr::video::ITexture const *)arg1)->isRenderTarget();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITexture_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  io::SNamedPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (io::SNamedPath *) &((irr::video::ITexture const *)arg1)->getName();
  *(io::SNamedPath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ITexture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_pack_1textureBlendFunc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jlong jarg4) {
  jfloat jresult = 0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  irr::video::E_MODULATE_FUNC arg3 ;
  irr::u32 arg4 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_BLEND_FACTOR)jarg1; 
  arg2 = (irr::video::E_BLEND_FACTOR)jarg2; 
  arg3 = (irr::video::E_MODULATE_FUNC)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::f32)irr::video::pack_textureBlendFunc(arg1,arg2,arg3,arg4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_pack_1textureBlendFunc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  irr::video::E_MODULATE_FUNC arg3 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_BLEND_FACTOR)jarg1; 
  arg2 = (irr::video::E_BLEND_FACTOR)jarg2; 
  arg3 = (irr::video::E_MODULATE_FUNC)jarg3; 
  result = (irr::f32)irr::video::pack_textureBlendFunc(arg1,arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_pack_1textureBlendFunc_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jfloat jresult = 0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_BLEND_FACTOR)jarg1; 
  arg2 = (irr::video::E_BLEND_FACTOR)jarg2; 
  result = (irr::f32)irr::video::pack_textureBlendFunc(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_unpack_1textureBlendFunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jfloat jarg5) {
  irr::video::E_BLEND_FACTOR *arg1 = 0 ;
  irr::video::E_BLEND_FACTOR *arg2 = 0 ;
  irr::video::E_MODULATE_FUNC *arg3 = 0 ;
  irr::u32 *arg4 = 0 ;
  irr::f32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::E_BLEND_FACTOR **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::E_BLEND_FACTOR & reference is null");
    return ;
  } 
  arg2 = *(irr::video::E_BLEND_FACTOR **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::E_BLEND_FACTOR & reference is null");
    return ;
  } 
  arg3 = *(irr::video::E_MODULATE_FUNC **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::E_MODULATE_FUNC & reference is null");
    return ;
  } 
  arg4 = *(irr::u32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return ;
  } 
  arg5 = (irr::f32)jarg5; 
  irr::video::unpack_textureBlendFunc(*arg1,*arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_textureBlendFunc_1hasAlpha(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_BLEND_FACTOR)jarg1; 
  result = (bool)irr::video::textureBlendFunc_hasAlpha(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_PolygonOffsetDirectionNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::video::PolygonOffsetDirectionNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_MATERIAL_1MAX_1TEXTURES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::u32)(irr::u32)irr::video::MATERIAL_MAX_TEXTURES;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMaterial_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::SMaterial *)new irr::video::SMaterial();
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMaterial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (irr::video::SMaterial *)new irr::video::SMaterial((irr::video::SMaterial const &)*arg1);
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (irr::video::SMaterial *) &(arg1)->operator =((irr::video::SMaterial const &)*arg2);
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1TextureLayer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  SMaterialLayer *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(SMaterialLayer **)&jarg2; 
  {
    size_t ii;
    SMaterialLayer *b = (SMaterialLayer *) arg1->TextureLayer;
    for (ii = 0; ii < (size_t)irr::video::MATERIAL_MAX_TEXTURES; ii++) b[ii] = *((SMaterialLayer *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1TextureLayer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  SMaterialLayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (SMaterialLayer *)(SMaterialLayer *) ((arg1)->TextureLayer);
  *(SMaterialLayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1MaterialType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  E_MATERIAL_TYPE arg2 ;
  E_MATERIAL_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  argp2 = *(E_MATERIAL_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->MaterialType = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1MaterialType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  E_MATERIAL_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result =  ((arg1)->MaterialType);
  *(E_MATERIAL_TYPE **)&jresult = new E_MATERIAL_TYPE((const E_MATERIAL_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1AmbientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2; 
  if (arg1) (arg1)->AmbientColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1AmbientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::video::SColor *)& ((arg1)->AmbientColor);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1DiffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2; 
  if (arg1) (arg1)->DiffuseColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1DiffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::video::SColor *)& ((arg1)->DiffuseColor);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1EmissiveColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2; 
  if (arg1) (arg1)->EmissiveColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1EmissiveColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::video::SColor *)& ((arg1)->EmissiveColor);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1SpecularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2; 
  if (arg1) (arg1)->SpecularColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1SpecularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::video::SColor *)& ((arg1)->SpecularColor);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Shininess_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Shininess = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Shininess_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::f32) ((arg1)->Shininess);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1MaterialTypeParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->MaterialTypeParam = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1MaterialTypeParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::f32) ((arg1)->MaterialTypeParam);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1MaterialTypeParam2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->MaterialTypeParam2 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1MaterialTypeParam2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::f32) ((arg1)->MaterialTypeParam2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Thickness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->Thickness = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Thickness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::f32) ((arg1)->Thickness);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ZBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->ZBuffer = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ZBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::u8) ((arg1)->ZBuffer);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1AntiAliasing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->AntiAliasing = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1AntiAliasing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::u8) ((arg1)->AntiAliasing);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ColorMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->ColorMask = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ColorMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::u8) ((arg1)->ColorMask);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ColorMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->ColorMaterial = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ColorMaterial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::u8) ((arg1)->ColorMaterial);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1BlendOperation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_BLEND_OPERATION arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::video::E_BLEND_OPERATION)jarg2; 
  if (arg1) (arg1)->BlendOperation = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1BlendOperation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_BLEND_OPERATION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::video::E_BLEND_OPERATION) ((arg1)->BlendOperation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1PolygonOffsetFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->PolygonOffsetFactor = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1PolygonOffsetFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::u8) ((arg1)->PolygonOffsetFactor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1PolygonOffsetDirection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_POLYGON_OFFSET arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::video::E_POLYGON_OFFSET)jarg2; 
  if (arg1) (arg1)->PolygonOffsetDirection = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1PolygonOffsetDirection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_POLYGON_OFFSET result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (irr::video::E_POLYGON_OFFSET) ((arg1)->PolygonOffsetDirection);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Wireframe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Wireframe = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Wireframe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->Wireframe);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1PointCloud_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PointCloud = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1PointCloud_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->PointCloud);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1GouraudShading_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GouraudShading = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1GouraudShading_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->GouraudShading);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Lighting_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Lighting = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1Lighting_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->Lighting);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ZWriteEnable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ZWriteEnable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1ZWriteEnable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->ZWriteEnable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1BackfaceCulling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BackfaceCulling = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1BackfaceCulling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->BackfaceCulling);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1FrontfaceCulling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FrontfaceCulling = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1FrontfaceCulling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->FrontfaceCulling);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1FogEnable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FogEnable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1FogEnable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->FogEnable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1NormalizeNormals_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NormalizeNormals = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1NormalizeNormals_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->NormalizeNormals);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1UseMipMaps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseMipMaps = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1UseMipMaps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool) ((arg1)->UseMipMaps);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1getTextureMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::core::matrix4 *) &(arg1)->getTextureMatrix(arg2);
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1getTextureMatrixConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::core::matrix4 *) &((irr::video::SMaterial const *)arg1)->getTextureMatrix(arg2);
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1setTextureMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->setTextureMatrix(arg2,(irr::core::matrix4 const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1getTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::ITexture *)((irr::video::SMaterial const *)arg1)->getTexture(arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1setTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  (arg1)->setTexture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1setFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  E_MATERIAL_FLAG arg2 ;
  bool arg3 ;
  E_MATERIAL_FLAG *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  argp2 = *(E_MATERIAL_FLAG **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_FLAG");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setFlag(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1getFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  E_MATERIAL_FLAG arg2 ;
  E_MATERIAL_FLAG *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  argp2 = *(E_MATERIAL_FLAG **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_FLAG");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((irr::video::SMaterial const *)arg1)->getFlag(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::SMaterial const *)arg1)->operator !=((irr::video::SMaterial const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::SMaterial const *)arg1)->operator ==((irr::video::SMaterial const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1isTransparent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool)((irr::video::SMaterial const *)arg1)->isTransparent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1isWireframe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  result = (bool)irr_video_SMaterial_isWireframe(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMaterial_1setTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  int arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  irr_video_SMaterial_setTexture__SWIG_1(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IdentityMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SMaterial **)&jarg1; 
  irr::video::IdentityMaterial = *arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IdentityMaterial_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::SMaterial *)&irr::video::IdentityMaterial;
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ALLOW_1ZWRITE_1ON_1TRANSPARENT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::ALLOW_ZWRITE_ON_TRANSPARENT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_CSM_1TEXTURE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::CSM_TEXTURE_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_LMTS_1TEXTURE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::LMTS_TEXTURE_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_MY3D_1TEXTURE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::MY3D_TEXTURE_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_COLLADA_1CREATE_1SCENE_1INSTANCES_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::COLLADA_CREATE_SCENE_INSTANCES;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_DMF_1TEXTURE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::DMF_TEXTURE_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_DMF_1IGNORE_1MATERIALS_1DIRS_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::DMF_IGNORE_MATERIALS_DIRS;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_DMF_1ALPHA_1CHANNEL_1REF_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::DMF_ALPHA_CHANNEL_REF;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_DMF_1FLIP_1ALPHA_1TEXTURES_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::DMF_FLIP_ALPHA_TEXTURES;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_OBJ_1TEXTURE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::OBJ_TEXTURE_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_OBJ_1LOADER_1IGNORE_1GROUPS_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::OBJ_LOADER_IGNORE_GROUPS;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_OBJ_1LOADER_1IGNORE_1MATERIAL_1FILES_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::OBJ_LOADER_IGNORE_MATERIAL_FILES;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_B3D_1LOADER_1IGNORE_1MIPMAP_1FLAG_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::B3D_LOADER_IGNORE_MIPMAP_FLAG;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_B3D_1TEXTURE_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::B3D_TEXTURE_PATH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IRR_1SCENE_1MANAGER_1IS_1EDITOR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::IRR_SCENE_MANAGER_IS_EDITOR;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_DEBUG_1NORMAL_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::DEBUG_NORMAL_LENGTH;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_DEBUG_1NORMAL_1COLOR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 *)(irr::c8 *)irr::scene::DEBUG_NORMAL_COLOR;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1addGUIElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  arg2 = (irr::gui::EGUI_ELEMENT_TYPE)jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIElement *)(arg1)->addGUIElement(arg2,arg3);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1addGUIElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  arg2 = (irr::gui::EGUI_ELEMENT_TYPE)jarg2; 
  result = (irr::gui::IGUIElement *)(arg1)->addGUIElement(arg2);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1addGUIElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2,arg3);
  *(irr::gui::IGUIElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1addGUIElement_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2);
  *(irr::gui::IGUIElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1getCreatableGUIElementTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIElementFactory const *)arg1)->getCreatableGUIElementTypeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1getCreateableGUIElementType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::s32 arg2 ;
  irr::gui::EGUI_ELEMENT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::gui::EGUI_ELEMENT_TYPE)((irr::gui::IGUIElementFactory const *)arg1)->getCreateableGUIElementType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1getCreateableGUIElementTypeName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::c8 *)((irr::gui::IGUIElementFactory const *)arg1)->getCreateableGUIElementTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIElementFactory_1getCreateableGUIElementTypeName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  arg2 = (irr::gui::EGUI_ELEMENT_TYPE)jarg2; 
  result = (irr::c8 *)((irr::gui::IGUIElementFactory const *)arg1)->getCreateableGUIElementTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIElementFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IFileReadCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IFileReadCallBack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IFileReadCallBack_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileReadCallBack **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->read(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IFileReadCallBack_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileReadCallBack **)&jarg1; 
  result = (long)((irr::io::IFileReadCallBack const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IXMLBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::io::IXMLBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::io::IXMLBase *)new irr::io::IXMLBase();
  *(irr::io::IXMLBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IXMLBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IXMLBase *arg1 = (irr::io::IXMLBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IXMLBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeXMLHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  (arg1)->writeXMLHeader();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10, jstring jarg11, jstring jarg12, jstring jarg13) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  wchar_t *arg11 = (wchar_t *) 0 ;
  wchar_t *arg12 = (wchar_t *) 0 ;
  wchar_t *arg13 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return ;
    }
  }
  {
    arg8 = 0;
    if (jarg8) {
      arg8 = (wchar_t *)jenv->GetStringChars(jarg8, 0);
      if (!arg8) return ;
    }
  }
  {
    arg9 = 0;
    if (jarg9) {
      arg9 = (wchar_t *)jenv->GetStringChars(jarg9, 0);
      if (!arg9) return ;
    }
  }
  {
    arg10 = 0;
    if (jarg10) {
      arg10 = (wchar_t *)jenv->GetStringChars(jarg10, 0);
      if (!arg10) return ;
    }
  }
  {
    arg11 = 0;
    if (jarg11) {
      arg11 = (wchar_t *)jenv->GetStringChars(jarg11, 0);
      if (!arg11) return ;
    }
  }
  {
    arg12 = 0;
    if (jarg12) {
      arg12 = (wchar_t *)jenv->GetStringChars(jarg12, 0);
      if (!arg12) return ;
    }
  }
  {
    arg13 = 0;
    if (jarg13) {
      arg13 = (wchar_t *)jenv->GetStringChars(jarg13, 0);
      if (!arg13) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10,(wchar_t const *)arg11,(wchar_t const *)arg12,(wchar_t const *)arg13);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
  {
    if (arg8) jenv->ReleaseStringChars(jarg8, (const jchar *) arg8); 
  }
  {
    if (arg9) jenv->ReleaseStringChars(jarg9, (const jchar *) arg9); 
  }
  {
    if (arg10) jenv->ReleaseStringChars(jarg10, (const jchar *) arg10); 
  }
  {
    if (arg11) jenv->ReleaseStringChars(jarg11, (const jchar *) arg11); 
  }
  {
    if (arg12) jenv->ReleaseStringChars(jarg12, (const jchar *) arg12); 
  }
  {
    if (arg13) jenv->ReleaseStringChars(jarg13, (const jchar *) arg13); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10, jstring jarg11, jstring jarg12) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  wchar_t *arg11 = (wchar_t *) 0 ;
  wchar_t *arg12 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return ;
    }
  }
  {
    arg8 = 0;
    if (jarg8) {
      arg8 = (wchar_t *)jenv->GetStringChars(jarg8, 0);
      if (!arg8) return ;
    }
  }
  {
    arg9 = 0;
    if (jarg9) {
      arg9 = (wchar_t *)jenv->GetStringChars(jarg9, 0);
      if (!arg9) return ;
    }
  }
  {
    arg10 = 0;
    if (jarg10) {
      arg10 = (wchar_t *)jenv->GetStringChars(jarg10, 0);
      if (!arg10) return ;
    }
  }
  {
    arg11 = 0;
    if (jarg11) {
      arg11 = (wchar_t *)jenv->GetStringChars(jarg11, 0);
      if (!arg11) return ;
    }
  }
  {
    arg12 = 0;
    if (jarg12) {
      arg12 = (wchar_t *)jenv->GetStringChars(jarg12, 0);
      if (!arg12) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10,(wchar_t const *)arg11,(wchar_t const *)arg12);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
  {
    if (arg8) jenv->ReleaseStringChars(jarg8, (const jchar *) arg8); 
  }
  {
    if (arg9) jenv->ReleaseStringChars(jarg9, (const jchar *) arg9); 
  }
  {
    if (arg10) jenv->ReleaseStringChars(jarg10, (const jchar *) arg10); 
  }
  {
    if (arg11) jenv->ReleaseStringChars(jarg11, (const jchar *) arg11); 
  }
  {
    if (arg12) jenv->ReleaseStringChars(jarg12, (const jchar *) arg12); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10, jstring jarg11) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  wchar_t *arg11 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return ;
    }
  }
  {
    arg8 = 0;
    if (jarg8) {
      arg8 = (wchar_t *)jenv->GetStringChars(jarg8, 0);
      if (!arg8) return ;
    }
  }
  {
    arg9 = 0;
    if (jarg9) {
      arg9 = (wchar_t *)jenv->GetStringChars(jarg9, 0);
      if (!arg9) return ;
    }
  }
  {
    arg10 = 0;
    if (jarg10) {
      arg10 = (wchar_t *)jenv->GetStringChars(jarg10, 0);
      if (!arg10) return ;
    }
  }
  {
    arg11 = 0;
    if (jarg11) {
      arg11 = (wchar_t *)jenv->GetStringChars(jarg11, 0);
      if (!arg11) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10,(wchar_t const *)arg11);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
  {
    if (arg8) jenv->ReleaseStringChars(jarg8, (const jchar *) arg8); 
  }
  {
    if (arg9) jenv->ReleaseStringChars(jarg9, (const jchar *) arg9); 
  }
  {
    if (arg10) jenv->ReleaseStringChars(jarg10, (const jchar *) arg10); 
  }
  {
    if (arg11) jenv->ReleaseStringChars(jarg11, (const jchar *) arg11); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return ;
    }
  }
  {
    arg8 = 0;
    if (jarg8) {
      arg8 = (wchar_t *)jenv->GetStringChars(jarg8, 0);
      if (!arg8) return ;
    }
  }
  {
    arg9 = 0;
    if (jarg9) {
      arg9 = (wchar_t *)jenv->GetStringChars(jarg9, 0);
      if (!arg9) return ;
    }
  }
  {
    arg10 = 0;
    if (jarg10) {
      arg10 = (wchar_t *)jenv->GetStringChars(jarg10, 0);
      if (!arg10) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
  {
    if (arg8) jenv->ReleaseStringChars(jarg8, (const jchar *) arg8); 
  }
  {
    if (arg9) jenv->ReleaseStringChars(jarg9, (const jchar *) arg9); 
  }
  {
    if (arg10) jenv->ReleaseStringChars(jarg10, (const jchar *) arg10); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return ;
    }
  }
  {
    arg8 = 0;
    if (jarg8) {
      arg8 = (wchar_t *)jenv->GetStringChars(jarg8, 0);
      if (!arg8) return ;
    }
  }
  {
    arg9 = 0;
    if (jarg9) {
      arg9 = (wchar_t *)jenv->GetStringChars(jarg9, 0);
      if (!arg9) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
  {
    if (arg8) jenv->ReleaseStringChars(jarg8, (const jchar *) arg8); 
  }
  {
    if (arg9) jenv->ReleaseStringChars(jarg9, (const jchar *) arg9); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return ;
    }
  }
  {
    arg8 = 0;
    if (jarg8) {
      arg8 = (wchar_t *)jenv->GetStringChars(jarg8, 0);
      if (!arg8) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
  {
    if (arg8) jenv->ReleaseStringChars(jarg8, (const jchar *) arg8); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->writeElement((wchar_t const *)arg2,arg3);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->writeElement((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeElement_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jlong jarg5) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > *arg4 = 0 ;
  irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > & reference is null");
    return ;
  } 
  arg5 = *(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > & reference is null");
    return ;
  } 
  (arg1)->writeElement((wchar_t const *)arg2,arg3,*arg4,*arg5);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->writeComment((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeClosingTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->writeClosingTag((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->writeText((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IXMLWriter_1writeLineBreak(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  (arg1)->writeLineBreak();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IXMLWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IXMLWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::video::SMaterial *) &(arg1)->getMaterial();
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getMaterialConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::video::SMaterial *) &((irr::scene::IMeshBuffer const *)arg1)->getMaterial();
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getVertexType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::E_VERTEX_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::video::E_VERTEX_TYPE)((irr::scene::IMeshBuffer const *)arg1)->getVertexType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getVerticesConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (void *)((irr::scene::IMeshBuffer const *)arg1)->getVertices();
  {
    jlong *arr;
    int i, sz;
    sz = arg1->getVertexCount ();
    jresult = jenv->NewLongArray(sz);
    if (!jresult) {
      return 0;
    }
    arr = jenv->GetLongArrayElements(jresult, 0);
    if (!arr) {
      return 0;
    }
    for (i=0; i<sz; i++) {
      arr[i] = 0;
      *(void **)&arr[i] = &((irr::video::S3DVertex *)result)[i];
    }
    jenv->ReleaseLongArrayElements(jresult, arr, 0);
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getVertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (void *)(arg1)->getVertices();
  {
    jlong *arr;
    int i, sz;
    sz = arg1->getVertexCount ();
    jresult = jenv->NewLongArray(sz);
    if (!jresult) {
      return 0;
    }
    arr = jenv->GetLongArrayElements(jresult, 0);
    if (!arr) {
      return 0;
    }
    for (i=0; i<sz; i++) {
      arr[i] = 0;
      *(void **)&arr[i] = &((irr::video::S3DVertex *)result)[i];
    }
    jenv->ReleaseLongArrayElements(jresult, arr, 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getVertexCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getVertexCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getIndexType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::E_INDEX_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = ((irr::scene::IMeshBuffer const *)arg1)->getIndexType();
  *(irr::video::E_INDEX_TYPE **)&jresult = new irr::video::E_INDEX_TYPE((const irr::video::E_INDEX_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getIndicesConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::u16 *)((irr::scene::IMeshBuffer const *)arg1)->getIndices();
  
  int sz = arg1->getIndexCount ();
  jresult = SWIG_JavaArrayOutUshort(jenv, result, sz);
  
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getIndices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::u16 *)(arg1)->getIndices();
  
  int sz = arg1->getIndexCount ();
  jresult = SWIG_JavaArrayOutUshort(jenv, result, sz);
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getIndexCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getIndexCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getBoundingBoxConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::aabbox3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::core::aabbox3df *) &((irr::scene::IMeshBuffer const *)arg1)->getBoundingBox();
  *(irr::core::aabbox3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1setBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return ;
  } 
  (arg1)->setBoundingBox((irr::core::aabbox3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1recalculateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  (arg1)->recalculateBoundingBox();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::core::vector3df *) &((irr::scene::IMeshBuffer const *)arg1)->getPosition(arg2);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getNormal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::core::vector3df *) &((irr::scene::IMeshBuffer const *)arg1)->getNormal(arg2);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getTCoords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector2df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::core::vector2df *) &((irr::scene::IMeshBuffer const *)arg1)->getTCoords(arg2);
  *(irr::core::vector2df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  s32 *arg2 = (s32 *) (s32 *)0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) (irr::u16 *)0 ;
  irr::u32 arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    
    
    arg2 = (s32 *) calloc(sz2, sizeof(s32*));
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  if (!SWIG_JavaArrayInUshort(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->append((void const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
  SWIG_JavaArrayArgoutUshort(jenv, jarr4, arg4, jarg4); 
  free(arg4); 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) (irr::scene::IMeshBuffer *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  (arg1)->append((irr::scene::IMeshBuffer const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getHardwareMappingHint_1Vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  E_HARDWARE_MAPPING result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = ((irr::scene::IMeshBuffer const *)arg1)->getHardwareMappingHint_Vertex();
  *(E_HARDWARE_MAPPING **)&jresult = new E_HARDWARE_MAPPING((const E_HARDWARE_MAPPING &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getHardwareMappingHint_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  E_HARDWARE_MAPPING result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = ((irr::scene::IMeshBuffer const *)arg1)->getHardwareMappingHint_Index();
  *(E_HARDWARE_MAPPING **)&jresult = new E_HARDWARE_MAPPING((const E_HARDWARE_MAPPING &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1setHardwareMappingHint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_BUFFER_TYPE arg3 ;
  E_HARDWARE_MAPPING *argp2 ;
  E_BUFFER_TYPE *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(E_BUFFER_TYPE **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setHardwareMappingHint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1setHardwareMappingHint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_HARDWARE_MAPPING *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setHardwareMappingHint(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1setDirty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  E_BUFFER_TYPE arg2 ;
  E_BUFFER_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  argp2 = *(E_BUFFER_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDirty(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1setDirty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  (arg1)->setDirty();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getChangedID_1Vertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getChangedID_Vertex();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshBuffer_1getChangedID_1Index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getChangedID_Index();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMeshBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IMeshBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1getMeshBufferCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  result = (irr::u32)((irr::scene::IMesh const *)arg1)->getMeshBufferCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1getMeshBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::IMeshBuffer *)((irr::scene::IMesh const *)arg1)->getMeshBuffer(arg2);
  *(irr::scene::IMeshBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1getMeshBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshBuffer *)((irr::scene::IMesh const *)arg1)->getMeshBuffer((irr::video::SMaterial const &)*arg2);
  *(irr::scene::IMeshBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1getBoundingBoxConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::IMesh const *)arg1)->getBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1setBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return ;
  } 
  (arg1)->setBoundingBox((irr::core::aabbox3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1setMaterialFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong flag, jboolean state) {
	irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  (arg1)->setMaterialFlag((E_MATERIAL_FLAG)flag,state);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1setHardwareMappingHint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_BUFFER_TYPE arg3 ;
  E_HARDWARE_MAPPING *argp2 ;
  E_BUFFER_TYPE *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(E_BUFFER_TYPE **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setHardwareMappingHint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1setHardwareMappingHint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_HARDWARE_MAPPING *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setHardwareMappingHint(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1setDirty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  E_BUFFER_TYPE arg2 ;
  E_BUFFER_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  argp2 = *(E_BUFFER_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDirty(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMesh_1setDirty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  (arg1)->setDirty();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMeshCache(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1addMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *arg3 = (irr::scene::IAnimatedMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return ;
  } 
  arg3 = *(irr::scene::IAnimatedMesh **)&jarg3; 
  (arg1)->addMesh((irr::io::path const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1removeMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  (arg1)->removeMesh((irr::scene::IMesh const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  result = (irr::u32)((irr::scene::IMeshCache const *)arg1)->getMeshCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::s32)((irr::scene::IMeshCache const *)arg1)->getMeshIndex((irr::scene::IMesh const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->getMeshByIndex(arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshByFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->getMeshByFilename((irr::io::path const &)*arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshFilename_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::io::path *) &((irr::scene::IMeshCache const *)arg1)->getMeshFilename(arg2);
  *(irr::io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshFilename_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::io::path *) &((irr::scene::IMeshCache const *)arg1)->getMeshFilename((irr::scene::IMesh const *)arg2);
  *(irr::io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1setMeshFilename_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setMeshFilename(arg2,(irr::io::path const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1setMeshFilename_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setMeshFilename((irr::scene::IMesh const *)arg2,(irr::io::path const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->getMeshByName((irr::io::path const &)*arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::SNamedPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::io::SNamedPath *) &((irr::scene::IMeshCache const *)arg1)->getMeshName(arg2);
  *(irr::io::SNamedPath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1getMeshName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::SNamedPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::io::SNamedPath *) &((irr::scene::IMeshCache const *)arg1)->getMeshName((irr::scene::IMesh const *)arg2);
  *(irr::io::SNamedPath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1renameMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->renameMesh(arg2,(irr::io::path const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1renameMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->renameMesh((irr::scene::IMesh const *)arg2,(irr::io::path const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1isMeshLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isMeshLoaded((irr::io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshCache_1clearUnusedMeshes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshCache **)&jarg1; 
  (arg1)->clearUnusedMeshes();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  result = (irr::u32)((irr::io::IAttributes const *)arg1)->getAttributeCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::c8 *)(arg1)->getAttributeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  E_ATTRIBUTE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeType((irr::c8 const *)arg2);
  *(E_ATTRIBUTE_TYPE **)&jresult = new E_ATTRIBUTE_TYPE((const E_ATTRIBUTE_TYPE &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  E_ATTRIBUTE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeType(arg2);
  *(E_ATTRIBUTE_TYPE **)&jresult = new E_ATTRIBUTE_TYPE((const E_ATTRIBUTE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeTypeString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (wchar_t *)(arg1)->getAttributeTypeString((irr::c8 const *)arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeTypeString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (wchar_t *)(arg1)->getAttributeTypeString(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1existsAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->existsAttribute((irr::c8 const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1findAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::s32)((irr::io::IAttributes const *)arg1)->findAttribute((irr::c8 const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = *(irr::io::IXMLReader **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  result = (bool)(arg1)->read(arg2,arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = *(irr::io::IXMLReader **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->read(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = *(irr::io::IXMLReader **)&jarg2; 
  result = (bool)(arg1)->read(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = *(irr::io::IXMLWriter **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  result = (bool)(arg1)->write(arg2,arg3,(wchar_t const *)arg4);
  jresult = (jboolean)result; 
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = *(irr::io::IXMLWriter **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->write(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = *(irr::io::IXMLWriter **)&jarg2; 
  result = (bool)(arg1)->write(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (irr::s32)jarg3; 
  (arg1)->addInt((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (irr::s32)jarg3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::s32)((irr::io::IAttributes const *)arg1)->getAttributeAsInt((irr::c8 const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::s32)((irr::io::IAttributes const *)arg1)->getAttributeAsInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (irr::f32)jarg3; 
  (arg1)->addFloat((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (irr::f32)jarg3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::f32)(arg1)->getAttributeAsFloat((irr::c8 const *)arg2);
  jresult = (jfloat)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::f32)(arg1)->getAttributeAsFloat(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addString((irr::c8 const *)arg2,(irr::c8 const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setAttribute((irr::c8 const *)arg2,(irr::c8 const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::string< char,irrAllocator< char > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsString((irr::c8 const *)arg2);
  *(irr::core::stringc **)&jresult = new irr::core::stringc((const irr::core::stringc &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->getAttributeAsString((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::string< char,irrAllocator< char > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsString(arg2);
  *(irr::core::stringc **)&jresult = new irr::core::stringc((const irr::core::stringc &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1S32_1C8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setAttribute(arg2,(irr::c8 const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addString_1C8_1WChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->addString((irr::c8 const *)arg2,(wchar_t const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1C8_1WChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->setAttribute((irr::c8 const *)arg2,(wchar_t const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsStringW_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::string< wchar_t,irrAllocator< wchar_t > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsStringW((irr::c8 const *)arg2);
  *(irr::core::stringw **)&jresult = new irr::core::stringw((const irr::core::stringw &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsStringW_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->getAttributeAsStringW((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsStringW_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::string< wchar_t,irrAllocator< wchar_t > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsStringW(arg2);
  *(irr::core::stringw **)&jresult = new irr::core::stringw((const irr::core::stringw &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1S32_1WChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->setAttribute(arg2,(wchar_t const *)arg3);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->addBinary((irr::c8 const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsBinaryData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->getAttributeAsBinaryData((irr::c8 const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsBinaryData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->getAttributeAsBinaryData(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->setAttribute(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > const & reference is null");
    return ;
  } 
  (arg1)->addArray((irr::c8 const *)arg2,(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > const &)*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > const & reference is null");
    return ;
  } 
  (arg1)->setAttribute((irr::c8 const *)arg2,(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > const &)*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::array< irr::core::string< wchar_t,irrAllocator< wchar_t > >,irrAllocator< irr::core::string< wchar_t,irrAllocator< wchar_t > > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsArray((irr::c8 const *)arg2);
  *(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > **)&jresult = new irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > >((const irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::array< irr::core::string< wchar_t,irrAllocator< wchar_t > >,irrAllocator< irr::core::string< wchar_t,irrAllocator< wchar_t > > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsArray(arg2);
  *(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > **)&jresult = new irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > >((const irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > const & reference is null");
    return ;
  } 
  (arg1)->setAttribute(arg2,(irr::core::array< irr::core::stringw,irrAllocator< irr::core::stringw > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->addBool((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->getAttributeAsBool((irr::c8 const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (bool)(arg1)->getAttributeAsBool(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addEnum_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(irr::c8 ***)&jarg4; 
  (arg1)->addEnum((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addEnum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 arg3 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::c8 ***)&jarg4; 
  (arg1)->addEnum((irr::c8 const *)arg2,arg3,(irr::c8 const *const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(irr::c8 ***)&jarg4; 
  (arg1)->setAttribute((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsEnumeration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::c8 *)(arg1)->getAttributeAsEnumeration((irr::c8 const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsEnumeration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 **arg3 = (irr::c8 **) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::c8 ***)&jarg3; 
  result = (irr::s32)(arg1)->getAttributeAsEnumeration((irr::c8 const *)arg2,(irr::c8 const *const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsEnumeration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 **arg3 = (irr::c8 **) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::c8 ***)&jarg3; 
  result = (irr::s32)(arg1)->getAttributeAsEnumeration(arg2,(irr::c8 const *const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsEnumeration_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::c8 *)(arg1)->getAttributeAsEnumeration(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeEnumerationLiteralsOfEnumeration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::array< irr::core::stringc,irrAllocator< irr::core::stringc > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::core::array< irr::core::stringc,irrAllocator< irr::core::stringc > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::stringc,irrAllocator< irr::core::stringc > > & reference is null");
    return ;
  } 
  (arg1)->getAttributeEnumerationLiteralsOfEnumeration((irr::c8 const *)arg2,*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeEnumerationLiteralsOfEnumeration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::stringc,irrAllocator< irr::core::stringc > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::array< irr::core::stringc,irrAllocator< irr::core::stringc > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::stringc,irrAllocator< irr::core::stringc > > & reference is null");
    return ;
  } 
  (arg1)->getAttributeEnumerationLiteralsOfEnumeration(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(irr::c8 ***)&jarg4; 
  (arg1)->setAttribute(arg2,(irr::c8 const *)arg3,(irr::c8 const *const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addColor((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsColor((irr::c8 const *)arg2);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsColor(arg2);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addColorf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColorf arg3 ;
  irr::video::SColorf *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::video::SColorf **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColorf");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addColorf((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColorf arg3 ;
  irr::video::SColorf *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::video::SColorf **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColorf");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsColorf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColorf result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsColorf((irr::c8 const *)arg2);
  *(irr::video::SColorf **)&jresult = new irr::video::SColorf((const irr::video::SColorf &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsColorf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColorf result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsColorf(arg2);
  *(irr::video::SColorf **)&jresult = new irr::video::SColorf((const irr::video::SColorf &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColorf arg3 ;
  irr::video::SColorf *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::video::SColorf **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColorf");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addVector3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector3df arg3 ;
  irr::core::vector3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::vector3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addVector3d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector3df arg3 ;
  irr::core::vector3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::vector3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsVector3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsVector3d((irr::c8 const *)arg2);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsVector3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsVector3d(arg2);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector3df arg3 ;
  irr::core::vector3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::vector3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addVector2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector2df arg3 ;
  irr::core::vector2df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::vector2df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addVector2d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector2df arg3 ;
  irr::core::vector2df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::vector2df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsVector2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector2df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsVector2d((irr::c8 const *)arg2);
  *(irr::core::vector2df **)&jresult = new irr::core::vector2df((const irr::core::vector2df &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsVector2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector2df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsVector2d(arg2);
  *(irr::core::vector2df **)&jresult = new irr::core::vector2df((const irr::core::vector2df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector2df arg3 ;
  irr::core::vector2df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::vector2df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addPosition2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::position2di arg3 ;
  irr::core::position2di *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::position2di **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addPosition2d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::position2di arg3 ;
  irr::core::position2di *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::position2di **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsPosition2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::position2di result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsPosition2d((irr::c8 const *)arg2);
  *(irr::core::position2di **)&jresult = new irr::core::position2di((const irr::core::position2di &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsPosition2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::position2di result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsPosition2d(arg2);
  *(irr::core::position2di **)&jresult = new irr::core::position2di((const irr::core::position2di &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::position2di arg3 ;
  irr::core::position2di *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::position2di **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::rect< irr::s32 > arg3 ;
  irr::core::rect< irr::s32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::rect< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::rect< irr::s32 >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addRect((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::rect< irr::s32 > arg3 ;
  irr::core::rect< irr::s32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::rect< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::rect< irr::s32 >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsRect((irr::c8 const *)arg2);
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsRect(arg2);
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::rect< irr::s32 > arg3 ;
  irr::core::rect< irr::s32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::rect< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::rect< irr::s32 >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addDimension2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > arg3 ;
  irr::core::dimension2d< irr::u32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::u32 >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addDimension2d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > arg3 ;
  irr::core::dimension2d< irr::u32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::u32 >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsDimension2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsDimension2d((irr::c8 const *)arg2);
  *(irr::core::dimension2d< irr::u32 > **)&jresult = new irr::core::dimension2d< irr::u32 >((const irr::core::dimension2d< irr::u32 > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsDimension2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsDimension2d(arg2);
  *(irr::core::dimension2d< irr::u32 > **)&jresult = new irr::core::dimension2d< irr::u32 >((const irr::core::dimension2d< irr::u32 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > arg3 ;
  irr::core::dimension2d< irr::u32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::u32 >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->addMatrix((irr::c8 const *)arg2,(irr::core::matrix4 const &)*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->setAttribute((irr::c8 const *)arg2,(irr::core::matrix4 const &)*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::CMatrix4< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsMatrix((irr::c8 const *)arg2);
  *(irr::core::matrix4 **)&jresult = new irr::core::matrix4((const irr::core::matrix4 &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::CMatrix4< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsMatrix(arg2);
  *(irr::core::matrix4 **)&jresult = new irr::core::matrix4((const irr::core::matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->setAttribute(arg2,(irr::core::matrix4 const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::quaternion arg3 ;
  irr::core::quaternion *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::quaternion **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addQuaternion((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::quaternion arg3 ;
  irr::core::quaternion *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::quaternion **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsQuaternion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsQuaternion((irr::c8 const *)arg2);
  *(irr::core::quaternion **)&jresult = new irr::core::quaternion((const irr::core::quaternion &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsQuaternion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::quaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsQuaternion(arg2);
  *(irr::core::quaternion **)&jresult = new irr::core::quaternion((const irr::core::quaternion &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::quaternion arg3 ;
  irr::core::quaternion *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::quaternion **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::quaternion");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addBox3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::aabbox3df arg3 ;
  irr::core::aabbox3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::aabbox3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::aabbox3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addBox3d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::aabbox3df arg3 ;
  irr::core::aabbox3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::aabbox3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::aabbox3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsBox3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::aabbox3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsBox3d((irr::c8 const *)arg2);
  *(irr::core::aabbox3df **)&jresult = new irr::core::aabbox3df((const irr::core::aabbox3df &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsBox3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::aabbox3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsBox3d(arg2);
  *(irr::core::aabbox3df **)&jresult = new irr::core::aabbox3df((const irr::core::aabbox3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::aabbox3df arg3 ;
  irr::core::aabbox3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::aabbox3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::aabbox3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addPlane3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::plane3df arg3 ;
  irr::core::plane3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::plane3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::plane3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addPlane3d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::plane3df arg3 ;
  irr::core::plane3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::plane3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::plane3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsPlane3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::plane3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsPlane3d((irr::c8 const *)arg2);
  *(irr::core::plane3df **)&jresult = new irr::core::plane3df((const irr::core::plane3df &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsPlane3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::plane3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsPlane3d(arg2);
  *(irr::core::plane3df **)&jresult = new irr::core::plane3df((const irr::core::plane3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::plane3df arg3 ;
  irr::core::plane3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::plane3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::plane3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addTriangle3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::triangle3df arg3 ;
  irr::core::triangle3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::triangle3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::triangle3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addTriangle3d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::triangle3df arg3 ;
  irr::core::triangle3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::triangle3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::triangle3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsTriangle3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::triangle3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsTriangle3d((irr::c8 const *)arg2);
  *(irr::core::triangle3df **)&jresult = new irr::core::triangle3df((const irr::core::triangle3df &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsTriangle3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::triangle3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsTriangle3d(arg2);
  *(irr::core::triangle3df **)&jresult = new irr::core::triangle3df((const irr::core::triangle3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::triangle3df arg3 ;
  irr::core::triangle3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::triangle3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::triangle3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addLine2d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::line2d< float > > arg3 ;
  irr::core::line2df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::line2df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line2df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addLine2d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::line2d< float > > arg3 ;
  irr::core::line2df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::line2df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line2df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsLine2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::line2d< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsLine2d((irr::c8 const *)arg2);
  *(irr::core::line2df **)&jresult = new irr::core::line2df((const irr::core::line2df &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsLine2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::line2d< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsLine2d(arg2);
  *(irr::core::line2df **)&jresult = new irr::core::line2df((const irr::core::line2df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::line2d< float > > arg3 ;
  irr::core::line2df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::line2df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line2df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addLine3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line3df arg3 ;
  irr::core::line3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::line3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->addLine3d((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line3df arg3 ;
  irr::core::line3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(irr::core::line3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsLine3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getAttributeAsLine3d((irr::c8 const *)arg2);
  *(irr::core::line3df **)&jresult = new irr::core::line3df((const irr::core::line3df &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsLine3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::line3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (arg1)->getAttributeAsLine3d(arg2);
  *(irr::core::line3df **)&jresult = new irr::core::line3df((const irr::core::line3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::line3df arg3 ;
  irr::core::line3df *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  argp3 = *(irr::core::line3df **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line3df");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::video::ITexture **)&jarg3; 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return ;
  } 
  (arg1)->addTexture((irr::c8 const *)arg2,arg3,(irr::io::path const &)*arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::video::ITexture **)&jarg3; 
  (arg1)->addTexture((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::video::ITexture **)&jarg3; 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return ;
  } 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3,(irr::io::path const &)*arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(irr::video::ITexture **)&jarg3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::video::ITexture *)(arg1)->getAttributeAsTexture((irr::c8 const *)arg2);
  *(irr::video::ITexture **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::video::ITexture *)(arg1)->getAttributeAsTexture(arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return ;
  } 
  (arg1)->setAttribute(arg2,arg3,(irr::io::path const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1addUserPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(void **)&jarg3; 
  (arg1)->addUserPointer((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_145(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(void **)&jarg3; 
  (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsUserPointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (void *)(arg1)->getAttributeAsUserPointer((irr::c8 const *)arg2);
  *(void **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1getAttributeAsUserPointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (void *)(arg1)->getAttributeAsUserPointer(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributes_1setAttribute_1_1SWIG_146(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IAttributes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SAttributeReadWriteOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::io::SAttributeReadWriteOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::io::SAttributeReadWriteOptions *)new irr::io::SAttributeReadWriteOptions();
  *(irr::io::SAttributeReadWriteOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAttributeReadWriteOptions_1Flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::io::SAttributeReadWriteOptions *arg1 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::SAttributeReadWriteOptions **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SAttributeReadWriteOptions_1Flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::io::SAttributeReadWriteOptions *arg1 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::SAttributeReadWriteOptions **)&jarg1; 
  result = (irr::s32) ((arg1)->Flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAttributeReadWriteOptions_1Filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::io::SAttributeReadWriteOptions *arg1 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  irr::fschar_t *arg2 = (irr::fschar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::SAttributeReadWriteOptions **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::fschar_t *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->Filename = (irr::fschar_t const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Filename, (const char *)arg2);
    } else {
      arg1->Filename = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_SAttributeReadWriteOptions_1Filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::io::SAttributeReadWriteOptions *arg1 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  irr::fschar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::SAttributeReadWriteOptions **)&jarg1; 
  result = (irr::fschar_t *) ((arg1)->Filename);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SAttributeReadWriteOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::SAttributeReadWriteOptions *arg1 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::SAttributeReadWriteOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributeExchangingObject_1serializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributeExchangingObject **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  ((irr::io::IAttributeExchangingObject const *)arg1)->serializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributeExchangingObject_1serializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IAttributeExchangingObject **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  ((irr::io::IAttributeExchangingObject const *)arg1)->serializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributeExchangingObject_1deserializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::io::IAttributeExchangingObject **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  (arg1)->deserializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAttributeExchangingObject_1deserializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IAttributeExchangingObject **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  (arg1)->deserializeAttributes(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IAttributeExchangingObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::io::IAttributeExchangingObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::io::IAttributeExchangingObject *)new irr::io::IAttributeExchangingObject();
  *(irr::io::IAttributeExchangingObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IAttributeExchangingObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IAttributeExchangingObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1getFrameCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  result = (irr::u32)((irr::scene::IAnimatedMesh const *)arg1)->getFrameCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1getAnimationSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  result = (irr::f32)((irr::scene::IAnimatedMesh const *)arg1)->getAnimationSpeed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1setAnimationSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setAnimationSpeed(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1getMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3,arg4,arg5);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1getMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3,arg4);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1getMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1getMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1getMeshType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  result = (irr::scene::E_ANIMATED_MESH_TYPE)((irr::scene::IAnimatedMesh const *)arg1)->getMeshType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IAnimatedMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IAnimatedMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD2_1getFrameLoop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::scene::EMD2_ANIMATION_TYPE arg2 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 *arg4 = 0 ;
  irr::s32 *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshMD2 **)&jarg1; 
  arg2 = (irr::scene::EMD2_ANIMATION_TYPE)jarg2; 
  arg3 = *(irr::s32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  arg5 = *(irr::s32 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  ((irr::scene::IAnimatedMeshMD2 const *)arg1)->getFrameLoop(arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD2_1getFrameLoop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 *arg4 = 0 ;
  irr::s32 *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshMD2 **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::s32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  arg5 = *(irr::s32 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::IAnimatedMeshMD2 const *)arg1)->getFrameLoop((irr::c8 const *)arg2,*arg3,*arg4,*arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD2_1getAnimationCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshMD2 **)&jarg1; 
  result = (irr::s32)((irr::scene::IAnimatedMeshMD2 const *)arg1)->getAnimationCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD2_1getAnimationName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshMD2 **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::c8 *)((irr::scene::IAnimatedMeshMD2 const *)arg1)->getAnimationName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IAnimatedMeshMD2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IAnimatedMeshMD2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1animateNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->animateNode(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1createClone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg3 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::scene::ISceneManager **)&jarg3; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createClone(arg2,arg3);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1createClone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createClone(arg2);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1isEventReceiverEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  result = (bool)((irr::scene::ISceneNodeAnimator const *)arg1)->isEventReceiverEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1OnEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  arg2 = *(SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->OnEvent((SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  ESCENE_NODE_ANIMATOR_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  result = ((irr::scene::ISceneNodeAnimator const *)arg1)->getType();
  *(ESCENE_NODE_ANIMATOR_TYPE **)&jresult = new ESCENE_NODE_ANIMATOR_TYPE((const ESCENE_NODE_ANIMATOR_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1hasFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  result = (bool)((irr::scene::ISceneNodeAnimator const *)arg1)->hasFinished();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ISceneNodeAnimator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneNodeAnimator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getTriangleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  result = (irr::s32)((irr::scene::ITriangleSelector const *)arg1)->getTriangleCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getTriangles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::matrix4 *arg5 = (irr::core::matrix4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  arg5 = *(irr::core::matrix4 **)&jarg5; 
  ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::matrix4 const *)arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getTriangles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getTriangles_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::aabbox3d< irr::f32 > *arg5 = 0 ;
  irr::core::matrix4 *arg6 = (irr::core::matrix4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  arg5 = *(irr::core::aabbox3d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< irr::f32 > const & reference is null");
    return ;
  } 
  arg6 = *(irr::core::matrix4 **)&jarg6; 
  ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::aabbox3d< irr::f32 > const &)*arg5,(irr::core::matrix4 const *)arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getTriangles_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::aabbox3d< irr::f32 > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  arg5 = *(irr::core::aabbox3d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< irr::f32 > const & reference is null");
    return ;
  } 
  ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::aabbox3d< irr::f32 > const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getTriangles_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::line3d< irr::f32 > *arg5 = 0 ;
  irr::core::matrix4 *arg6 = (irr::core::matrix4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  arg5 = *(irr::core::line3d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > const & reference is null");
    return ;
  } 
  arg6 = *(irr::core::matrix4 **)&jarg6; 
  ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::line3d< irr::f32 > const &)*arg5,(irr::core::matrix4 const *)arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getTriangles_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::line3d< irr::f32 > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::s32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return ;
  } 
  arg5 = *(irr::core::line3d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > const & reference is null");
    return ;
  } 
  ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::line3d< irr::f32 > const &)*arg5);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getSceneNodeForTriangle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::ISceneNode *)((irr::scene::ITriangleSelector const *)arg1)->getSceneNodeForTriangle(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getSelectorCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  result = (irr::u32)((irr::scene::ITriangleSelector const *)arg1)->getSelectorCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITriangleSelector_1getSelector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::ITriangleSelector *)(arg1)->getSelector(arg2);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ITriangleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ITriangleSelector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1EventType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::EEVENT_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  arg2 = (irr::EEVENT_TYPE)jarg2; 
  if (arg1) (arg1)->EventType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1EventType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::EEVENT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::EEVENT_TYPE) ((arg1)->EventType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getKeyInputChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (int)irr_SEvent_getKeyInputChar(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getKeyInputKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::EKEY_CODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::EKEY_CODE)irr_SEvent_getKeyInputKey(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1isKeyInputPressedDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (bool)irr_SEvent_isKeyInputPressedDown(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1isKeyInputShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (bool)irr_SEvent_isKeyInputShift(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1isKeyInputCtrl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (bool)irr_SEvent_isKeyInputCtrl(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getMouseInputX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::s32)irr_SEvent_getMouseInputX(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getMouseInputY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::s32)irr_SEvent_getMouseInputY(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getMouseInputWheel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::f32)irr_SEvent_getMouseInputWheel(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getMouseInputEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::EMOUSE_INPUT_EVENT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::EMOUSE_INPUT_EVENT)irr_SEvent_getMouseInputEvent(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getGUIEventCaller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::gui::IGUIElement *)irr_SEvent_getGUIEventCaller(arg1);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getGUIEventType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::gui::EGUI_EVENT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::gui::EGUI_EVENT_TYPE)irr_SEvent_getGUIEventType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getLogEventText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::c8 *)irr_SEvent_getLogEventText(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getLogEventLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::ELOG_LEVEL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::ELOG_LEVEL)irr_SEvent_getLogEventLevel(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getUserEventData1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::s32)irr_SEvent_getUserEventData1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SEvent_1getUserEventData2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEvent **)&jarg1; 
  result = (irr::s32)irr_SEvent_getUserEventData2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::SEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::SEvent *)new irr::SEvent();
  *(irr::SEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::SEvent *arg1 = (irr::SEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::SEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IEventReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::IEventReceiver *arg1 = (irr::IEventReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::IEventReceiver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IEventReceiver_1OnEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::IEventReceiver *arg1 = (irr::IEventReceiver *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::IEventReceiver **)&jarg1; 
  arg2 = *(irr::SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->OnEvent((irr::SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IEventReceiver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::IEventReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::IEventReceiver *)new SwigDirector_IEventReceiver(jenv);
  *(irr::IEventReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IEventReceiver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  irr::IEventReceiver *obj = *((irr::IEventReceiver **)&objarg);
  (void)jcls;
  SwigDirector_IEventReceiver *director = dynamic_cast<SwigDirector_IEventReceiver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IEventReceiver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  irr::IEventReceiver *obj = *((irr::IEventReceiver **)&objarg);
  SwigDirector_IEventReceiver *director = dynamic_cast<SwigDirector_IEventReceiver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Joystick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->Joystick = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Joystick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  result = (irr::u8) ((arg1)->Joystick);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2; 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  result = (irr::core::stringc *)& ((arg1)->Name);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Buttons_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->Buttons = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Buttons_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  result = (irr::u32) ((arg1)->Buttons);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Axes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->Axes = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1Axes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  result = (irr::u32) ((arg1)->Axes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1PovHat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->PovHat)) *(int*)(void*)&((arg1)->PovHat) = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SJoystickInfo_1PovHat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  result = (int) ((arg1)->PovHat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SJoystickInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::SJoystickInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::SJoystickInfo *)new irr::SJoystickInfo();
  *(irr::SJoystickInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SJoystickInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::SJoystickInfo *arg1 = (irr::SJoystickInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::SJoystickInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->getMesh((irr::io::path const &)*arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->getMesh(arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getMeshCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshCache *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IMeshCache *)(arg1)->getMeshCache();
  *(irr::scene::IMeshCache **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getVideoDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::video::IVideoDriver *)(arg1)->getVideoDriver();
  *(irr::video::IVideoDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getGUIEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::gui::IGUIEnvironment *)(arg1)->getGUIEnvironment();
  *(irr::gui::IGUIEnvironment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IFileSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::io::IFileSystem *)(arg1)->getFileSystem();
  *(irr::io::IFileSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::core::vector3df *arg10 = 0 ;
  irr::video::SColor const *argp6 ;
  irr::video::SColor const *argp7 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::core::vector3df **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg9 = *(irr::core::vector3df **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg10 = *(irr::core::vector3df **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9,(irr::core::vector3df const &)*arg10);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::video::SColor const *argp6 ;
  irr::video::SColor const *argp7 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::core::vector3df **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg9 = *(irr::core::vector3df **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::video::SColor const *argp6 ;
  irr::video::SColor const *argp7 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::core::vector3df **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::video::SColor const *argp6 ;
  irr::video::SColor const *argp7 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg7 = *argp7; 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor const *argp6 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg6 = *argp6; 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2);
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightSceneNode_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode();
  *(irr::scene::IVolumeLightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCubeSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCubeSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCubeSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCubeSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCubeSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCubeSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCubeSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode();
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = *(irr::core::vector3df **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,(irr::core::vector3df const &)*arg8);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereSceneNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode();
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addAnimatedMeshSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jboolean jarg8) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool arg8 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = jarg8 ? true : false; 
  result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
  *(irr::scene::IAnimatedMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addAnimatedMeshSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
  *(irr::scene::IAnimatedMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addAnimatedMeshSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::IAnimatedMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addAnimatedMeshSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::IAnimatedMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addAnimatedMeshSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4);
  *(irr::scene::IAnimatedMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addAnimatedMeshSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3);
  *(irr::scene::IAnimatedMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addAnimatedMeshSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2);
  *(irr::scene::IAnimatedMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addMeshSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jboolean jarg8) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool arg8 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = jarg8 ? true : false; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addMeshSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addMeshSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addMeshSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addMeshSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addMeshSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addMeshSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::core::vector3df *arg10 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg10_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = *(irr::scene::ISceneNode **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  arg8 = *(irr::core::vector3df **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg9 = *(irr::core::vector3df **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg10 = *(irr::core::vector3df **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9,(irr::core::vector3df const &)*arg10);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = *(irr::scene::ISceneNode **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  arg8 = *(irr::core::vector3df **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg9 = *(irr::core::vector3df **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = *(irr::scene::ISceneNode **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  arg8 = *(irr::core::vector3df **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = *(irr::scene::ISceneNode **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = *(irr::scene::ISceneNode **)&jarg6; 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addWaterSurfaceSceneNode_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctreeSceneNode_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addOctTreeSceneNode_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,arg5);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode();
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6, jfloat jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::f32 arg7 ;
  bool arg8 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeMaya_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya();
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5, jlongArray jarg6, jint jarg7, jboolean jarg8, jfloat jarg9, jboolean jarg10, jboolean jarg11) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::f32 arg9 ;
  bool arg10 ;
  bool arg11 ;
  jlong *jarr6 ;
  jsize sz6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return 0;
    }
    
    arg6 = new irr::SKeyMap[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return 0;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::SKeyMap **)&jarr6[i];
    }
  }
  arg7 = (irr::s32)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (irr::f32)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::SKeyMap **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5, jlongArray jarg6, jint jarg7, jboolean jarg8, jfloat jarg9, jboolean jarg10) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::f32 arg9 ;
  bool arg10 ;
  jlong *jarr6 ;
  jsize sz6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return 0;
    }
    
    arg6 = new irr::SKeyMap[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return 0;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::SKeyMap **)&jarr6[i];
    }
  }
  arg7 = (irr::s32)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (irr::f32)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::SKeyMap **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5, jlongArray jarg6, jint jarg7, jboolean jarg8, jfloat jarg9) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::f32 arg9 ;
  jlong *jarr6 ;
  jsize sz6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return 0;
    }
    
    arg6 = new irr::SKeyMap[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return 0;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::SKeyMap **)&jarr6[i];
    }
  }
  arg7 = (irr::s32)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (irr::f32)jarg9; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::SKeyMap **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5, jlongArray jarg6, jint jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  jlong *jarr6 ;
  jsize sz6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return 0;
    }
    
    arg6 = new irr::SKeyMap[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return 0;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::SKeyMap **)&jarr6[i];
    }
  }
  arg7 = (irr::s32)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::SKeyMap **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5, jlongArray jarg6, jint jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  jlong *jarr6 ;
  jsize sz6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return 0;
    }
    
    arg6 = new irr::SKeyMap[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return 0;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::SKeyMap **)&jarr6[i];
    }
  }
  arg7 = (irr::s32)jarg7; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::SKeyMap **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5, jlongArray jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  jlong *jarr6 ;
  jsize sz6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return 0;
    }
    
    arg6 = new irr::SKeyMap[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return 0;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::SKeyMap **)&jarr6[i];
    }
  }
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::SKeyMap **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS();
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addLightSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColorf arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::video::SColorf *argp4 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp4 = *(irr::video::SColorf **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColorf");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,arg6);
  *(irr::scene::ILightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addLightSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColorf arg4 ;
  irr::f32 arg5 ;
  irr::video::SColorf *argp4 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp4 = *(irr::video::SColorf **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColorf");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3,arg4,arg5);
  *(irr::scene::ILightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addLightSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColorf arg4 ;
  irr::video::SColorf *argp4 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp4 = *(irr::video::SColorf **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColorf");
    return 0;
  }
  arg4 = *argp4; 
  result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3,arg4);
  *(irr::scene::ILightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addLightSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3);
  *(irr::scene::ILightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addLightSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2);
  *(irr::scene::ILightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addLightSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode();
  *(irr::scene::ILightSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::video::SColor *argp6 ;
  irr::video::SColor *argp7 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7);
  *(irr::scene::IBillboardSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor *argp6 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg6 = *argp6; 
  result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
  *(irr::scene::IBillboardSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4,arg5);
  *(irr::scene::IBillboardSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4);
  *(irr::scene::IBillboardSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3);
  *(irr::scene::IBillboardSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2);
  *(irr::scene::IBillboardSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode();
  *(irr::scene::IBillboardSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyBoxSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg4 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg7 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg9 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  arg4 = *(irr::video::ITexture **)&jarg4; 
  arg5 = *(irr::video::ITexture **)&jarg5; 
  arg6 = *(irr::video::ITexture **)&jarg6; 
  arg7 = *(irr::video::ITexture **)&jarg7; 
  arg8 = *(irr::scene::ISceneNode **)&jarg8; 
  arg9 = (irr::s32)jarg9; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyBoxSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyBoxSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg4 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg7 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  arg4 = *(irr::video::ITexture **)&jarg4; 
  arg5 = *(irr::video::ITexture **)&jarg5; 
  arg6 = *(irr::video::ITexture **)&jarg6; 
  arg7 = *(irr::video::ITexture **)&jarg7; 
  arg8 = *(irr::scene::ISceneNode **)&jarg8; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyBoxSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyBoxSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg4 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg7 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  arg4 = *(irr::video::ITexture **)&jarg4; 
  arg5 = *(irr::video::ITexture **)&jarg5; 
  arg6 = *(irr::video::ITexture **)&jarg6; 
  arg7 = *(irr::video::ITexture **)&jarg7; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyBoxSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jlong jarg8, jobject jarg8_, jint jarg9) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg9 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  arg8 = *(irr::scene::ISceneNode **)&jarg8; 
  arg9 = (irr::s32)jarg9; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  arg8 = *(irr::scene::ISceneNode **)&jarg8; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSkyDomeSceneNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addParticleSystemSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
  *(irr::scene::IParticleSystemSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addParticleSystemSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::IParticleSystemSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addParticleSystemSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::IParticleSystemSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addParticleSystemSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4);
  *(irr::scene::IParticleSystemSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addParticleSystemSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3);
  *(irr::scene::IParticleSystemSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addParticleSystemSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2);
  *(irr::scene::IParticleSystemSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addParticleSystemSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode();
  *(irr::scene::IParticleSystemSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10, jint jarg11, jboolean jarg12) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  bool arg12 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = (irr::scene::E_TERRAIN_PATCH_SIZE)jarg10; 
  arg11 = (irr::s32)jarg11; 
  arg12 = jarg12 ? true : false; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11,arg12);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10, jint jarg11) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = (irr::scene::E_TERRAIN_PATCH_SIZE)jarg10; 
  arg11 = (irr::s32)jarg11; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = (irr::scene::E_TERRAIN_PATCH_SIZE)jarg10; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10, jint jarg11, jboolean jarg12) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  bool arg12 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = (irr::scene::E_TERRAIN_PATCH_SIZE)jarg10; 
  arg11 = (irr::s32)jarg11; 
  arg12 = jarg12 ? true : false; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11,arg12);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10, jint jarg11) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = (irr::scene::E_TERRAIN_PATCH_SIZE)jarg10; 
  arg11 = (irr::s32)jarg11; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = (irr::scene::E_TERRAIN_PATCH_SIZE)jarg10; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jint jarg9) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (irr::s32)jarg9; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::video::SColor *argp8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainSceneNode_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2);
  *(irr::scene::ITerrainSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addQuake3SceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::quake3::IShader *arg3 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = *(irr::scene::quake3::IShader **)&jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addQuake3SceneNode((irr::scene::IMeshBuffer const *)arg2,(irr::scene::quake3::IShader const *)arg3,arg4,arg5);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addQuake3SceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::quake3::IShader *arg3 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = *(irr::scene::quake3::IShader **)&jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addQuake3SceneNode((irr::scene::IMeshBuffer const *)arg2,(irr::scene::quake3::IShader const *)arg3,arg4);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addQuake3SceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::quake3::IShader *arg3 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = *(irr::scene::quake3::IShader **)&jarg3; 
  result = (irr::scene::IMeshSceneNode *)(arg1)->addQuake3SceneNode((irr::scene::IMeshBuffer const *)arg2,(irr::scene::quake3::IShader const *)arg3);
  *(irr::scene::IMeshSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addEmptySceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->addEmptySceneNode(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addEmptySceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->addEmptySceneNode(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addEmptySceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ISceneNode *)(arg1)->addEmptySceneNode();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addDummyTransformationSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IDummyTransformationSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::IDummyTransformationSceneNode *)(arg1)->addDummyTransformationSceneNode(arg2,arg3);
  *(irr::scene::IDummyTransformationSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addDummyTransformationSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IDummyTransformationSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::IDummyTransformationSceneNode *)(arg1)->addDummyTransformationSceneNode(arg2);
  *(irr::scene::IDummyTransformationSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addDummyTransformationSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IDummyTransformationSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IDummyTransformationSceneNode *)(arg1)->addDummyTransformationSceneNode();
  *(irr::scene::IDummyTransformationSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTextSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::video::SColor *argp4 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::scene::ISceneNode **)&jarg5; 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = (irr::s32)jarg7; 
  result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4,arg5,(irr::core::vector3df const &)*arg6,arg7);
  *(irr::scene::ITextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTextSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::video::SColor *argp4 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::scene::ISceneNode **)&jarg5; 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::ITextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTextSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::video::SColor *argp4 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::scene::ISceneNode **)&jarg5; 
  result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4,arg5);
  *(irr::scene::ITextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTextSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4);
  *(irr::scene::ITextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTextSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3);
  *(irr::scene::ITextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardTextSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::video::SColor arg8 ;
  irr::video::SColor arg9 ;
  irr::video::SColor *argp8 ;
  irr::video::SColor *argp9 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = (irr::s32)jarg7; 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  argp9 = *(irr::video::SColor **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg9 = *argp9; 
  result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6,arg7,arg8,arg9);
  *(irr::scene::IBillboardTextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardTextSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::video::SColor arg8 ;
  irr::video::SColor *argp8 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = (irr::s32)jarg7; 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg8 = *argp8; 
  result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6,arg7,arg8);
  *(irr::scene::IBillboardTextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardTextSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = (irr::s32)jarg7; 
  result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6,arg7);
  *(irr::scene::IBillboardTextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardTextSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::IBillboardTextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardTextSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5);
  *(irr::scene::IBillboardTextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardTextSceneNode_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4);
  *(irr::scene::IBillboardTextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addBillboardTextSceneNode_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3);
  *(irr::scene::IBillboardTextSceneNode **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addHillPlaneMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_, jfloat jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg6 ;
  irr::core::dimension2d< irr::f32 > *arg7 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg8 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::dimension2d< irr::u32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg5 = *(irr::video::SMaterial **)&jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = *(irr::core::dimension2d< irr::f32 > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg8 = *(irr::core::dimension2d< irr::f32 > **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5,arg6,(irr::core::dimension2d< irr::f32 > const &)*arg7,(irr::core::dimension2d< irr::f32 > const &)*arg8);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addHillPlaneMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_, jfloat jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg6 ;
  irr::core::dimension2d< irr::f32 > *arg7 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::dimension2d< irr::u32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg5 = *(irr::video::SMaterial **)&jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = *(irr::core::dimension2d< irr::f32 > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5,arg6,(irr::core::dimension2d< irr::f32 > const &)*arg7);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addHillPlaneMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_, jfloat jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg6 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::dimension2d< irr::u32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg5 = *(irr::video::SMaterial **)&jarg5; 
  arg6 = (irr::f32)jarg6; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5,arg6);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addHillPlaneMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::dimension2d< irr::u32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg5 = *(irr::video::SMaterial **)&jarg5; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addHillPlaneMesh_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::dimension2d< irr::f32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::dimension2d< irr::u32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::core::dimension2d< irr::u32 > *arg7 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::IImage **)&jarg3; 
  arg4 = *(irr::video::IImage **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg6 = (irr::f32)jarg6; 
  arg7 = *(irr::core::dimension2d< irr::u32 > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,arg6,(irr::core::dimension2d< irr::u32 > const &)*arg7);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jfloat jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::IImage **)&jarg3; 
  arg4 = *(irr::video::IImage **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg6 = (irr::f32)jarg6; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,arg6);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::IImage **)&jarg3; 
  arg4 = *(irr::video::IImage **)&jarg4; 
  arg5 = *(irr::core::dimension2d< irr::f32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addTerrainMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::IImage **)&jarg3; 
  arg4 = *(irr::video::IImage **)&jarg4; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jfloat jarg10) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  arg10 = (irr::f32)jarg10; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  arg8 = (irr::f32)jarg8; 
  arg9 = (irr::f32)jarg9; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jfloat jarg7, jfloat jarg8) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::f32 arg8 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  arg8 = (irr::f32)jarg8; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addArrowMesh_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2,arg3,arg4,arg5);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2,arg3,arg4);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2,arg3);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSphereMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor const *argp5 ;
  irr::video::SColor const *argp6 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg6 = *argp6; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor const *argp5 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor const");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3,arg4,arg5);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3,arg4);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addVolumeLightMesh_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getRootSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ISceneNode *)(arg1)->getRootSceneNode();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeFromId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromId(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeFromId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromId(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeFromName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromName((irr::c8 const *)arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeFromName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromName((irr::c8 const *)arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeFromType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromType(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeFromType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromType(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodesFromType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::core::array< irr::scene::ISceneNode *,irrAllocator< irr::scene::ISceneNode * > > *arg3 = 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  arg3 = *(irr::core::array< irr::scene::ISceneNode *,irrAllocator< irr::scene::ISceneNode * > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::scene::ISceneNode *,irrAllocator< irr::scene::ISceneNode * > > & reference is null");
    return ;
  } 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  (arg1)->getSceneNodesFromType(arg2,*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodesFromType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::core::array< irr::scene::ISceneNode *,irrAllocator< irr::scene::ISceneNode * > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  arg3 = *(irr::core::array< irr::scene::ISceneNode *,irrAllocator< irr::scene::ISceneNode * > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::scene::ISceneNode *,irrAllocator< irr::scene::ISceneNode * > > & reference is null");
    return ;
  } 
  (arg1)->getSceneNodesFromType(arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getActiveCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ICameraSceneNode *)((irr::scene::ISceneManager const *)arg1)->getActiveCamera();
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1setActiveCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ICameraSceneNode **)&jarg2; 
  (arg1)->setActiveCamera(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1setShadowColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setShadowColor(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1setShadowColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  (arg1)->setShadowColor();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getShadowColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = ((irr::scene::ISceneManager const *)arg1)->getShadowColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1registerNodeForRendering_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::E_SCENE_NODE_RENDER_PASS arg3 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::scene::E_SCENE_NODE_RENDER_PASS)jarg3; 
  result = (irr::u32)(arg1)->registerNodeForRendering(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1registerNodeForRendering_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::u32)(arg1)->registerNodeForRendering(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1drawAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  (arg1)->drawAll();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createRotationAnimator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createRotationAnimator((irr::core::vector3df const &)*arg2);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyCircleAnimator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::f32)jarg6; 
  arg7 = (irr::f32)jarg7; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyCircleAnimator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jfloat jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::f32)jarg6; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyCircleAnimator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyCircleAnimator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyCircleAnimator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyCircleAnimator_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyCircleAnimator_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator();
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyStraightAnimator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyStraightAnimator((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,arg6);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyStraightAnimator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  bool arg5 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyStraightAnimator((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFlyStraightAnimator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyStraightAnimator((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createTextureAnimator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createTextureAnimator((irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const &)*arg2,arg3,arg4);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createTextureAnimator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createTextureAnimator((irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const &)*arg2,arg3);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createDeleteAnimator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createDeleteAnimator(arg2);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createCollisionResponseAnimator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jfloat jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg7 = (irr::f32)jarg7; 
  result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,arg7);
  *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createCollisionResponseAnimator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createCollisionResponseAnimator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createCollisionResponseAnimator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4);
  *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createCollisionResponseAnimator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3);
  *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFollowSplineAnimator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg3,arg4,arg5,arg6,arg7);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFollowSplineAnimator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg3,arg4,arg5,arg6);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFollowSplineAnimator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg3,arg4,arg5);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFollowSplineAnimator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f32)jarg4; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg3,arg4);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createFollowSplineAnimator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg3);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createTriangleSelector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createTriangleSelector(arg2,arg3);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createTriangleSelector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createTriangleSelector(arg2);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createTriangleSelectorFromBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createTriangleSelectorFromBoundingBox(arg2);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createOctreeTriangleSelector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createOctreeTriangleSelector(arg2,arg3,arg4);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createOctreeTriangleSelector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createOctreeTriangleSelector(arg2,arg3);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createOctTreeTriangleSelector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createOctTreeTriangleSelector(arg2,arg3,arg4);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createOctTreeTriangleSelector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createOctTreeTriangleSelector(arg2,arg3);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createMetaTriangleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMetaTriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IMetaTriangleSelector *)(arg1)->createMetaTriangleSelector();
  *(irr::scene::IMetaTriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createTerrainTriangleSelector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITerrainSceneNode *arg2 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ITerrainSceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createTerrainTriangleSelector(arg2,arg3);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createTerrainTriangleSelector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITerrainSceneNode *arg2 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ITerrainSceneNode **)&jarg2; 
  result = (irr::scene::ITriangleSelector *)(arg1)->createTerrainTriangleSelector(arg2);
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addExternalMeshLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshLoader *arg2 = (irr::scene::IMeshLoader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::IMeshLoader **)&jarg2; 
  (arg1)->addExternalMeshLoader(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getMeshLoaderCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getMeshLoaderCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getMeshLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMeshLoader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::IMeshLoader *)((irr::scene::ISceneManager const *)arg1)->getMeshLoader(arg2);
  *(irr::scene::IMeshLoader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addExternalSceneLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneLoader *arg2 = (irr::scene::ISceneLoader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneLoader **)&jarg2; 
  (arg1)->addExternalSceneLoader(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneLoaderCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getSceneLoaderCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneLoader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::ISceneLoader *)((irr::scene::ISceneManager const *)arg1)->getSceneLoader(arg2);
  *(irr::scene::ISceneLoader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneCollisionManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneCollisionManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ISceneCollisionManager *)(arg1)->getSceneCollisionManager();
  *(irr::scene::ISceneCollisionManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getMeshManipulator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshManipulator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::IMeshManipulator *)(arg1)->getMeshManipulator();
  *(irr::scene::IMeshManipulator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addToDeletionQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->addToDeletionQueue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1postEventFromUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->postEventFromUser((irr::SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::io::IAttributes *)(arg1)->getParameters();
  *(irr::io::IAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeRenderPass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::E_SCENE_NODE_RENDER_PASS result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::E_SCENE_NODE_RENDER_PASS)((irr::scene::ISceneManager const *)arg1)->getSceneNodeRenderPass();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getDefaultSceneNodeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ISceneNodeFactory *)(arg1)->getDefaultSceneNodeFactory();
  *(irr::scene::ISceneNodeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1registerSceneNodeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeFactory *arg2 = (irr::scene::ISceneNodeFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNodeFactory **)&jarg2; 
  (arg1)->registerSceneNodeFactory(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getRegisteredSceneNodeFactoryCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getRegisteredSceneNodeFactoryCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNodeFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::ISceneNodeFactory *)(arg1)->getSceneNodeFactory(arg2);
  *(irr::scene::ISceneNodeFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getDefaultSceneNodeAnimatorFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimatorFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ISceneNodeAnimatorFactory *)(arg1)->getDefaultSceneNodeAnimatorFactory();
  *(irr::scene::ISceneNodeAnimatorFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1registerSceneNodeAnimatorFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg2 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg2; 
  (arg1)->registerSceneNodeAnimatorFactory(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getRegisteredSceneNodeAnimatorFactoryCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getRegisteredSceneNodeAnimatorFactoryCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeAnimatorFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNodeAnimatorFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::ISceneNodeAnimatorFactory *)(arg1)->getSceneNodeAnimatorFactory(arg2);
  *(irr::scene::ISceneNodeAnimatorFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getSceneNodeTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  result = (irr::c8 *)(arg1)->getSceneNodeTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getAnimatorTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  ESCENE_NODE_ANIMATOR_TYPE arg2 ;
  ESCENE_NODE_ANIMATOR_TYPE *argp2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  argp2 = *(ESCENE_NODE_ANIMATOR_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ESCENE_NODE_ANIMATOR_TYPE");
    return 0;
  }
  arg2 = *argp2; 
  result = (irr::c8 *)(arg1)->getAnimatorTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((char const *)arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((char const *)arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createSceneNodeAnimator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator((char const *)arg2,arg3);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createSceneNodeAnimator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator((char const *)arg2);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createNewSceneManager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (irr::scene::ISceneManager *)(arg1)->createNewSceneManager(arg2);
  *(irr::scene::ISceneManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createNewSceneManager_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::scene::ISceneManager *)(arg1)->createNewSceneManager();
  *(irr::scene::ISceneManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  result = (bool)(arg1)->saveScene((irr::io::path const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  result = (bool)(arg1)->saveScene((irr::io::path const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->saveScene((irr::io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IWriteFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  result = (bool)(arg1)->saveScene(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IWriteFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  result = (bool)(arg1)->saveScene(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IWriteFile **)&jarg2; 
  result = (bool)(arg1)->saveScene(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::io::path *arg3 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg4 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IXMLWriter **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::scene::ISceneUserDataSerializer **)&jarg4; 
  arg5 = *(irr::scene::ISceneNode **)&jarg5; 
  result = (bool)(arg1)->saveScene(arg2,(irr::io::path const &)*arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::io::path *arg3 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg4 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IXMLWriter **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::scene::ISceneUserDataSerializer **)&jarg4; 
  result = (bool)(arg1)->saveScene(arg2,(irr::io::path const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1saveScene_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IXMLWriter **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->saveScene(arg2,(irr::io::path const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1loadScene_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  result = (bool)(arg1)->loadScene((irr::io::path const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1loadScene_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  result = (bool)(arg1)->loadScene((irr::io::path const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1loadScene_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->loadScene((irr::io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1loadScene_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  arg4 = *(irr::scene::ISceneNode **)&jarg4; 
  result = (bool)(arg1)->loadScene(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1loadScene_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::scene::ISceneUserDataSerializer **)&jarg3; 
  result = (bool)(arg1)->loadScene(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1loadScene_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (bool)(arg1)->loadScene(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createMeshWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  EMESH_WRITER_TYPE arg2 ;
  EMESH_WRITER_TYPE *argp2 ;
  irr::scene::IMeshWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  argp2 = *(EMESH_WRITER_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EMESH_WRITER_TYPE");
    return 0;
  }
  arg2 = *argp2; 
  result = (irr::scene::IMeshWriter *)(arg1)->createMeshWriter(arg2);
  *(irr::scene::IMeshWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createSkinnedMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  ISkinnedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (ISkinnedMesh *)(arg1)->createSkinnedMesh();
  *(ISkinnedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1setAmbientLight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColorf const & reference is null");
    return ;
  } 
  (arg1)->setAmbientLight((irr::video::SColorf const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getAmbientLight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColorf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::video::SColorf *) &((irr::scene::ISceneManager const *)arg1)->getAmbientLight();
  *(irr::video::SColorf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1setLightManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ILightManager *arg2 = (irr::scene::ILightManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ILightManager **)&jarg2; 
  (arg1)->setLightManager(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getGeometryCreator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  IGeometryCreator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (IGeometryCreator *)((irr::scene::ISceneManager const *)arg1)->getGeometryCreator();
  *(IGeometryCreator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1isCulled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (bool)((irr::scene::ISceneManager const *)arg1)->isCulled((irr::scene::ISceneNode const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1createKeyMaps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlongArray jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  int arg2 ;
  irr::SKeyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::SKeyMap *)irr_scene_ISceneManager_createKeyMaps(arg1,arg2);
  *(irr::SKeyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addToKeyMaps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlongArray jarg3, jint jarg4) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::SKeyMap *arg2 = (irr::SKeyMap *) 0 ;
  irr::SKeyMap *arg3 = (irr::SKeyMap *) 0 ;
  int arg4 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jlong *jarr3 ;
  jsize sz3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::SKeyMap[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::SKeyMap **)&jarr2[i];
    }
  }
  {
    int i;
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz3 = jenv->GetArrayLength(jarg3);
    jarr3 = jenv->GetLongArrayElements(jarg3, 0);
    if (!jarr3) {
      return ;
    }
    
    arg3 = new irr::SKeyMap[sz3];
    
    
    
    if (!arg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz3; i++) {
      arg3[i] = **(irr::SKeyMap **)&jarr3[i];
    }
  }
  arg4 = (int)jarg4; 
  irr_scene_ISceneManager_addToKeyMaps(arg1,arg2,arg3,arg4);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::SKeyMap **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  {
    int i;
    for (i=0; i<sz3; i++) {
      jarr3[i] = 0;
      *(irr::SKeyMap **)&jarr3[i] = &arg3[i];
    }
    jenv->ReleaseLongArrayElements(jarg3, jarr3, 0);
  }
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlongArray JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1getCustomDefaultKeymap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::SKeyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  result = (irr::SKeyMap *)irr_scene_ISceneManager_getCustomDefaultKeymap(arg1);
  *(irr::SKeyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneManager_1addCameraSceneNodeFPS_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jint jarg5, jintArray jarg6, jintArray jarg7, jint jarg8) {
  jlong jresult = 0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  int *arg6 ;
  int *arg7 ;
  irr::s32 arg8 ;
  jint *jarr6 ;
  jint *jarr7 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr6, &arg6, jarg6)) return 0; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr7, &arg7, jarg7)) return 0; 
  arg8 = (irr::s32)jarg8; 
  result = (irr::scene::ICameraSceneNode *)irr_scene_ISceneManager_addCameraSceneNodeFPS__SWIG_11(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::scene::ICameraSceneNode **)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr6, arg6, jarg6); 
  SWIG_JavaArrayArgoutInt(jenv, jarr7, arg7, jarg7); 
  delete [] arg6; 
  delete [] arg7; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ISceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ISceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg2 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneManager **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)new SwigDirector_ISceneNode(jenv,arg1,arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ISceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg2 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneManager **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)new SwigDirector_ISceneNode(jenv,arg1,arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ISceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg2 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneManager **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)new SwigDirector_ISceneNode(jenv,arg1,arg2,arg3,(irr::core::vector3df const &)*arg4);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ISceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg2 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneManager **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::ISceneNode *)new SwigDirector_ISceneNode(jenv,arg1,arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ISceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg2 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneManager **)&jarg2; 
  result = (irr::scene::ISceneNode *)new SwigDirector_ISceneNode(jenv,arg1,arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1OnRegisterSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->OnRegisterSceneNode();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1OnRegisterSceneNodeSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->irr::scene::ISceneNode::OnRegisterSceneNode();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1OnAnimate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->OnAnimate(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1OnAnimateSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->irr::scene::ISceneNode::OnAnimate(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1render(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->render();
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::c8 *)((irr::scene::ISceneNode const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((irr::c8 const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::stringc *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return ;
  } 
  (arg1)->setName((irr::core::stringc const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getBoundingBoxConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::ISceneNode const *)arg1)->getBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getTransformedBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::aabbox3d< irr::f32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = ((irr::scene::ISceneNode const *)arg1)->getTransformedBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = new irr::core::aabbox3d< irr::f32 >((const irr::core::aabbox3d< irr::f32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getTransformedBoundingBoxSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::aabbox3d< irr::f32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = ((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getTransformedBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = new irr::core::aabbox3d< irr::f32 >((const irr::core::aabbox3d< irr::f32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getAbsoluteTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::matrix4 *) &((irr::scene::ISceneNode const *)arg1)->getAbsoluteTransformation();
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getAbsoluteTransformationSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::matrix4 *) &((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getAbsoluteTransformation();
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getRelativeTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  SwigValueWrapper< irr::core::CMatrix4< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = ((irr::scene::ISceneNode const *)arg1)->getRelativeTransformation();
  *(irr::core::matrix4 **)&jresult = new irr::core::matrix4((const irr::core::matrix4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getRelativeTransformationSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  SwigValueWrapper< irr::core::CMatrix4< float > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = ((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getRelativeTransformation();
  *(irr::core::matrix4 **)&jresult = new irr::core::matrix4((const irr::core::matrix4 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (bool)((irr::scene::ISceneNode const *)arg1)->isVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1isVisibleSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (bool)((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::isVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1isTrulyVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (bool)((irr::scene::ISceneNode const *)arg1)->isTrulyVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1isTrulyVisibleSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (bool)((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::isTrulyVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setVisibleSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->irr::scene::ISceneNode::setVisible(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::s32)((irr::scene::ISceneNode const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getIDSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::s32)((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setID(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setIDSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->irr::scene::ISceneNode::setID(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->addChild(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1addChildSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->irr::scene::ISceneNode::addChild(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (bool)(arg1)->removeChild(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeChildSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (bool)(arg1)->irr::scene::ISceneNode::removeChild(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->removeAll();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeAllSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->irr::scene::ISceneNode::removeAll();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->remove();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->irr::scene::ISceneNode::remove();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1addAnimator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *arg2 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNodeAnimator **)&jarg2; 
  (arg1)->addAnimator(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1addAnimatorSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *arg2 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNodeAnimator **)&jarg2; 
  (arg1)->irr::scene::ISceneNode::addAnimator(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getAnimators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) &((irr::scene::ISceneNode const *)arg1)->getAnimators();
  *(irr::core::list< irr::scene::ISceneNodeAnimator * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeAnimator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *arg2 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNodeAnimator **)&jarg2; 
  (arg1)->removeAnimator(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeAnimatorSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *arg2 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNodeAnimator **)&jarg2; 
  (arg1)->irr::scene::ISceneNode::removeAnimator(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeAnimators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->removeAnimators();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1removeAnimatorsSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->irr::scene::ISceneNode::removeAnimators();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::SMaterial *) &(arg1)->getMaterial(arg2);
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getMaterialCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneNode const *)arg1)->getMaterialCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getMaterialCountSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getMaterialCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setMaterialFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject object, jlong flag, jboolean state) {
	irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2 ;
  bool arg3 ;
  irr::video::E_MATERIAL_FLAG *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->setMaterialFlag((E_MATERIAL_FLAG)flag,state);
  ICameraSceneNode*cam;
  ISceneCollisionManager*collision;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setMaterialTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  (arg1)->setMaterialTexture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setMaterialType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::video::E_MATERIAL_TYPE arg2 ;
  irr::video::E_MATERIAL_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  argp2 = *(irr::video::E_MATERIAL_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::E_MATERIAL_TYPE");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setMaterialType(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->getScale();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getScaleSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getScale();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setScale((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setScaleSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->irr::scene::ISceneNode::setScale((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->getRotation();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getRotationSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getRotation();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setRotation((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setRotationSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->irr::scene::ISceneNode::setRotation((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->getPosition();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1mapLocalPositionToGlobalSpace(JNIEnv *jenv, jclass jcls, jlong nodePointer, jlong pointPointer) {
	vector3df*point=(vector3df*)pointPointer;
	ISceneNode*node=(ISceneNode*)nodePointer;
	vector3df*newVector=new vector3df(*point);
	node->getAbsoluteTransformation().transformVect(*newVector);
	return (jlong)newVector;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1mapGlobalPositionToLocalSpace(JNIEnv *jenv, jclass jcls, jlong nodePointer, jlong pointPointer) {
	vector3df*point=(vector3df*)pointPointer;
	ISceneNode*node=(ISceneNode*)nodePointer;
	
	vector3df*newVector=new vector3df(*point);

	core::matrix4 world_to_local=node->getAbsoluteTransformation();
	world_to_local.makeInverse();
	world_to_local.transformVect(*newVector);
	return (jlong)newVector;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getPositionSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getPosition();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setPosition((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setPositionSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->irr::scene::ISceneNode::setPosition((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getAbsolutePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = ((irr::scene::ISceneNode const *)arg1)->getAbsolutePosition();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getAbsolutePositionSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = ((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getAbsolutePosition();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setAutomaticCulling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setAutomaticCulling(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getAutomaticCulling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneNode const *)arg1)->getAutomaticCulling();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setDebugDataVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setDebugDataVisible(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setDebugDataVisibleSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->irr::scene::ISceneNode::setDebugDataVisible(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1isDebugDataVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneNode const *)arg1)->isDebugDataVisible();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setIsDebugObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsDebugObject(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1isDebugObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (bool)((irr::scene::ISceneNode const *)arg1)->isDebugObject();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::list< irr::scene::ISceneNode * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::core::list< irr::scene::ISceneNode * > *) &((irr::scene::ISceneNode const *)arg1)->getChildren();
  *(irr::core::list< irr::scene::ISceneNode * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->setParent(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setParentSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->irr::scene::ISceneNode::setParent(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getTriangleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ITriangleSelector *)((irr::scene::ISceneNode const *)arg1)->getTriangleSelector();
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setTriangleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  (arg1)->setTriangleSelector(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setTriangleSelectorSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  (arg1)->irr::scene::ISceneNode::setTriangleSelector(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1updateAbsolutePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->updateAbsolutePosition();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1updateAbsolutePositionSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  (arg1)->irr::scene::ISceneNode::updateAbsolutePosition();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ISceneNode *)((irr::scene::ISceneNode const *)arg1)->getParent();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ESCENE_NODE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ESCENE_NODE_TYPE)((irr::scene::ISceneNode const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getTypeSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ESCENE_NODE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ESCENE_NODE_TYPE)((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1serializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  ((irr::scene::ISceneNode const *)arg1)->serializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1serializeAttributesSwigExplicitISceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  ((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::serializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1serializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  ((irr::scene::ISceneNode const *)arg1)->serializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1serializeAttributesSwigExplicitISceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  ((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::serializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1deserializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  (arg1)->deserializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1deserializeAttributesSwigExplicitISceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  (arg1)->irr::scene::ISceneNode::deserializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1deserializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  (arg1)->deserializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1deserializeAttributesSwigExplicitISceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  (arg1)->irr::scene::ISceneNode::deserializeAttributes(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg3 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::scene::ISceneManager **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->clone(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1cloneSwigExplicitISceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg3 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::scene::ISceneManager **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->irr::scene::ISceneNode::clone(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->clone(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1cloneSwigExplicitISceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->irr::scene::ISceneNode::clone(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1clone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ISceneNode *)(arg1)->clone();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1cloneSwigExplicitISceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ISceneNode *)(arg1)->irr::scene::ISceneNode::clone();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getSceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ISceneManager *)((irr::scene::ISceneNode const *)arg1)->getSceneManager();
  *(irr::scene::ISceneManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getSceneManagerSwigExplicitISceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::scene::ISceneManager *)((irr::scene::ISceneNode const *)arg1)->irr::scene::ISceneNode::getSceneManager();
  *(irr::scene::ISceneManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1setMaterialTypeByInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  irr_scene_ISceneNode_setMaterialTypeByInt(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1OnRegisterSceneNodeJava(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  irr_scene_ISceneNode_OnRegisterSceneNodeJava(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1getDefaultVertices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNode **)&jarg1; 
  result = (irr::video::S3DVertex *)irr_scene_ISceneNode_getDefaultVertices(arg1);
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  irr::scene::ISceneNode *obj = *((irr::scene::ISceneNode **)&objarg);
  (void)jcls;
  SwigDirector_ISceneNode *director = dynamic_cast<SwigDirector_ISceneNode *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  irr::scene::ISceneNode *obj = *((irr::scene::ISceneNode **)&objarg);
  SwigDirector_ISceneNode *director = dynamic_cast<SwigDirector_ISceneNode *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1setMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  (arg1)->setMesh(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1getMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  result = (irr::scene::IMesh *)(arg1)->getMesh();
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::f32 arg5 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4,arg5);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode();
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1setReadOnlyMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReadOnlyMaterials(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1isReadOnlyMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  result = (bool)((irr::scene::IMeshSceneNode const *)arg1)->isReadOnlyMaterials();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMeshSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IMeshSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShadowVolumeSceneNode_1setShadowMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IShadowVolumeSceneNode *arg1 = (irr::scene::IShadowVolumeSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IShadowVolumeSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  (arg1)->setShadowMesh((irr::scene::IMesh const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShadowVolumeSceneNode_1updateShadowVolumes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IShadowVolumeSceneNode *arg1 = (irr::scene::IShadowVolumeSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IShadowVolumeSceneNode **)&jarg1; 
  (arg1)->updateShadowVolumes();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IShadowVolumeSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IShadowVolumeSceneNode *arg1 = (irr::scene::IShadowVolumeSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IShadowVolumeSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimationEndCallBack_1OnAnimationEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IAnimationEndCallBack *arg1 = (irr::scene::IAnimationEndCallBack *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimationEndCallBack **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  (arg1)->OnAnimationEnd(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IAnimationEndCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IAnimationEndCallBack *arg1 = (irr::scene::IAnimationEndCallBack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IAnimationEndCallBack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IAnimatedMeshSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setCurrentFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setCurrentFrame(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setFrameLoop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (bool)(arg1)->setFrameLoop(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setAnimationSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setAnimationSpeed(arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getAnimationSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::f32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getAnimationSpeed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::f32 arg5 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::f32)jarg5; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4,arg5);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2);
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1addShadowVolumeSceneNode_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode();
  *(irr::scene::IShadowVolumeSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getJointNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  IBoneSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (IBoneSceneNode *)(arg1)->getJointNode((irr::c8 const *)arg2);
  *(IBoneSceneNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getJointNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::u32 arg2 ;
  IBoneSceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (IBoneSceneNode *)(arg1)->getJointNode(arg2);
  *(IBoneSceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getJointCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::u32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getJointCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setMD2Animation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::EMD2_ANIMATION_TYPE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = (irr::scene::EMD2_ANIMATION_TYPE)jarg2; 
  result = (bool)(arg1)->setMD2Animation(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setMD2Animation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setMD2Animation((irr::c8 const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getFrameNr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::f32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getFrameNr();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getStartFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::s32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getStartFrame();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getEndFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::s32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getEndFrame();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setLoopMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoopMode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getLoopMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (bool)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getLoopMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setAnimationEndCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IAnimationEndCallBack *arg2 = (irr::scene::IAnimationEndCallBack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimationEndCallBack **)&jarg2; 
  (arg1)->setAnimationEndCallback(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setAnimationEndCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  (arg1)->setAnimationEndCallback();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setReadOnlyMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReadOnlyMaterials(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1isReadOnlyMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (bool)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->isReadOnlyMaterials();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  (arg1)->setMesh(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->getMesh();
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1getMD3TagTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::core::stringc *arg2 = 0 ;
  SMD3QuaternionTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  result = (SMD3QuaternionTag *)(arg1)->getMD3TagTransformation((irr::core::stringc const &)*arg2);
  *(SMD3QuaternionTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setJointMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::E_JOINT_UPDATE_ON_RENDER arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = (irr::scene::E_JOINT_UPDATE_ON_RENDER)jarg2; 
  (arg1)->setJointMode(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setTransitionTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setTransitionTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1animateJoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->animateJoints(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1animateJoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  (arg1)->animateJoints();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1setRenderFromIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRenderFromIdentity(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1clone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg3 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::scene::ISceneManager **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->clone(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1clone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->clone(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1clone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1; 
  result = (irr::scene::ISceneNode *)(arg1)->clone();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SViewFrustum_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SViewFrustum *)new irr::scene::SViewFrustum();
  *(irr::scene::SViewFrustum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SViewFrustum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = 0 ;
  irr::scene::SViewFrustum *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SViewFrustum const & reference is null");
    return 0;
  } 
  result = (irr::scene::SViewFrustum *)new irr::scene::SViewFrustum((irr::scene::SViewFrustum const &)*arg1);
  *(irr::scene::SViewFrustum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SViewFrustum_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::core::matrix4 *arg1 = 0 ;
  irr::scene::SViewFrustum *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::matrix4 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return 0;
  } 
  result = (irr::scene::SViewFrustum *)new irr::scene::SViewFrustum((irr::core::matrix4 const &)*arg1);
  *(irr::scene::SViewFrustum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1setFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->setFrom((irr::core::matrix4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->transform((irr::core::matrix4 const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getFarLeftUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getFarLeftUp();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getFarLeftDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getFarLeftDown();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getFarRightUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getFarRightUp();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getFarRightDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getFarRightDown();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getNearLeftUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getNearLeftUp();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getNearLeftDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getNearLeftDown();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getNearRightUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getNearRightUp();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getNearRightDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = ((irr::scene::SViewFrustum const *)arg1)->getNearRightDown();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getBoundingBoxConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::SViewFrustum const *)arg1)->getBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1recalculateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  (arg1)->recalculateBoundingBox();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1getTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::video::E_TRANSFORMATION_STATE arg2 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  arg2 = (irr::video::E_TRANSFORMATION_STATE)jarg2; 
  result = (irr::core::matrix4 *) &(arg1)->getTransform(arg2);
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1clipLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  arg2 = *(irr::core::line3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::SViewFrustum const *)arg1)->clipLine(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1cameraPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->cameraPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1cameraPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->cameraPosition);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1planes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::plane3d< irr::f32 > *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  arg2 = *(irr::core::plane3d< irr::f32 > **)&jarg2; 
  {
    size_t ii;
    irr::core::plane3d< irr::f32 > *b = (irr::core::plane3d< irr::f32 > *) arg1->planes;
    for (ii = 0; ii < (size_t)irr::scene::SViewFrustum::VF_PLANE_COUNT; ii++) b[ii] = *((irr::core::plane3d< irr::f32 > *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1planes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::plane3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = (irr::core::plane3d< irr::f32 > *)(irr::core::plane3d< irr::f32 > *) ((arg1)->planes);
  *(irr::core::plane3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1boundingBox_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::aabbox3d< irr::f32 > *arg2 = (irr::core::aabbox3d< irr::f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< irr::f32 > **)&jarg2; 
  if (arg1) (arg1)->boundingBox = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SViewFrustum_1boundingBox_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *)& ((arg1)->boundingBox);
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SViewFrustum(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SViewFrustum *arg1 = (irr::scene::SViewFrustum *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SViewFrustum **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setProjectionMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setProjectionMatrix((irr::core::matrix4 const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setProjectionMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->setProjectionMatrix((irr::core::matrix4 const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getProjectionMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::core::matrix4 *) &((irr::scene::ICameraSceneNode const *)arg1)->getProjectionMatrix();
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getViewMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::core::matrix4 *) &((irr::scene::ICameraSceneNode const *)arg1)->getViewMatrix();
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setViewMatrixAffector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->setViewMatrixAffector((irr::core::matrix4 const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getViewMatrixAffector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::core::matrix4 *) &((irr::scene::ICameraSceneNode const *)arg1)->getViewMatrixAffector();
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1OnEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->OnEvent((irr::SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setTarget((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setRotation((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ICameraSceneNode const *)arg1)->getTarget();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setUpVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setUpVector((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getUpVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ICameraSceneNode const *)arg1)->getUpVector();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getNearValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getNearValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getFarValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getFarValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getAspectRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getAspectRatio();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getFOV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getFOV();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setNearValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setNearValue(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setFarValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setFarValue(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setAspectRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setAspectRatio(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setFOV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setFOV(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getViewFrustum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::scene::SViewFrustum *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (irr::scene::SViewFrustum *)((irr::scene::ICameraSceneNode const *)arg1)->getViewFrustum();
  *(irr::scene::SViewFrustum **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1setInputReceiverEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInputReceiverEnabled(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1isInputReceiverEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (bool)((irr::scene::ICameraSceneNode const *)arg1)->isInputReceiverEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1isOrthogonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (bool)((irr::scene::ICameraSceneNode const *)arg1)->isOrthogonal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1bindTargetAndRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->bindTargetAndRotation(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1getTargetAndRotationBinding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  result = (bool)((irr::scene::ICameraSceneNode const *)arg1)->getTargetAndRotationBinding();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1serializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  ((irr::scene::ICameraSceneNode const *)arg1)->serializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1serializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  ((irr::scene::ICameraSceneNode const *)arg1)->serializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1deserializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  (arg1)->deserializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1deserializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  (arg1)->deserializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ICameraSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ICameraSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IDummyTransformationSceneNode_1getRelativeTransformationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IDummyTransformationSceneNode *arg1 = (irr::scene::IDummyTransformationSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IDummyTransformationSceneNode **)&jarg1; 
  result = (irr::core::matrix4 *) &(arg1)->getRelativeTransformationMatrix();
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IDummyTransformationSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IDummyTransformationSceneNode *arg1 = (irr::scene::IDummyTransformationSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IDummyTransformationSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1getFileCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  result = (irr::u32)((irr::io::IFileList const *)arg1)->getFileCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::io::path *) &((irr::io::IFileList const *)arg1)->getFileName(arg2);
  *(irr::io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1getFullFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::io::path *) &((irr::io::IFileList const *)arg1)->getFullFileName(arg2);
  *(irr::io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1getFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::u32)((irr::io::IFileList const *)arg1)->getFileSize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1getFileOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::u32)((irr::io::IFileList const *)arg1)->getFileOffset(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::u32)((irr::io::IFileList const *)arg1)->getID(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1isDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (bool)((irr::io::IFileList const *)arg1)->isDirectory(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1findFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (irr::s32)((irr::io::IFileList const *)arg1)->findFile((irr::io::path const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1findFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)((irr::io::IFileList const *)arg1)->findFile((irr::io::path const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  result = (irr::io::path *) &((irr::io::IFileList const *)arg1)->getPath();
  *(irr::io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1addItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  bool arg5 ;
  irr::u32 arg6 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (irr::u32)jarg6; 
  result = (irr::u32)(arg1)->addItem((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1addItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  bool arg5 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (irr::u32)(arg1)->addItem((irr::io::path const &)*arg2,arg3,arg4,arg5);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IFileList_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IFileList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IFileList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createAndOpenFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  irr::io::IReadFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (irr::io::IReadFile *)(arg1)->createAndOpenFile((path const &)*arg2);
  *(irr::io::IReadFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createMemoryReadFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::s32 arg3 ;
  path *arg4 = 0 ;
  bool arg5 ;
  irr::io::IReadFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (irr::io::IReadFile *)(arg1)->createMemoryReadFile(arg2,arg3,(path const &)*arg4,arg5);
  *(irr::io::IReadFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createMemoryReadFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::s32 arg3 ;
  path *arg4 = 0 ;
  irr::io::IReadFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (irr::io::IReadFile *)(arg1)->createMemoryReadFile(arg2,arg3,(path const &)*arg4);
  *(irr::io::IReadFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createLimitReadFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  long arg4 ;
  long arg5 ;
  irr::io::IReadFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::IReadFile **)&jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (long)jarg5; 
  result = (irr::io::IReadFile *)(arg1)->createLimitReadFile((path const &)*arg2,arg3,arg4,arg5);
  *(irr::io::IReadFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createMemoryWriteFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::s32 arg3 ;
  path *arg4 = 0 ;
  bool arg5 ;
  irr::io::IWriteFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (irr::io::IWriteFile *)(arg1)->createMemoryWriteFile(arg2,arg3,(path const &)*arg4,arg5);
  *(irr::io::IWriteFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createMemoryWriteFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::s32 arg3 ;
  path *arg4 = 0 ;
  irr::io::IWriteFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = *(path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (irr::io::IWriteFile *)(arg1)->createMemoryWriteFile(arg2,arg3,(path const &)*arg4);
  *(irr::io::IWriteFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createAndWriteFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool arg3 ;
  irr::io::IWriteFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (irr::io::IWriteFile *)(arg1)->createAndWriteFile((path const &)*arg2,arg3);
  *(irr::io::IWriteFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createAndWriteFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  irr::io::IWriteFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (irr::io::IWriteFile *)(arg1)->createAndWriteFile((path const &)*arg2);
  *(irr::io::IWriteFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  IFileArchive **arg7 = (IFileArchive **) 0 ;
  E_FILE_ARCHIVE_TYPE *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(E_FILE_ARCHIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_FILE_ARCHIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = *(irr::core::stringc **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  arg7 = *(IFileArchive ***)&jarg7; 
  result = (bool)(arg1)->addFileArchive((path const &)*arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  E_FILE_ARCHIVE_TYPE *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(E_FILE_ARCHIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_FILE_ARCHIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = *(irr::core::stringc **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addFileArchive((path const &)*arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  E_FILE_ARCHIVE_TYPE arg5 ;
  E_FILE_ARCHIVE_TYPE *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(E_FILE_ARCHIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_FILE_ARCHIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->addFileArchive((path const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addFileArchive((path const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addFileArchive((path const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addFileArchive((path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  IFileArchive **arg7 = (IFileArchive **) 0 ;
  E_FILE_ARCHIVE_TYPE *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(E_FILE_ARCHIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_FILE_ARCHIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = *(irr::core::stringc **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  arg7 = *(IFileArchive ***)&jarg7; 
  result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  E_FILE_ARCHIVE_TYPE *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(E_FILE_ARCHIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_FILE_ARCHIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = *(irr::core::stringc **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  E_FILE_ARCHIVE_TYPE arg5 ;
  E_FILE_ARCHIVE_TYPE *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(E_FILE_ARCHIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_FILE_ARCHIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addFileArchive(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (bool)(arg1)->addFileArchive(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFileArchive_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  IFileArchive *arg2 = (IFileArchive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(IFileArchive **)&jarg2; 
  result = (bool)(arg1)->addFileArchive(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getFileArchiveCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  result = (irr::u32)((irr::io::IFileSystem const *)arg1)->getFileArchiveCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1removeFileArchive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (bool)(arg1)->removeFileArchive(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1removeFileArchive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->removeFileArchive((path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1removeFileArchive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  IFileArchive *arg2 = (IFileArchive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(IFileArchive **)&jarg2; 
  result = (bool)(arg1)->removeFileArchive((IFileArchive const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1moveFileArchive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (bool)(arg1)->moveFileArchive(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getFileArchive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  IFileArchive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (IFileArchive *)(arg1)->getFileArchive(arg2);
  *(IFileArchive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addArchiveLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  IArchiveLoader *arg2 = (IArchiveLoader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(IArchiveLoader **)&jarg2; 
  (arg1)->addArchiveLoader(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getArchiveLoaderCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  result = (irr::u32)((irr::io::IFileSystem const *)arg1)->getArchiveLoaderCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getArchiveLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  IArchiveLoader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (IArchiveLoader *)((irr::io::IFileSystem const *)arg1)->getArchiveLoader(arg2);
  *(IArchiveLoader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addZipFileArchive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addZipFileArchive((irr::c8 const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addZipFileArchive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addZipFileArchive((irr::c8 const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addZipFileArchive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->addZipFileArchive((irr::c8 const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFolderFileArchive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addFolderFileArchive((irr::c8 const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFolderFileArchive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addFolderFileArchive((irr::c8 const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addFolderFileArchive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->addFolderFileArchive((irr::c8 const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addPakFileArchive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addPakFileArchive((irr::c8 const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addPakFileArchive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addPakFileArchive((irr::c8 const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1addPakFileArchive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->addPakFileArchive((irr::c8 const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getWorkingDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  result = (path *) &(arg1)->getWorkingDirectory();
  *(path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1changeWorkingDirectoryTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->changeWorkingDirectoryTo((path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getAbsolutePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  path result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = ((irr::io::IFileSystem const *)arg1)->getAbsolutePath((path const &)*arg2);
  *(path **)&jresult = new path((const path &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getFileDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  path result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = ((irr::io::IFileSystem const *)arg1)->getFileDir((path const &)*arg2);
  *(path **)&jresult = new path((const path &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getFileBasename_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool arg3 ;
  path result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = ((irr::io::IFileSystem const *)arg1)->getFileBasename((path const &)*arg2,arg3);
  *(path **)&jresult = new path((const path &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getFileBasename_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  path result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = ((irr::io::IFileSystem const *)arg1)->getFileBasename((path const &)*arg2);
  *(path **)&jresult = new path((const path &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1flattenFilename_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  path *arg3 = 0 ;
  path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path & reference is null");
    return 0;
  } 
  arg3 = *(path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (path *) &((irr::io::IFileSystem const *)arg1)->flattenFilename(*arg2,(path const &)*arg3);
  *(path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1flattenFilename_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path & reference is null");
    return 0;
  } 
  result = (path *) &((irr::io::IFileSystem const *)arg1)->flattenFilename(*arg2);
  *(path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1getRelativeFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  path *arg3 = 0 ;
  path result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  arg3 = *(path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = ((irr::io::IFileSystem const *)arg1)->getRelativeFilename((path const &)*arg2,(path const &)*arg3);
  *(path **)&jresult = new path((const path &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createFileList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IFileList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  result = (irr::io::IFileList *)(arg1)->createFileList();
  *(irr::io::IFileList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createEmptyFileList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::IFileList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (irr::io::IFileList *)(arg1)->createEmptyFileList((irr::io::path const &)*arg2,arg3,arg4);
  *(irr::io::IFileList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1setFileListSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  EFileSystemType arg2 ;
  EFileSystemType *argp2 ;
  EFileSystemType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  argp2 = *(EFileSystemType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EFileSystemType");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->setFileListSystem(arg2);
  *(EFileSystemType **)&jresult = new EFileSystemType((const EFileSystemType &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1existFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (bool)((irr::io::IFileSystem const *)arg1)->existFile((path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createXMLReader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  irr::io::IXMLReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (irr::io::IXMLReader *)(arg1)->createXMLReader((path const &)*arg2);
  *(irr::io::IXMLReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createXMLReader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IXMLReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::io::IXMLReader *)(arg1)->createXMLReader(arg2);
  *(irr::io::IXMLReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createXMLReaderUTF8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  irr::io::IXMLReaderUTF8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (irr::io::IXMLReaderUTF8 *)(arg1)->createXMLReaderUTF8((path const &)*arg2);
  *(irr::io::IXMLReaderUTF8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createXMLReaderUTF8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IXMLReaderUTF8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::io::IXMLReaderUTF8 *)(arg1)->createXMLReaderUTF8(arg2);
  *(irr::io::IXMLReaderUTF8 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createXMLWriter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  path *arg2 = 0 ;
  irr::io::IXMLWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "path const & reference is null");
    return 0;
  } 
  result = (irr::io::IXMLWriter *)(arg1)->createXMLWriter((path const &)*arg2);
  *(irr::io::IXMLWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createXMLWriter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::io::IXMLWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::io::IWriteFile **)&jarg2; 
  result = (irr::io::IXMLWriter *)(arg1)->createXMLWriter(arg2);
  *(irr::io::IXMLWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createEmptyAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::video::IVideoDriver *arg2 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  arg2 = *(irr::video::IVideoDriver **)&jarg2; 
  result = (irr::io::IAttributes *)(arg1)->createEmptyAttributes(arg2);
  *(irr::io::IAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IFileSystem_1createEmptyAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  result = (irr::io::IAttributes *)(arg1)->createEmptyAttributes();
  *(irr::io::IAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IFileSystem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IGUIElement(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg1 ;
  irr::gui::IGUIEnvironment *arg2 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = (irr::gui::EGUI_ELEMENT_TYPE)jarg1; 
  arg2 = *(irr::gui::IGUIEnvironment **)&jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIElement *)new irr::gui::IGUIElement(arg1,arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::gui::IGUIElement *)((irr::gui::IGUIElement const *)arg1)->getParent();
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getRelativePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = ((irr::gui::IGUIElement const *)arg1)->getRelativePosition();
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setRelativePosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->setRelativePosition((irr::core::rect< irr::s32 > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setRelativePosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::position2di *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::core::position2di **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  (arg1)->setRelativePosition((irr::core::position2di const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setRelativePositionProportional(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::f32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::core::rect< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::f32 > const & reference is null");
    return ;
  } 
  (arg1)->setRelativePositionProportional((irr::core::rect< irr::f32 > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getAbsolutePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = ((irr::gui::IGUIElement const *)arg1)->getAbsolutePosition();
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getAbsoluteClippingRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = ((irr::gui::IGUIElement const *)arg1)->getAbsoluteClippingRect();
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setNotClipped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setNotClipped(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isNotClipped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isNotClipped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setMaxSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > arg2 ;
  irr::core::dimension2du *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  argp2 = *(irr::core::dimension2du **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2du");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setMaxSize(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setMinSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > arg2 ;
  irr::core::dimension2du *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  argp2 = *(irr::core::dimension2du **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2du");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setMinSize(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  EGUI_ALIGNMENT arg2 ;
  EGUI_ALIGNMENT arg3 ;
  EGUI_ALIGNMENT arg4 ;
  EGUI_ALIGNMENT arg5 ;
  EGUI_ALIGNMENT *argp2 ;
  EGUI_ALIGNMENT *argp3 ;
  EGUI_ALIGNMENT *argp4 ;
  EGUI_ALIGNMENT *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  argp2 = *(EGUI_ALIGNMENT **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(EGUI_ALIGNMENT **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(EGUI_ALIGNMENT **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(EGUI_ALIGNMENT **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->setAlignment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1updateAbsolutePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  (arg1)->updateAbsolutePosition();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getElementFromPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIElement *)(arg1)->getElementFromPoint((irr::core::vector2d< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isPointInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isPointInside((irr::core::vector2d< irr::s32 > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  (arg1)->addChild(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  (arg1)->removeChild(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  (arg1)->remove();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1draw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1OnPostRender(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->OnPostRender(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  irr::core::vector2d< irr::s32 > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  argp2 = *(irr::core::vector2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->move(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isSubElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isSubElement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setSubElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSubElement(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setTabStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTabStop(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isTabStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isTabStop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setTabOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setTabOrder(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getTabOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIElement const *)arg1)->getTabOrder();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setTabGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTabGroup(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isTabGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isTabGroup();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getTabGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::gui::IGUIElement *)(arg1)->getTabGroup();
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->setText((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (wchar_t *)((irr::gui::IGUIElement const *)arg1)->getText();
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setToolTipText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->setToolTipText((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getToolTipText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::stringw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::core::stringw *) &((irr::gui::IGUIElement const *)arg1)->getToolTipText();
  *(irr::core::stringw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIElement const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setID(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1OnEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->OnEvent((irr::SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1OnEventSwigExplicitIGUIElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->irr::gui::IGUIElement::OnEvent((irr::SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1bringToFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (bool)(arg1)->bringToFront(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1sendToBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (bool)(arg1)->sendToBack(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::list< irr::gui::IGUIElement * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::core::list< irr::gui::IGUIElement * > *) &((irr::gui::IGUIElement const *)arg1)->getChildren();
  *(irr::core::list< irr::gui::IGUIElement * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getElementFromId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (irr::gui::IGUIElement *)((irr::gui::IGUIElement const *)arg1)->getElementFromId(arg2,arg3);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getElementFromId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::gui::IGUIElement *)((irr::gui::IGUIElement const *)arg1)->getElementFromId(arg2);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1isMyChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->isMyChild(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getNextElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement **arg5 = 0 ;
  irr::gui::IGUIElement **arg6 = 0 ;
  bool arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::gui::IGUIElement **)&jarg5; 
  arg6 = (irr::gui::IGUIElement **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->getNextElement(arg2,arg3,arg4,*arg5,*arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getNextElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement **arg5 = 0 ;
  irr::gui::IGUIElement **arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::gui::IGUIElement **)&jarg5; 
  arg6 = (irr::gui::IGUIElement **)&jarg6; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->getNextElement(arg2,arg3,arg4,*arg5,*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::gui::EGUI_ELEMENT_TYPE)((irr::gui::IGUIElement const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1hasType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = (irr::gui::EGUI_ELEMENT_TYPE)jarg2; 
  result = (bool)((irr::gui::IGUIElement const *)arg1)->hasType(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::c8 *)((irr::gui::IGUIElement const *)arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::c8 *)((irr::gui::IGUIElement const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((irr::c8 const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1setName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::stringc *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return ;
  } 
  (arg1)->setName((irr::core::stringc const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1serializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  ((irr::gui::IGUIElement const *)arg1)->serializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1serializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  ((irr::gui::IGUIElement const *)arg1)->serializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1deserializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  (arg1)->deserializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1deserializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  (arg1)->deserializeAttributes(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUIButtonStateNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUIButtonStateNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setOverrideFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  (arg1)->setOverrideFont(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setOverrideFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setOverrideFont();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1getOverrideFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUIButton const *)arg1)->getOverrideFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1getActiveFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUIButton const *)arg1)->getActiveFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  (arg1)->setImage(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setImage();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setImage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->setImage(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setPressedImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  (arg1)->setPressedImage(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setPressedImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setPressedImage();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setPressedImage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->setPressedImage(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setSpriteBank_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUISpriteBank *arg2 = (irr::gui::IGUISpriteBank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = *(irr::gui::IGUISpriteBank **)&jarg2; 
  (arg1)->setSpriteBank(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setSpriteBank_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setSpriteBank();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setSprite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::EGUI_BUTTON_STATE arg2 ;
  irr::s32 arg3 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = (irr::gui::EGUI_BUTTON_STATE)jarg2; 
  arg3 = (irr::s32)jarg3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setSprite(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setSprite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::EGUI_BUTTON_STATE arg2 ;
  irr::s32 arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = (irr::gui::EGUI_BUTTON_STATE)jarg2; 
  arg3 = (irr::s32)jarg3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setSprite(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setSprite_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::EGUI_BUTTON_STATE arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = (irr::gui::EGUI_BUTTON_STATE)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setSprite(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setIsPushButton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsPushButton(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setIsPushButton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setIsPushButton();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setPressed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPressed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setPressed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setPressed();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1isPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  result = (bool)((irr::gui::IGUIButton const *)arg1)->isPressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setUseAlphaChannel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseAlphaChannel(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setUseAlphaChannel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setUseAlphaChannel();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1isAlphaChannelUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  result = (bool)((irr::gui::IGUIButton const *)arg1)->isAlphaChannelUsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1isPushButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  result = (bool)((irr::gui::IGUIButton const *)arg1)->isPushButton();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setDrawBorder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBorder(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setDrawBorder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setDrawBorder();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1isDrawingBorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  result = (bool)((irr::gui::IGUIButton const *)arg1)->isDrawingBorder();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setScaleImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setScaleImage(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1setScaleImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  (arg1)->setScaleImage();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1isScalingImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  result = (bool)((irr::gui::IGUIButton const *)arg1)->isScalingImage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIButton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIButton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUICheckBox_1setChecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUICheckBox *arg1 = (irr::gui::IGUICheckBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUICheckBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setChecked(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUICheckBox_1isChecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUICheckBox *arg1 = (irr::gui::IGUICheckBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUICheckBox **)&jarg1; 
  result = (bool)((irr::gui::IGUICheckBox const *)arg1)->isChecked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUICheckBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUICheckBox *arg1 = (irr::gui::IGUICheckBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUICheckBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1setCloseHandling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::gui::ECONTEXT_MENU_CLOSE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::gui::ECONTEXT_MENU_CLOSE)jarg2; 
  (arg1)->setCloseHandling(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1getCloseHandling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::gui::ECONTEXT_MENU_CLOSE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  result = (irr::gui::ECONTEXT_MENU_CLOSE)((irr::gui::IGUIContextMenu const *)arg1)->getCloseHandling();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1getItemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  result = (irr::u32)((irr::gui::IGUIContextMenu const *)arg1)->getItemCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1addItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1addItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1addItem_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1addItem_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1addItem_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1addItem_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1insertItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jlong)result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1insertItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7);
  jresult = (jlong)result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1insertItem_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5,arg6);
  jresult = (jlong)result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1insertItem_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5);
  jresult = (jlong)result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1insertItem_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = (irr::s32)jarg4; 
  result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4);
  jresult = (jlong)result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1insertItem_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3);
  jresult = (jlong)result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1findItemWithCommandId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::s32 arg2 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->findItemWithCommandId(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1findItemWithCommandId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->findItemWithCommandId(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1addSeparator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  (arg1)->addSeparator();
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1getItemText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (wchar_t *)((irr::gui::IGUIContextMenu const *)arg1)->getItemText(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1setItemText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->setItemText(arg2,(wchar_t const *)arg3);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1isItemEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (bool)((irr::gui::IGUIContextMenu const *)arg1)->isItemEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1setItemEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setItemEnabled(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1setItemChecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setItemChecked(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1isItemChecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (bool)((irr::gui::IGUIContextMenu const *)arg1)->isItemChecked(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1removeItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->removeItem(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1removeAllItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  (arg1)->removeAllItems();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1getSelectedItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->getSelectedItem();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1getItemCommandId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->getItemCommandId(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1setItemCommandId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setItemCommandId(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1getSubMenu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::gui::IGUIContextMenu *)((irr::gui::IGUIContextMenu const *)arg1)->getSubMenu(arg2);
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1setItemAutoChecking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setItemAutoChecking(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1getItemAutoChecking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (bool)((irr::gui::IGUIContextMenu const *)arg1)->getItemAutoChecking(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1setEventParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  (arg1)->setEventParent(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIContextMenu(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIContextMenu **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setOverrideFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  (arg1)->setOverrideFont(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setOverrideFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  (arg1)->setOverrideFont();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1getOverrideFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUIEditBox const *)arg1)->getOverrideFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1getActiveFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUIEditBox const *)arg1)->getActiveFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setOverrideColor(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1getOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = ((irr::gui::IGUIEditBox const *)arg1)->getOverrideColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1enableOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableOverrideColor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1isOverrideColorEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isOverrideColorEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setDrawBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBackground(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setDrawBorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBorder(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setTextAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  EGUI_ALIGNMENT arg2 ;
  EGUI_ALIGNMENT arg3 ;
  EGUI_ALIGNMENT *argp2 ;
  EGUI_ALIGNMENT *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  argp2 = *(EGUI_ALIGNMENT **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(EGUI_ALIGNMENT **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setTextAlignment(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setWordWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWordWrap(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1isWordWrapEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isWordWrapEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setMultiLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMultiLine(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1isMultiLineEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isMultiLineEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setAutoScroll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoScroll(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1isAutoScrollEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isAutoScrollEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setPasswordBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jchar jarg3) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPasswordBox(arg2,jarg3);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1isPasswordBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isPasswordBox();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1getTextDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (arg1)->getTextDimension();
  *(irr::core::dimension2du **)&jresult = new irr::core::dimension2du((const irr::core::dimension2du &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setMax(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  result = (irr::u32)((irr::gui::IGUIEditBox const *)arg1)->getMax();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIEditBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIEditBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1getCloseButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  result = (irr::gui::IGUIButton *)((irr::gui::IGUIWindow const *)arg1)->getCloseButton();
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1getMinimizeButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  result = (irr::gui::IGUIButton *)((irr::gui::IGUIWindow const *)arg1)->getMinimizeButton();
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1getMaximizeButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  result = (irr::gui::IGUIButton *)((irr::gui::IGUIWindow const *)arg1)->getMaximizeButton();
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1isDraggable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  result = (bool)((irr::gui::IGUIWindow const *)arg1)->isDraggable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1setDraggable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDraggable(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1setDrawBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBackground(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1getDrawBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  result = (bool)((irr::gui::IGUIWindow const *)arg1)->getDrawBackground();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1setDrawTitlebar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawTitlebar(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1getDrawTitlebar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  result = (bool)((irr::gui::IGUIWindow const *)arg1)->getDrawTitlebar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1getClientRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  result = ((irr::gui::IGUIWindow const *)arg1)->getClientRect();
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIWindow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIWindow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUISkinTypeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUISkinTypeNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUISkinColorNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUISkinColorNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUISkinSizeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUISkinSizeNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUISkinTextNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUISkinTextNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUISkinIconNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUISkinIconNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUISkinFontNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUISkinFontNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_COLOR arg2 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_COLOR)jarg2; 
  result = ((irr::gui::IGUISkin const *)arg1)->getColor(arg2);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_COLOR arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_COLOR)jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setColor(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_SIZE arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_SIZE)jarg2; 
  result = (irr::s32)((irr::gui::IGUISkin const *)arg1)->getSize(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getDefaultText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_TEXT arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_TEXT)jarg2; 
  result = (wchar_t *)((irr::gui::IGUISkin const *)arg1)->getDefaultText(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1setDefaultText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_TEXT arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_TEXT)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  (arg1)->setDefaultText(arg2,(wchar_t const *)arg3);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_SIZE arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_SIZE)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setSize(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_FONT arg2 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_FONT)jarg2; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUISkin const *)arg1)->getFont(arg2);
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUISkin const *)arg1)->getFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1setFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  irr::gui::EGUI_DEFAULT_FONT arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  arg3 = (irr::gui::EGUI_DEFAULT_FONT)jarg3; 
  (arg1)->setFont(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1setFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  (arg1)->setFont(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getSpriteBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  result = (irr::gui::IGUISpriteBank *)((irr::gui::IGUISkin const *)arg1)->getSpriteBank();
  *(irr::gui::IGUISpriteBank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1setSpriteBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUISpriteBank *arg2 = (irr::gui::IGUISpriteBank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUISpriteBank **)&jarg2; 
  (arg1)->setSpriteBank(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg2 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_ICON)jarg2; 
  result = (irr::u32)((irr::gui::IGUISkin const *)arg1)->getIcon(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1setIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg2 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = (irr::gui::EGUI_DEFAULT_ICON)jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->setIcon(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DButtonPaneStandard_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  (arg1)->draw3DButtonPaneStandard(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DButtonPaneStandard_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DButtonPaneStandard(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DButtonPanePressed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  (arg1)->draw3DButtonPanePressed(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DButtonPanePressed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DButtonPanePressed(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DSunkenPane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::core::rect< irr::s32 > *arg6 = 0 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg7 = *(irr::core::rect< irr::s32 > **)&jarg7; 
  (arg1)->draw3DSunkenPane(arg2,arg3,arg4,arg5,(irr::core::rect< irr::s32 > const &)*arg6,(irr::core::rect< irr::s32 > const *)arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DSunkenPane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::core::rect< irr::s32 > *arg6 = 0 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DSunkenPane(arg2,arg3,arg4,arg5,(irr::core::rect< irr::s32 > const &)*arg6);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DWindowBackground_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *argp4 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6; 
  arg7 = *(irr::core::rect< irr::s32 > **)&jarg7; 
  result = (arg1)->draw3DWindowBackground(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6,arg7);
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DWindowBackground_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *argp4 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6; 
  result = (arg1)->draw3DWindowBackground(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6);
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DWindowBackground_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::video::SColor *argp4 ;
  irr::core::rect< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (arg1)->draw3DWindowBackground(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5);
  *(irr::core::rect< irr::s32 > **)&jresult = new irr::core::rect< irr::s32 >((const irr::core::rect< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DMenuPane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  (arg1)->draw3DMenuPane(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DMenuPane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DMenuPane(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DToolBar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  (arg1)->draw3DToolBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DToolBar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DToolBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DTabButton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg6 ;
  irr::gui::EGUI_ALIGNMENT *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  argp6 = *(irr::gui::EGUI_ALIGNMENT **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::gui::EGUI_ALIGNMENT");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->draw3DTabButton(arg2,arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DTabButton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  (arg1)->draw3DTabButton(arg2,arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DTabButton_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DTabButton(arg2,arg3,(irr::core::rect< irr::s32 > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DTabBody_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::s32 arg7 ;
  irr::gui::EGUI_ALIGNMENT arg8 ;
  irr::gui::EGUI_ALIGNMENT *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  argp8 = *(irr::gui::EGUI_ALIGNMENT **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::gui::EGUI_ALIGNMENT");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DTabBody_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::s32 arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DTabBody_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6; 
  (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw3DTabBody_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1drawIcon_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jboolean jarg7, jlong jarg8, jobject jarg8_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  bool arg7 ;
  irr::core::rect< irr::s32 > *arg8 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::core::position2di const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg8_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::gui::EGUI_DEFAULT_ICON)jarg3; 
  argp4 = *(irr::core::position2di **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = *(irr::core::rect< irr::s32 > **)&jarg8; 
  (arg1)->drawIcon(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::rect< irr::s32 > const *)arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1drawIcon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jboolean jarg7) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  bool arg7 ;
  irr::core::position2di const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::gui::EGUI_DEFAULT_ICON)jarg3; 
  argp4 = *(irr::core::position2di **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawIcon(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1drawIcon_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::core::position2di const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::gui::EGUI_DEFAULT_ICON)jarg3; 
  argp4 = *(irr::core::position2di **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  (arg1)->drawIcon(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1drawIcon_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  irr::core::position2di const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::gui::EGUI_DEFAULT_ICON)jarg3; 
  argp4 = *(irr::core::position2di **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di const");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawIcon(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1drawIcon_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::core::position2di const *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::gui::EGUI_DEFAULT_ICON)jarg3; 
  argp4 = *(irr::core::position2di **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::position2di const");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawIcon(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw2DRectangle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::video::SColor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  (arg1)->draw2DRectangle(arg2,(irr::video::SColor const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1draw2DRectangle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = *(irr::video::SColor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw2DRectangle(arg2,(irr::video::SColor const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_SKIN_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  result = (irr::gui::EGUI_SKIN_TYPE)((irr::gui::IGUISkin const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUISkin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUISkin **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1drawAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  (arg1)->drawAll();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1setFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (bool)(arg1)->setFocus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIElement *)((irr::gui::IGUIEnvironment const *)arg1)->getFocus();
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getHovered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIElement *)((irr::gui::IGUIEnvironment const *)arg1)->getHovered();
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1removeFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (bool)(arg1)->removeFocus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1hasFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (bool)((irr::gui::IGUIEnvironment const *)arg1)->hasFocus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getVideoDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::video::IVideoDriver *)((irr::gui::IGUIEnvironment const *)arg1)->getVideoDriver();
  *(irr::video::IVideoDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IFileSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::io::IFileSystem *)((irr::gui::IGUIEnvironment const *)arg1)->getFileSystem();
  *(irr::io::IFileSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getOSOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::IOSOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::IOSOperator *)((irr::gui::IGUIEnvironment const *)arg1)->getOSOperator();
  *(irr::IOSOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1postEventFromUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->postEventFromUser((irr::SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1setUserEventReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::IEventReceiver *arg2 = (irr::IEventReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::IEventReceiver **)&jarg2; 
  (arg1)->setUserEventReceiver(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getSkin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUISkin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUISkin *)((irr::gui::IGUIEnvironment const *)arg1)->getSkin();
  *(irr::gui::IGUISkin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1setSkin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUISkin *arg2 = (irr::gui::IGUISkin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUISkin **)&jarg2; 
  (arg1)->setSkin(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1createSkin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::EGUI_SKIN_TYPE arg2 ;
  irr::gui::IGUISkin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = (irr::gui::EGUI_SKIN_TYPE)jarg2; 
  result = (irr::gui::IGUISkin *)(arg1)->createSkin(arg2);
  *(irr::gui::IGUISkin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1createImageList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::dimension2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::core::dimension2d< irr::s32 > *argp3 ;
  irr::gui::IGUIImageList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::dimension2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::s32 >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::gui::IGUIImageList *)(arg1)->createImageList(arg2,arg3,arg4);
  *(irr::gui::IGUIImageList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIFont *)(arg1)->getFont((irr::io::path const &)*arg2);
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIFont *arg3 = (irr::gui::IGUIFont *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIFont **)&jarg3; 
  result = (irr::gui::IGUIFont *)(arg1)->addFont((irr::io::path const &)*arg2,arg3);
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1removeFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  (arg1)->removeFont(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getBuiltInFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUIEnvironment const *)arg1)->getBuiltInFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getSpriteBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUISpriteBank *)(arg1)->getSpriteBank((irr::io::path const &)*arg2);
  *(irr::gui::IGUISpriteBank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addEmptySpriteBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUISpriteBank *)(arg1)->addEmptySpriteBank((irr::io::path const &)*arg2);
  *(irr::gui::IGUISpriteBank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getRootGUIElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIElement *)(arg1)->getRootGUIElement();
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addButton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return 0;
    }
  }
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return 0;
    }
  }
  result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5,(wchar_t const *)arg6);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addButton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return 0;
    }
  }
  result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addButton_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addButton_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addButton_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addWindow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3,(wchar_t const *)arg4,arg5,arg6);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addWindow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3,(wchar_t const *)arg4,arg5);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addWindow_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3,(wchar_t const *)arg4);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addWindow_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addWindow_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addModalScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (irr::gui::IGUIElement *)(arg1)->addModalScreen(arg2);
  *(irr::gui::IGUIElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMessageBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  irr::video::ITexture *arg8 = (irr::video::ITexture *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::gui::IGUIElement **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  arg8 = *(irr::video::ITexture **)&jarg8; 
  result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMessageBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::gui::IGUIElement **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMessageBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::gui::IGUIElement **)&jarg6; 
  result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMessageBox_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMessageBox_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = jarg4 ? true : false; 
  result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMessageBox_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMessageBox_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2);
  *(irr::gui::IGUIWindow **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addScrollBar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUIScrollBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::gui::IGUIScrollBar *)(arg1)->addScrollBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
  *(irr::gui::IGUIScrollBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addScrollBar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIScrollBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  result = (irr::gui::IGUIScrollBar *)(arg1)->addScrollBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
  *(irr::gui::IGUIScrollBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addScrollBar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIScrollBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIScrollBar *)(arg1)->addScrollBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
  *(irr::gui::IGUIScrollBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_, jint jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  irr::core::vector2d< irr::s32 > *argp3 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::vector2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  arg6 = (irr::s32)jarg6; 
  {
    arg7 = 0;
    if (jarg7) {
      arg7 = (wchar_t *)jenv->GetStringChars(jarg7, 0);
      if (!arg7) return 0;
    }
  }
  result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4,arg5,arg6,(wchar_t const *)arg7);
  *(irr::gui::IGUIImage **)&jresult = result; 
  {
    if (arg7) jenv->ReleaseStringChars(jarg7, (const jchar *) arg7); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::core::vector2d< irr::s32 > *argp3 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::vector2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4,arg5,arg6);
  *(irr::gui::IGUIImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::core::vector2d< irr::s32 > *argp3 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::vector2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4,arg5);
  *(irr::gui::IGUIImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::core::vector2d< irr::s32 > *argp3 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::vector2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4);
  *(irr::gui::IGUIImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  irr::core::vector2d< irr::s32 > *argp3 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::vector2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return 0;
  }
  arg3 = *argp3; 
  result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3);
  *(irr::gui::IGUIImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jstring jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  bool arg6 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return 0;
    }
  }
  arg6 = jarg6 ? true : false; 
  result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5,arg6);
  *(irr::gui::IGUIImage **)&jresult = result; 
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return 0;
    }
  }
  result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5);
  *(irr::gui::IGUIImage **)&jresult = result; 
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUIImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUIImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addImage_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addCheckBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  {
    arg6 = 0;
    if (jarg6) {
      arg6 = (wchar_t *)jenv->GetStringChars(jarg6, 0);
      if (!arg6) return 0;
    }
  }
  result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,(wchar_t const *)arg6);
  *(irr::gui::IGUICheckBox **)&jresult = result; 
  {
    if (arg6) jenv->ReleaseStringChars(jarg6, (const jchar *) arg6); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addCheckBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
  *(irr::gui::IGUICheckBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addCheckBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
  *(irr::gui::IGUICheckBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addCheckBox_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
  *(irr::gui::IGUICheckBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addListBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
  *(irr::gui::IGUIListBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addListBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUIListBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addListBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUIListBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addListBox_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIListBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTreeView_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::gui::IGUITreeView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTreeView_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6);
  *(irr::gui::IGUITreeView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTreeView_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
  *(irr::gui::IGUITreeView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTreeView_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUITreeView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTreeView_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUITreeView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTreeView_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUITreeView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMeshViewer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  {
    arg5 = 0;
    if (jarg5) {
      arg5 = (wchar_t *)jenv->GetStringChars(jarg5, 0);
      if (!arg5) return 0;
    }
  }
  result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5);
  *(irr::gui::IGUIMeshViewer **)&jresult = result; 
  {
    if (arg5) jenv->ReleaseStringChars(jarg5, (const jchar *) arg5); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMeshViewer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUIMeshViewer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMeshViewer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUIMeshViewer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMeshViewer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIMeshViewer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFileOpenDialog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jboolean jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::io::path::char_type *arg7 = (irr::io::path::char_type *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::io::path::char_type **)&jarg7; 
  result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFileOpenDialog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4,arg5,arg6);
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFileOpenDialog_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4,arg5);
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFileOpenDialog_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4);
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFileOpenDialog_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3);
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFileOpenDialog_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2);
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addFileOpenDialog_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog();
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addColorSelectDialog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2,arg3,arg4,arg5);
  *(irr::gui::IGUIColorSelectDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addColorSelectDialog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::gui::IGUIElement **)&jarg4; 
  result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2,arg3,arg4);
  *(irr::gui::IGUIColorSelectDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addColorSelectDialog_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = jarg3 ? true : false; 
  result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2,arg3);
  *(irr::gui::IGUIColorSelectDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addColorSelectDialog_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2);
  *(irr::gui::IGUIColorSelectDialog **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addColorSelectDialog_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog();
  *(irr::gui::IGUIColorSelectDialog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addStaticText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_, jint jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(irr::gui::IGUIElement **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  *(irr::gui::IGUIStaticText **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addStaticText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(irr::gui::IGUIElement **)&jarg6; 
  arg7 = (irr::s32)jarg7; 
  result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6,arg7);
  *(irr::gui::IGUIStaticText **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addStaticText_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(irr::gui::IGUIElement **)&jarg6; 
  result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
  *(irr::gui::IGUIStaticText **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addStaticText_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
  *(irr::gui::IGUIStaticText **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addStaticText_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
  *(irr::gui::IGUIStaticText **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addStaticText_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3);
  *(irr::gui::IGUIStaticText **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addEditBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
  *(irr::gui::IGUIEditBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addEditBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
  *(irr::gui::IGUIEditBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addEditBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
  *(irr::gui::IGUIEditBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addEditBox_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3);
  *(irr::gui::IGUIEditBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addSpinBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
  *(irr::gui::IGUISpinBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addSpinBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::gui::IGUIElement **)&jarg5; 
  result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
  *(irr::gui::IGUISpinBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addSpinBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
  *(irr::gui::IGUISpinBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addSpinBox_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3);
  *(irr::gui::IGUISpinBox **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addInOutFader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader((irr::core::rect< irr::s32 > const *)arg2,arg3,arg4);
  *(irr::gui::IGUIInOutFader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addInOutFader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader((irr::core::rect< irr::s32 > const *)arg2,arg3);
  *(irr::gui::IGUIInOutFader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addInOutFader_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2; 
  result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader((irr::core::rect< irr::s32 > const *)arg2);
  *(irr::gui::IGUIInOutFader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addInOutFader_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader();
  *(irr::gui::IGUIInOutFader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTabControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5, jint jarg6) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6);
  *(irr::gui::IGUITabControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTabControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
  *(irr::gui::IGUITabControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTabControl_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool arg4 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUITabControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTabControl_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUITabControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTabControl_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUITabControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUITab *)(arg1)->addTab((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUITab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUITab *)(arg1)->addTab((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUITab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTab_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUITab *)(arg1)->addTab((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUITab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addContextMenu_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUIContextMenu *)(arg1)->addContextMenu((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addContextMenu_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIContextMenu *)(arg1)->addContextMenu((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addContextMenu_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIContextMenu *)(arg1)->addContextMenu((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMenu_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg3 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::gui::IGUIContextMenu *)(arg1)->addMenu(arg2,arg3);
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMenu_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (irr::gui::IGUIContextMenu *)(arg1)->addMenu(arg2);
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addMenu_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIContextMenu *)(arg1)->addMenu();
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addToolBar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg3 ;
  irr::gui::IGUIToolBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::gui::IGUIToolBar *)(arg1)->addToolBar(arg2,arg3);
  *(irr::gui::IGUIToolBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addToolBar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIToolBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  result = (irr::gui::IGUIToolBar *)(arg1)->addToolBar(arg2);
  *(irr::gui::IGUIToolBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addToolBar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIToolBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIToolBar *)(arg1)->addToolBar();
  *(irr::gui::IGUIToolBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addComboBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIComboBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUIComboBox *)(arg1)->addComboBox((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUIComboBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addComboBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIComboBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIComboBox *)(arg1)->addComboBox((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUIComboBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addComboBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIComboBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUIComboBox *)(arg1)->addComboBox((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUIComboBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::gui::IGUITable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
  *(irr::gui::IGUITable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::gui::IGUITable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2,arg3);
  *(irr::gui::IGUITable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addTable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2);
  *(irr::gui::IGUITable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getDefaultGUIElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElementFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::gui::IGUIElementFactory *)((irr::gui::IGUIEnvironment const *)arg1)->getDefaultGUIElementFactory();
  *(irr::gui::IGUIElementFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1registerGUIElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElementFactory *arg2 = (irr::gui::IGUIElementFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElementFactory **)&jarg2; 
  (arg1)->registerGUIElementFactory(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getRegisteredGUIElementFactoryCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  result = (irr::u32)((irr::gui::IGUIEnvironment const *)arg1)->getRegisteredGUIElementFactoryCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1getGUIElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::u32 arg2 ;
  irr::gui::IGUIElementFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::gui::IGUIElementFactory *)((irr::gui::IGUIEnvironment const *)arg1)->getGUIElementFactory(arg2);
  *(irr::gui::IGUIElementFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addGUIElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2,arg3);
  *(irr::gui::IGUIElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1addGUIElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2);
  *(irr::gui::IGUIElement **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1saveGUI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (bool)(arg1)->saveGUI((irr::io::path const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1saveGUI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->saveGUI((irr::io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1saveGUI_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IWriteFile **)&jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (bool)(arg1)->saveGUI(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1saveGUI_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IWriteFile **)&jarg2; 
  result = (bool)(arg1)->saveGUI(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1loadGUI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (bool)(arg1)->loadGUI((irr::io::path const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1loadGUI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->loadGUI((irr::io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1loadGUI_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  result = (bool)(arg1)->loadGUI(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1loadGUI_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (bool)(arg1)->loadGUI(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1serializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  ((irr::gui::IGUIEnvironment const *)arg1)->serializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1serializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  ((irr::gui::IGUIEnvironment const *)arg1)->serializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1deserializeAttributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  (arg1)->deserializeAttributes(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1deserializeAttributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IAttributes **)&jarg2; 
  (arg1)->deserializeAttributes(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1writeGUIElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IXMLWriter **)&jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  (arg1)->writeGUIElement(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIEnvironment_1readGUIElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::io::IXMLReader **)&jarg2; 
  arg3 = *(irr::gui::IGUIElement **)&jarg3; 
  (arg1)->readGUIElement(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIFileOpenDialog_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::gui::IGUIFileOpenDialog *arg1 = (irr::gui::IGUIFileOpenDialog *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFileOpenDialog **)&jarg1; 
  result = (wchar_t *)((irr::gui::IGUIFileOpenDialog const *)arg1)->getFileName();
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIFileOpenDialog_1getDirectoryName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIFileOpenDialog *arg1 = (irr::gui::IGUIFileOpenDialog *) 0 ;
  irr::io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFileOpenDialog **)&jarg1; 
  result = (irr::io::path *) &(arg1)->getDirectoryName();
  *(irr::io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIFileOpenDialog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIFileOpenDialog *arg1 = (irr::gui::IGUIFileOpenDialog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIFileOpenDialog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1draw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg7_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  arg2 = *(irr::core::stringw **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringw const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::rect< irr::s32 > **)&jarg7; 
  (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1draw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  arg2 = *(irr::core::stringw **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringw const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1draw_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  arg2 = *(irr::core::stringw **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringw const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1draw_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  arg2 = *(irr::core::stringw **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringw const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = ((irr::gui::IGUIFont const *)arg1)->getDimension((wchar_t const *)arg2);
  *(irr::core::dimension2d< irr::u32 > **)&jresult = new irr::core::dimension2d< irr::u32 >((const irr::core::dimension2d< irr::u32 > &)result); 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1getCharacterFromPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getCharacterFromPos((wchar_t const *)arg2,arg3);
  jresult = (jint)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::gui::EGUI_FONT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  result = (irr::gui::EGUI_FONT_TYPE)((irr::gui::IGUIFont const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1setKerningWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setKerningWidth(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1setKerningHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setKerningHeight(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1getKerningWidth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningWidth((wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jint)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1getKerningWidth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningWidth((wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1getKerningWidth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1getKerningHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIFont_1setInvisibleCharacters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->setInvisibleCharacters((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIFont **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  (arg1)->setImage(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  result = (irr::video::ITexture *)((irr::gui::IGUIImage const *)arg1)->getImage();
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setColor(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1setScaleImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setScaleImage(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1setUseAlphaChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseAlphaChannel(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1getColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  result = ((irr::gui::IGUIImage const *)arg1)->getColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1isImageScaled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  result = (bool)((irr::gui::IGUIImage const *)arg1)->isImageScaled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1isAlphaChannelUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  result = (bool)((irr::gui::IGUIImage const *)arg1)->isAlphaChannelUsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIImage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIInOutFader_1getColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIInOutFader **)&jarg1; 
  result = ((irr::gui::IGUIInOutFader const *)arg1)->getColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIInOutFader_1setColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIInOutFader **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setColor(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIInOutFader_1setColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp2 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIInOutFader **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setColor(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIInOutFader_1fadeIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIInOutFader **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->fadeIn(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIInOutFader_1fadeOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIInOutFader **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->fadeOut(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIInOutFader_1isReady(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIInOutFader **)&jarg1; 
  result = (bool)((irr::gui::IGUIInOutFader const *)arg1)->isReady();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIInOutFader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIInOutFader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1getItemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  result = (irr::u32)((irr::gui::IGUIListBox const *)arg1)->getItemCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1getListItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (wchar_t *)((irr::gui::IGUIListBox const *)arg1)->getListItem(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1addItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1addItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1removeItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->removeItem(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1getItemAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::s32)((irr::gui::IGUIListBox const *)arg1)->getItemAt(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1getIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::s32)((irr::gui::IGUIListBox const *)arg1)->getIcon(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setSpriteBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::gui::IGUISpriteBank *arg2 = (irr::gui::IGUISpriteBank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = *(irr::gui::IGUISpriteBank **)&jarg2; 
  (arg1)->setSpriteBank(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1getSelected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIListBox const *)arg1)->getSelected();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setSelected_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setSelected(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setSelected_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->setSelected((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setAutoScrollEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoScrollEnabled(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1isAutoScrollEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  result = (bool)((irr::gui::IGUIListBox const *)arg1)->isAutoScrollEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setItemOverrideColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setItemOverrideColor(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setItemOverrideColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::gui::EGUI_LISTBOX_COLOR)jarg3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setItemOverrideColor(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1clearItemOverrideColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->clearItemOverrideColor(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1clearItemOverrideColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::gui::EGUI_LISTBOX_COLOR)jarg3; 
  (arg1)->clearItemOverrideColor(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1hasItemOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::gui::EGUI_LISTBOX_COLOR)jarg3; 
  result = (bool)((irr::gui::IGUIListBox const *)arg1)->hasItemOverrideColor(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1getItemOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::gui::EGUI_LISTBOX_COLOR)jarg3; 
  result = ((irr::gui::IGUIListBox const *)arg1)->getItemOverrideColor(arg2,arg3);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1getItemDefaultColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::gui::EGUI_LISTBOX_COLOR arg2 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::gui::EGUI_LISTBOX_COLOR)jarg2; 
  result = ((irr::gui::IGUIListBox const *)arg1)->getItemDefaultColor(arg2);
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return ;
    }
  }
  arg4 = (irr::s32)jarg4; 
  (arg1)->setItem(arg2,(wchar_t const *)arg3,arg4);
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1insertItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = (irr::s32)jarg4; 
  result = (irr::s32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4);
  jresult = (jint)result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1swapItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->swapItems(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setItemHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setItemHeight(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1setDrawBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBackground(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIListBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIListBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIMeshViewer_1setMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIMeshViewer **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  (arg1)->setMesh(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIMeshViewer_1getMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIMeshViewer **)&jarg1; 
  result = (irr::scene::IAnimatedMesh *)((irr::gui::IGUIMeshViewer const *)arg1)->getMesh();
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIMeshViewer_1setMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIMeshViewer **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  (arg1)->setMaterial((irr::video::SMaterial const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIMeshViewer_1getMaterialConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIMeshViewer **)&jarg1; 
  result = (irr::video::SMaterial *) &((irr::gui::IGUIMeshViewer const *)arg1)->getMaterial();
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIMeshViewer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIMeshViewer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setMax(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setMin(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1getMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getMin();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1getSmallStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getSmallStep();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1setSmallStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setSmallStep(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1getLargeStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getLargeStep();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1setLargeStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setLargeStep(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1getPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getPos();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1setPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setPos(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIScrollBar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIScrollBar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setOverrideFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  arg2 = *(irr::gui::IGUIFont **)&jarg2; 
  (arg1)->setOverrideFont(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setOverrideFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  (arg1)->setOverrideFont();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1getOverrideFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUIStaticText const *)arg1)->getOverrideFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1getActiveFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (irr::gui::IGUIFont *)((irr::gui::IGUIStaticText const *)arg1)->getActiveFont();
  *(irr::gui::IGUIFont **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setOverrideColor(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1getOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = ((irr::gui::IGUIStaticText const *)arg1)->getOverrideColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1enableOverrideColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableOverrideColor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1isOverrideColorEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isOverrideColorEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setBackgroundColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setBackgroundColor(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setDrawBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBackground(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1getBackgroundColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = ((irr::gui::IGUIStaticText const *)arg1)->getBackgroundColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1isDrawBackgroundEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isDrawBackgroundEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setDrawBorder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBorder(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1isDrawBorderEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isDrawBorderEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setTextAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  EGUI_ALIGNMENT arg2 ;
  EGUI_ALIGNMENT arg3 ;
  EGUI_ALIGNMENT *argp2 ;
  EGUI_ALIGNMENT *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  argp2 = *(EGUI_ALIGNMENT **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(EGUI_ALIGNMENT **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setTextAlignment(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setWordWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWordWrap(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1isWordWrapEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isWordWrapEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1getTextHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIStaticText const *)arg1)->getTextHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1getTextWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIStaticText const *)arg1)->getTextWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setTextRestrainedInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTextRestrainedInside(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1isTextRestrainedInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isTextRestrainedInside();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1setRightToLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRightToLeft(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1isRightToLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isRightToLeft();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIStaticText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIStaticText **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1getNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUITab const *)arg1)->getNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1setDrawBackground_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDrawBackground(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1setDrawBackground_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  (arg1)->setDrawBackground();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1setBackgroundColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setBackgroundColor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1isDrawingBackground(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  result = (bool)((irr::gui::IGUITab const *)arg1)->isDrawingBackground();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1getBackgroundColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  result = ((irr::gui::IGUITab const *)arg1)->getBackgroundColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1setTextColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTextColor(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1getTextColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  result = ((irr::gui::IGUITab const *)arg1)->getTextColor();
  *(irr::video::SColor **)&jresult = new irr::video::SColor((const irr::video::SColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUITab(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUITab **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1addTab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::s32)jarg3; 
  result = (irr::gui::IGUITab *)(arg1)->addTab((wchar_t const *)arg2,arg3);
  *(irr::gui::IGUITab **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1addTab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::gui::IGUITab *)(arg1)->addTab((wchar_t const *)arg2);
  *(irr::gui::IGUITab **)&jresult = result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1insertTab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  arg4 = (irr::s32)jarg4; 
  result = (irr::gui::IGUITab *)(arg1)->insertTab(arg2,(wchar_t const *)arg3,arg4);
  *(irr::gui::IGUITab **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1insertTab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::gui::IGUITab *)(arg1)->insertTab(arg2,(wchar_t const *)arg3);
  *(irr::gui::IGUITab **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1removeTab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->removeTab(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getTabCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getTab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  irr::gui::IGUITab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::gui::IGUITab *)((irr::gui::IGUITabControl const *)arg1)->getTab(arg2);
  *(irr::gui::IGUITab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1setActiveTab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (bool)(arg1)->setActiveTab(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1setActiveTab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::gui::IGUITab *arg2 = (irr::gui::IGUITab *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = *(irr::gui::IGUITab **)&jarg2; 
  result = (bool)(arg1)->setActiveTab(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getActiveTab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getActiveTab();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getTabAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabAt(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1setTabHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setTabHeight(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getTabHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1setTabMaxWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setTabMaxWidth(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getTabMaxWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabMaxWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1setTabVerticalAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg2 ;
  irr::gui::EGUI_ALIGNMENT *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  argp2 = *(irr::gui::EGUI_ALIGNMENT **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::gui::EGUI_ALIGNMENT");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTabVerticalAlignment(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getTabVerticalAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::gui::EGUI_ALIGNMENT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  result = ((irr::gui::IGUITabControl const *)arg1)->getTabVerticalAlignment();
  *(irr::gui::EGUI_ALIGNMENT **)&jresult = new irr::gui::EGUI_ALIGNMENT((const irr::gui::EGUI_ALIGNMENT &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1setTabExtraWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setTabExtraWidth(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1getTabExtraWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabExtraWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUITabControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUITabControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1getItemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  result = (irr::u32)((irr::gui::IGUIComboBox const *)arg1)->getItemCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1getItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (wchar_t *)((irr::gui::IGUIComboBox const *)arg1)->getItem(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1getItemData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::u32)((irr::gui::IGUIComboBox const *)arg1)->getItemData(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1getIndexForItemData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::s32)((irr::gui::IGUIComboBox const *)arg1)->getIndexForItemData(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1addItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 arg3 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  arg3 = (irr::u32)jarg3; 
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1addItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1removeItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->removeItem(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1getSelected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIComboBox const *)arg1)->getSelected();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1setSelected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setSelected(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1setTextAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  EGUI_ALIGNMENT arg2 ;
  EGUI_ALIGNMENT arg3 ;
  EGUI_ALIGNMENT *argp2 ;
  EGUI_ALIGNMENT *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  argp2 = *(EGUI_ALIGNMENT **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(EGUI_ALIGNMENT **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null EGUI_ALIGNMENT");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setTextAlignment(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1setMaxSelectionRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setMaxSelectionRows(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1getMaxSelectionRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  result = (irr::u32)((irr::gui::IGUIComboBox const *)arg1)->getMaxSelectionRows();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIComboBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIComboBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jboolean jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  bool arg7 ;
  bool arg8 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  arg5 = *(irr::video::ITexture **)&jarg5; 
  arg6 = *(irr::video::ITexture **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7,arg8);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  bool arg7 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  arg5 = *(irr::video::ITexture **)&jarg5; 
  arg6 = *(irr::video::ITexture **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  arg5 = *(irr::video::ITexture **)&jarg5; 
  arg6 = *(irr::video::ITexture **)&jarg6; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  arg5 = *(irr::video::ITexture **)&jarg5; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  {
    arg4 = 0;
    if (jarg4) {
      arg4 = (wchar_t *)jenv->GetStringChars(jarg4, 0);
      if (!arg4) return 0;
    }
  }
  result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  {
    if (arg4) jenv->ReleaseStringChars(jarg4, (const jchar *) arg4); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3);
  *(irr::gui::IGUIButton **)&jresult = result; 
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2);
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1addButton_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  result = (irr::gui::IGUIButton *)(arg1)->addButton();
  *(irr::gui::IGUIButton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIToolBar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIToolBar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IGUIColorSelectDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg3 ;
  irr::core::rect< irr::s32 > arg4 ;
  irr::core::rect< irr::s32 > *argp4 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUIEnvironment **)&jarg1; 
  arg2 = *(irr::gui::IGUIElement **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  argp4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::rect< irr::s32 >");
    return 0;
  }
  arg4 = *argp4; 
  result = (irr::gui::IGUIColorSelectDialog *)new irr::gui::IGUIColorSelectDialog(arg1,arg2,arg3,arg4);
  *(irr::gui::IGUIColorSelectDialog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIColorSelectDialog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIColorSelectDialog *arg1 = (irr::gui::IGUIColorSelectDialog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIColorSelectDialog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SGUISpriteFrame_1textureNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::SGUISpriteFrame *arg1 = (irr::gui::SGUISpriteFrame *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISpriteFrame **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->textureNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SGUISpriteFrame_1textureNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::SGUISpriteFrame *arg1 = (irr::gui::SGUISpriteFrame *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISpriteFrame **)&jarg1; 
  result = (irr::u32) ((arg1)->textureNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SGUISpriteFrame_1rectNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::SGUISpriteFrame *arg1 = (irr::gui::SGUISpriteFrame *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISpriteFrame **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->rectNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SGUISpriteFrame_1rectNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::SGUISpriteFrame *arg1 = (irr::gui::SGUISpriteFrame *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISpriteFrame **)&jarg1; 
  result = (irr::u32) ((arg1)->rectNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SGUISpriteFrame(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::gui::SGUISpriteFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::gui::SGUISpriteFrame *)new irr::gui::SGUISpriteFrame();
  *(irr::gui::SGUISpriteFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SGUISpriteFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::SGUISpriteFrame *arg1 = (irr::gui::SGUISpriteFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::SGUISpriteFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SGUISprite(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::gui::SGUISprite *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::gui::SGUISprite *)new irr::gui::SGUISprite();
  *(irr::gui::SGUISprite **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SGUISprite_1Frames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::SGUISprite *arg1 = (irr::gui::SGUISprite *) 0 ;
  irr::core::array< irr::gui::SGUISpriteFrame,irrAllocator< irr::gui::SGUISpriteFrame > > *arg2 = (irr::core::array< irr::gui::SGUISpriteFrame,irrAllocator< irr::gui::SGUISpriteFrame > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISprite **)&jarg1; 
  arg2 = *(irr::core::array< irr::gui::SGUISpriteFrame,irrAllocator< irr::gui::SGUISpriteFrame > > **)&jarg2; 
  if (arg1) (arg1)->Frames = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SGUISprite_1Frames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::SGUISprite *arg1 = (irr::gui::SGUISprite *) 0 ;
  irr::core::array< irr::gui::SGUISpriteFrame,irrAllocator< irr::gui::SGUISpriteFrame > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISprite **)&jarg1; 
  result = (irr::core::array< irr::gui::SGUISpriteFrame,irrAllocator< irr::gui::SGUISpriteFrame > > *)& ((arg1)->Frames);
  *(irr::core::array< irr::gui::SGUISpriteFrame,irrAllocator< irr::gui::SGUISpriteFrame > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SGUISprite_1frameTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::gui::SGUISprite *arg1 = (irr::gui::SGUISprite *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISprite **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->frameTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SGUISprite_1frameTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::SGUISprite *arg1 = (irr::gui::SGUISprite *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SGUISprite **)&jarg1; 
  result = (irr::u32) ((arg1)->frameTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SGUISprite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::SGUISprite *arg1 = (irr::gui::SGUISprite *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::SGUISprite **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1getPositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  result = (irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *) &(arg1)->getPositions();
  *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1getSprites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::gui::SGUISprite,irrAllocator< irr::gui::SGUISprite > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  result = (irr::core::array< irr::gui::SGUISprite,irrAllocator< irr::gui::SGUISprite > > *) &(arg1)->getSprites();
  *(irr::core::array< irr::gui::SGUISprite,irrAllocator< irr::gui::SGUISprite > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1getTextureCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  result = (irr::u32)((irr::gui::IGUISpriteBank const *)arg1)->getTextureCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1getTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::ITexture *)((irr::gui::IGUISpriteBank const *)arg1)->getTexture(arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1addTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  (arg1)->addTexture(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1setTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::video::ITexture **)&jarg3; 
  (arg1)->setTexture(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1addTextureAsSprite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  result = (irr::s32)(arg1)->addTextureAsSprite(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSprite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jboolean jarg8, jboolean jarg9) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  bool arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::position2di **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSprite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jboolean jarg8) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::position2di **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSprite_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::position2di **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSprite_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::position2di **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSprite_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::position2di **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSprite_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::position2di **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSprite_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::position2di **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::position2di const & reference is null");
    return ;
  } 
  (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSpriteBatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jboolean jarg8, jboolean jarg9) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  bool arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSpriteBatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jboolean jarg8) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSpriteBatch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSpriteBatch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg6 = (irr::u32)jarg6; 
  (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSpriteBatch_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSpriteBatch_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IGUISpriteBank_1draw2DSpriteBatch_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const & reference is null");
    return ;
  } 
  (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irrAllocator< irr::core::position2di > > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUISpriteBank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFontBitmap_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  irr::gui::EGUI_FONT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFontBitmap **)&jarg1; 
  result = (irr::gui::EGUI_FONT_TYPE)((irr::gui::IGUIFontBitmap const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIFontBitmap_1getSpriteBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFontBitmap **)&jarg1; 
  result = (irr::gui::IGUISpriteBank *)((irr::gui::IGUIFontBitmap const *)arg1)->getSpriteBank();
  *(irr::gui::IGUISpriteBank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIFontBitmap_1getSpriteNoFromChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFontBitmap **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::u32)((irr::gui::IGUIFontBitmap const *)arg1)->getSpriteNoFromChar((wchar_t const *)arg2);
  jresult = (jlong)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFontBitmap_1getKerningWidth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFontBitmap **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  {
    arg3 = 0;
    if (jarg3) {
      arg3 = (wchar_t *)jenv->GetStringChars(jarg3, 0);
      if (!arg3) return 0;
    }
  }
  result = (irr::s32)((irr::gui::IGUIFontBitmap const *)arg1)->getKerningWidth((wchar_t const *)arg2,(wchar_t const *)arg3);
  jresult = (jint)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  {
    if (arg3) jenv->ReleaseStringChars(jarg3, (const jchar *) arg3); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFontBitmap_1getKerningWidth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFontBitmap **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (irr::s32)((irr::gui::IGUIFontBitmap const *)arg1)->getKerningWidth((wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGUIFontBitmap_1getKerningWidth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIFontBitmap **)&jarg1; 
  result = (irr::s32)((irr::gui::IGUIFontBitmap const *)arg1)->getKerningWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGUIFontBitmap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::IGUIFontBitmap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1setLightData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::SLight *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  arg2 = *(irr::video::SLight **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SLight const & reference is null");
    return ;
  } 
  (arg1)->setLightData((irr::video::SLight const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1getLightData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::SLight *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  result = (irr::video::SLight *) &((irr::scene::ILightSceneNode const *)arg1)->getLightData();
  *(irr::video::SLight **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1setVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1setRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1getRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  result = (irr::f32)((irr::scene::ILightSceneNode const *)arg1)->getRadius();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1setLightType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::E_LIGHT_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  arg2 = (irr::video::E_LIGHT_TYPE)jarg2; 
  (arg1)->setLightType(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1getLightType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::E_LIGHT_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  result = (irr::video::E_LIGHT_TYPE)((irr::scene::ILightSceneNode const *)arg1)->getLightType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1enableCastShadow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableCastShadow(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1enableCastShadow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  (arg1)->enableCastShadow();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1getCastShadow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  result = (bool)((irr::scene::ILightSceneNode const *)arg1)->getCastShadow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ILightSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ILightSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1flipSurfaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  ((irr::scene::IMeshManipulator const *)arg1)->flipSurfaces(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1setVertexColorAlpha_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  ((irr::scene::IMeshManipulator const *)arg1)->setVertexColorAlpha(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1setVertexColorAlpha_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  ((irr::scene::IMeshManipulator const *)arg1)->setVertexColorAlpha(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1setVertexColors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  ((irr::scene::IMeshManipulator const *)arg1)->setVertexColors(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1setVertexColors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  ((irr::scene::IMeshManipulator const *)arg1)->setVertexColors(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateNormals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateNormals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateNormals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateNormals_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateNormals_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateNormals_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1recalculateTangents_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->scale(arg2,(irr::core::vector3df const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->scale(arg2,(irr::core::vector3df const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1scaleMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->scaleMesh(arg2,(irr::core::vector3df const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1scaleTCoords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  irr::u32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::core::vector2df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return ;
  } 
  arg4 = (irr::u32)jarg4; 
  ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1scaleTCoords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::core::vector2df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1scaleTCoords_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  irr::u32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = *(irr::core::vector2df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return ;
  } 
  arg4 = (irr::u32)jarg4; 
  ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1scaleTCoords_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = *(irr::core::vector2df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2df const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->transform(arg2,(irr::core::matrix4 const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->transform(arg2,(irr::core::matrix4 const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1transformMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->transformMesh(arg2,(irr::core::matrix4 const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1makePlanarTextureMapping_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1makePlanarTextureMapping_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1makePlanarTextureMapping_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1makePlanarTextureMapping_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1makePlanarTextureMapping_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jshort jarg5, jlong jarg6, jobject jarg6_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::u8 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::u8)jarg5; 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1makePlanarTextureMapping_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jshort jarg5, jlong jarg6, jobject jarg6_) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::u8 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::u8)jarg5; 
  arg6 = *(irr::core::vector3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::SMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::SMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshCopy(arg2);
  *(irr::scene::SMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWithTangents_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3,arg4,arg5,arg6);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWithTangents_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3,arg4,arg5);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWithTangents_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3,arg4);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWithTangents_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWithTangents_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWith2TCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWith2TCoords(arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWith1TCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWith1TCoords(arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshUniquePrimitives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshUniquePrimitives(arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWelded_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWelded(arg2,arg3);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createMeshWelded_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWelded(arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1getPolyCount_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::s32)((irr::scene::IMeshManipulator const *)arg1)->getPolyCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1getPolyCount_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMesh **)&jarg2; 
  result = (irr::s32)((irr::scene::IMeshManipulator const *)arg1)->getPolyCount(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createAnimatedMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE arg3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::scene::E_ANIMATED_MESH_TYPE)jarg3; 
  result = (irr::scene::IAnimatedMesh *)((irr::scene::IMeshManipulator const *)arg1)->createAnimatedMesh(arg2,arg3);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createAnimatedMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IAnimatedMesh *)((irr::scene::IMeshManipulator const *)arg1)->createAnimatedMesh(arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshManipulator_1createForsythOptimizedMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createForsythOptimizedMesh((irr::scene::IMesh const *)arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMeshManipulator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IMeshManipulator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMetaTriangleSelector_1addTriangleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMetaTriangleSelector **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  (arg1)->addTriangleSelector(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMetaTriangleSelector_1removeTriangleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMetaTriangleSelector **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  result = (bool)(arg1)->removeTriangleSelector(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMetaTriangleSelector_1removeAllTriangleSelectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMetaTriangleSelector **)&jarg1; 
  (arg1)->removeAllTriangleSelectors();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMetaTriangleSelector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IMetaTriangleSelector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IReadFile_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IReadFile **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (irr::s32)(arg1)->read(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IReadFile_1seek_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IReadFile **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->seek(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IReadFile_1seek_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IReadFile **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->seek(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IReadFile_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IReadFile **)&jarg1; 
  result = (long)((irr::io::IReadFile const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IReadFile_1getPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IReadFile **)&jarg1; 
  result = (long)((irr::io::IReadFile const *)arg1)->getPos();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IReadFile_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  irr::io::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IReadFile **)&jarg1; 
  result = (irr::io::path *) &((irr::io::IReadFile const *)arg1)->getFileName();
  *(irr::io::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IReadFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IReadFile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IImageLoader_1isALoadableFileExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IImageLoader **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::IImageLoader const *)arg1)->isALoadableFileExtension((irr::io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IImageLoader_1isALoadableFileFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImageLoader **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (bool)((irr::video::IImageLoader const *)arg1)->isALoadableFileFormat(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IImageLoader_1loadImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IImageLoader **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::video::IImage *)((irr::video::IImageLoader const *)arg1)->loadImage(arg2);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IImageLoader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IImageLoader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IGPUProgrammingServices(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15, jint jarg16, jint jarg17) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg17 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  arg16 = (irr::s32)jarg16; 
  arg17 = (irr::video::E_GPU_SHADING_LANGUAGE)jarg17; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15, jint jarg16) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  arg16 = (irr::s32)jarg16; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10, jlong jarg11) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9, jlong jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8, jstring jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jstring jarg8) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (irr::c8 *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10, jint jarg11) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg11 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  arg11 = (irr::video::E_GPU_SHADING_LANGUAGE)jarg11; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jlong jarg7) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5, jstring jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (irr::c8 *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);*/
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);*/
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (irr::c8 *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (irr::c8 *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (irr::c8 *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (irr::c8 *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (irr::c8 *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (irr::c8 *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterial_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (irr::c8 *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15, jint jarg16, jint jarg17) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg17 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  arg16 = (irr::s32)jarg16; 
  arg17 = (irr::video::E_GPU_SHADING_LANGUAGE)jarg17; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15, jint jarg16) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  arg16 = (irr::s32)jarg16; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10, jlong jarg11) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jstring jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::path **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10, jint jarg11) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg11 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  arg11 = (irr::video::E_GPU_SHADING_LANGUAGE)jarg11; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::path **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  */
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  /*irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2);
  jresult = (jint)result; */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; */
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5);
  jresult = (jint)result; */
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4);
  jresult = (jint)result; */
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3);
  jresult = (jint)result; */
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (irr::u32)jarg7; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp6 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg6 = *argp6; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  argp5 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::io::path **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15, jint jarg16, jint jarg17) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg17 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  arg16 = (irr::s32)jarg16; 
  arg17 = (irr::video::E_GPU_SHADING_LANGUAGE)jarg17; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15, jint jarg16) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  arg16 = (irr::s32)jarg16; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_, jlong jarg15) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg15 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  E_MATERIAL_TYPE *argp15 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  argp15 = *(E_MATERIAL_TYPE **)&jarg15; 
  if (!argp15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg15 = *argp15; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jobject jarg14_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg14_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = *(irr::video::IShaderConstantSetCallBack **)&jarg14; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (irr::u32)jarg13; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jlong jarg11, jlong jarg12) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::scene::E_PRIMITIVE_TYPE *argp12 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  argp12 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg12; 
  if (!argp12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg12 = *argp12; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10, jlong jarg11) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::scene::E_PRIMITIVE_TYPE *argp11 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  argp11 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg11; 
  if (!argp11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return 0;
  }
  arg11 = *argp11; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9, jlong jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_GEOMETRY_SHADER_TYPE arg10 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_GEOMETRY_SHADER_TYPE *argp10 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  argp10 = *(E_GEOMETRY_SHADER_TYPE **)&jarg10; 
  if (!argp10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_GEOMETRY_SHADER_TYPE");
    return 0;
  }
  arg10 = *argp10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jstring jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (irr::c8 *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::io::IReadFile **)&jarg8; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10, jint jarg11) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg11 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  arg11 = (irr::video::E_GPU_SHADING_LANGUAGE)jarg11; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jint jarg10) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  arg10 = (irr::s32)jarg10; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg9 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  E_MATERIAL_TYPE *argp9 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  argp9 = *(E_MATERIAL_TYPE **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg9 = *argp9; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = *(irr::video::IShaderConstantSetCallBack **)&jarg8; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_145(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_PIXEL_SHADER_TYPE arg7 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  E_PIXEL_SHADER_TYPE *argp7 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  argp7 = *(E_PIXEL_SHADER_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_PIXEL_SHADER_TYPE");
    return 0;
  }
  arg7 = *argp7; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_146(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jstring jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (irr::c8 *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_147(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(irr::io::IReadFile **)&jarg5; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_148(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  E_VERTEX_SHADER_TYPE arg4 ;
  E_VERTEX_SHADER_TYPE *argp4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(E_VERTEX_SHADER_TYPE **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VERTEX_SHADER_TYPE");
    return 0;
  }
  arg4 = *argp4; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_149(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addHighLevelShaderMaterialFromFiles_1_1SWIG_150(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterial_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterial_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterial_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterial_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterial_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  result = (irr::s32)(arg1)->addShaderMaterial();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::io::IReadFile **)&jarg3; 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::io::IReadFile **)&jarg3; 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::io::IReadFile **)&jarg3; 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = *(irr::io::IReadFile **)&jarg3; 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jint jarg6) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (irr::s32)jarg6; 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  E_MATERIAL_TYPE arg5 ;
  E_MATERIAL_TYPE *argp5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  argp5 = *(E_MATERIAL_TYPE **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_MATERIAL_TYPE");
    return 0;
  }
  arg5 = *argp5; 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = *(irr::video::IShaderConstantSetCallBack **)&jarg4; 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IGPUProgrammingServices_1addShaderMaterialFromFiles_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IGPUProgrammingServices **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMaterialRendererServices(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setBasicRenderStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::video::SMaterial *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  arg3 = *(irr::video::SMaterial **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->setBasicRenderStates((irr::video::SMaterial const &)*arg2,(irr::video::SMaterial const &)*arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setVertexShaderConstant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloatArray jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 *arg3 = (irr::f32 *) 0 ;
  int arg4 ;
  jfloat *jarr3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, &arg3, jarg3)) return 0; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->setVertexShaderConstant((irr::c8 const *)arg2,(irr::f32 const *)arg3,arg4);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, arg3, jarg3); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setVertexShaderConstant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool *arg3 = (bool *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(bool **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->setVertexShaderConstant((irr::c8 const *)arg2,(bool const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setVertexShaderConstant_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 *arg3 = (irr::s32 *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::s32 **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->setVertexShaderConstant((irr::c8 const *)arg2,(irr::s32 const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setVertexShaderConstant_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3, jint jarg4) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->setVertexShaderConstant((irr::f32 const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setVertexShaderConstant_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setVertexShaderConstant((irr::f32 const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setPixelShaderConstant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloatArray jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 *arg3 = (irr::f32 *) 0 ;
  int arg4 ;
  jfloat *jarr3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  if (!SWIG_JavaArrayInFloat(jenv, &jarr3, &arg3, jarg3)) return 0; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->setPixelShaderConstant((irr::c8 const *)arg2,(irr::f32 const *)arg3,arg4);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr3, arg3, jarg3); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setPixelShaderConstant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool *arg3 = (bool *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(bool **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->setPixelShaderConstant((irr::c8 const *)arg2,(bool const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setPixelShaderConstant_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 *arg3 = (irr::s32 *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::s32 **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->setPixelShaderConstant((irr::c8 const *)arg2,(irr::s32 const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setPixelShaderConstant_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3, jint jarg4) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->setPixelShaderConstant((irr::f32 const *)arg2,arg3,arg4);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1setPixelShaderConstant_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setPixelShaderConstant((irr::f32 const *)arg2,arg3);
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRendererServices_1getVideoDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRendererServices **)&jarg1; 
  result = (irr::video::IVideoDriver *)(arg1)->getVideoDriver();
  *(irr::video::IVideoDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRenderer_1OnSetMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::video::SMaterial *arg3 = 0 ;
  bool arg4 ;
  irr::video::IMaterialRendererServices *arg5 = (irr::video::IMaterialRendererServices *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(irr::video::IMaterialRenderer **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  arg3 = *(irr::video::SMaterial **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::video::IMaterialRendererServices **)&jarg5; 
  (arg1)->OnSetMaterial((irr::video::SMaterial const &)*arg2,(irr::video::SMaterial const &)*arg3,arg4,arg5);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRenderer_1OnRender(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  irr::video::IMaterialRendererServices *arg2 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::video::E_VERTEX_TYPE arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IMaterialRenderer **)&jarg1; 
  arg2 = *(irr::video::IMaterialRendererServices **)&jarg2; 
  arg3 = (irr::video::E_VERTEX_TYPE)jarg3; 
  result = (bool)(arg1)->OnRender(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRenderer_1OnUnsetMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRenderer **)&jarg1; 
  (arg1)->OnUnsetMaterial();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRenderer_1isTransparent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRenderer **)&jarg1; 
  result = (bool)((irr::video::IMaterialRenderer const *)arg1)->isTransparent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMaterialRenderer_1getRenderCapability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IMaterialRenderer **)&jarg1; 
  result = (irr::s32)((irr::video::IMaterialRenderer const *)arg1)->getRenderCapability();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IMaterialRenderer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::IMaterialRenderer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::IMaterialRenderer *)new irr::video::IMaterialRenderer();
  *(irr::video::IMaterialRenderer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMaterialRenderer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IMaterialRenderer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_FogTypeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::video::FogTypeNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SOverrideMaterial_1EnableFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->EnableFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SOverrideMaterial_1EnableFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  result = (irr::u32) ((arg1)->EnableFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SOverrideMaterial_1EnablePasses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  irr::u16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  arg2 = (irr::u16)jarg2; 
  if (arg1) (arg1)->EnablePasses = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SOverrideMaterial_1EnablePasses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  irr::u16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  result = (irr::u16) ((arg1)->EnablePasses);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SOverrideMaterial_1Enabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SOverrideMaterial_1Enabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  result = (bool) ((arg1)->Enabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SOverrideMaterial(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::SOverrideMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::SOverrideMaterial *)new irr::video::SOverrideMaterial();
  *(irr::video::SOverrideMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SOverrideMaterial_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial & reference is null");
    return ;
  } 
  (arg1)->apply(*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SOverrideMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::SOverrideMaterial *arg1 = (irr::video::SOverrideMaterial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::SOverrideMaterial **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::E_BLEND_FACTOR arg3 ;
  irr::video::E_BLEND_FACTOR arg4 ;
  irr::video::E_BLEND_OPERATION arg5 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  arg3 = (irr::video::E_BLEND_FACTOR)jarg3; 
  arg4 = (irr::video::E_BLEND_FACTOR)jarg4; 
  arg5 = (irr::video::E_BLEND_OPERATION)jarg5; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2,arg3,arg4,arg5);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::E_BLEND_FACTOR arg3 ;
  irr::video::E_BLEND_FACTOR arg4 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  arg3 = (irr::video::E_BLEND_FACTOR)jarg3; 
  arg4 = (irr::video::E_BLEND_FACTOR)jarg4; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2,arg3,arg4);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::E_BLEND_FACTOR arg3 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  arg3 = (irr::video::E_BLEND_FACTOR)jarg3; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2,arg3);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::ITexture **)&jarg1; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::video::E_RENDER_TARGET arg1 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::E_BLEND_FACTOR arg3 ;
  irr::video::E_BLEND_FACTOR arg4 ;
  irr::video::E_BLEND_OPERATION arg5 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_RENDER_TARGET)jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  arg3 = (irr::video::E_BLEND_FACTOR)jarg3; 
  arg4 = (irr::video::E_BLEND_FACTOR)jarg4; 
  arg5 = (irr::video::E_BLEND_OPERATION)jarg5; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2,arg3,arg4,arg5);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::video::E_RENDER_TARGET arg1 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::E_BLEND_FACTOR arg3 ;
  irr::video::E_BLEND_FACTOR arg4 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_RENDER_TARGET)jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  arg3 = (irr::video::E_BLEND_FACTOR)jarg3; 
  arg4 = (irr::video::E_BLEND_FACTOR)jarg4; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2,arg3,arg4);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::video::E_RENDER_TARGET arg1 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::E_BLEND_FACTOR arg3 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_RENDER_TARGET)jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  arg3 = (irr::video::E_BLEND_FACTOR)jarg3; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2,arg3);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  irr::video::E_RENDER_TARGET arg1 ;
  irr::video::E_COLOR_PLANE arg2 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_RENDER_TARGET)jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1,arg2);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IRenderTarget_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::video::E_RENDER_TARGET arg1 ;
  irr::video::IRenderTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_RENDER_TARGET)jarg1; 
  result = (irr::video::IRenderTarget *)new irr::video::IRenderTarget(arg1);
  *(irr::video::IRenderTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::IRenderTarget *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  arg2 = *(irr::video::IRenderTarget **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::IRenderTarget const & reference is null");
    return 0;
  } 
  result = (bool)((irr::video::IRenderTarget const *)arg1)->operator !=((irr::video::IRenderTarget const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1RenderTexture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  if (arg1) (arg1)->RenderTexture = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1RenderTexture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  result = (irr::video::ITexture *) ((arg1)->RenderTexture);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1TargetType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  arg2 = (irr::video::E_RENDER_TARGET)jarg2; 
  if (arg1) (arg1)->TargetType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1TargetType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_RENDER_TARGET result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  result = (irr::video::E_RENDER_TARGET) ((arg1)->TargetType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1ColorMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_COLOR_PLANE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  arg2 = (irr::video::E_COLOR_PLANE)jarg2; 
  if (arg1) (arg1)->ColorMask = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1ColorMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_COLOR_PLANE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  result = (irr::video::E_COLOR_PLANE) ((arg1)->ColorMask);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1BlendFuncSrc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  arg2 = (irr::video::E_BLEND_FACTOR)jarg2; 
  if (arg1) (arg1)->BlendFuncSrc = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1BlendFuncSrc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_BLEND_FACTOR result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  result = (irr::video::E_BLEND_FACTOR) ((arg1)->BlendFuncSrc);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1BlendFuncDst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  arg2 = (irr::video::E_BLEND_FACTOR)jarg2; 
  if (arg1) (arg1)->BlendFuncDst = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1BlendFuncDst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_BLEND_FACTOR result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  result = (irr::video::E_BLEND_FACTOR) ((arg1)->BlendFuncDst);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1BlendOp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_BLEND_OPERATION arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  arg2 = (irr::video::E_BLEND_OPERATION)jarg2; 
  if (arg1) (arg1)->BlendOp = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IRenderTarget_1BlendOp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  irr::video::E_BLEND_OPERATION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  result = (irr::video::E_BLEND_OPERATION) ((arg1)->BlendOp);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IRenderTarget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IRenderTarget *arg1 = (irr::video::IRenderTarget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IRenderTarget **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1beginScene_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  SExposedVideoData *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(SExposedVideoData **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SExposedVideoData const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::rect< irr::s32 > **)&jarg6; 
  result = (bool)(arg1)->beginScene(arg2,arg3,arg4,(SExposedVideoData const &)*arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1beginScene_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  SExposedVideoData *arg5 = 0 ;
  irr::video::SColor *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(SExposedVideoData **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SExposedVideoData const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->beginScene(arg2,arg3,arg4,(SExposedVideoData const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1beginScene_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->beginScene(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1beginScene_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->beginScene(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1beginScene_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->beginScene(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1beginScene_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (bool)(arg1)->beginScene();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1endScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (bool)(arg1)->endScene();
  jresult = (jboolean)result; 
  return jresult;
}

//my function
SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setTransformationAsInNode(JNIEnv *jenv, jclass jcls, jlong driverPointer, jlong nodePointer) {
	IVideoDriver*driver=(IVideoDriver*)driverPointer;
	if(nodePointer==0){
		driver->setTransform(video::ETS_WORLD, core::IdentityMatrix);
	}else{
		ISceneNode*node=(ISceneNode*)nodePointer;
		matrix4 transform=node->getAbsoluteTransformation();
		driver->setTransform(ETS_WORLD, transform);
	}
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1resetTransformMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IVideoDriver *driver = (irr::video::IVideoDriver *)  jarg1;
  driver->setTransform(video::ETS_WORLD, core::IdentityMatrix);
}

SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1queryFeature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  E_VIDEO_DRIVER_FEATURE arg2 ;
  E_VIDEO_DRIVER_FEATURE *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(E_VIDEO_DRIVER_FEATURE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VIDEO_DRIVER_FEATURE");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((irr::video::IVideoDriver const *)arg1)->queryFeature(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1disableFeature_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  E_VIDEO_DRIVER_FEATURE arg2 ;
  bool arg3 ;
  E_VIDEO_DRIVER_FEATURE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(E_VIDEO_DRIVER_FEATURE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VIDEO_DRIVER_FEATURE");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->disableFeature(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1disableFeature_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  E_VIDEO_DRIVER_FEATURE arg2 ;
  E_VIDEO_DRIVER_FEATURE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(E_VIDEO_DRIVER_FEATURE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_VIDEO_DRIVER_FEATURE");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->disableFeature(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getDriverAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::io::IAttributes *) &((irr::video::IVideoDriver const *)arg1)->getDriverAttributes();
  *(irr::io::IAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1checkDriverReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (bool)(arg1)->checkDriverReset();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TRANSFORMATION_STATE arg2 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_TRANSFORMATION_STATE)jarg2; 
  arg3 = *(irr::core::matrix4 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 const & reference is null");
    return ;
  } 
  (arg1)->setTransform(arg2,(irr::core::matrix4 const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TRANSFORMATION_STATE arg2 ;
  irr::core::matrix4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_TRANSFORMATION_STATE)jarg2; 
  result = (irr::core::matrix4 *) &((irr::video::IVideoDriver const *)arg1)->getTransform(arg2);
  *(irr::core::matrix4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getImageLoaderCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getImageLoaderCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getImageLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::IImageLoader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::IImageLoader *)(arg1)->getImageLoader(arg2);
  *(irr::video::IImageLoader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getImageWriterCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getImageWriterCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getImageWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::IImageWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::IImageWriter *)(arg1)->getImageWriter(arg2);
  *(irr::video::IImageWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  (arg1)->setMaterial((irr::video::SMaterial const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::video::ITexture *)(arg1)->getTexture((irr::io::path const &)*arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::video::ITexture *)(arg1)->getTexture(arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getTextureByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::ITexture *)(arg1)->getTextureByIndex(arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getTextureCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getTextureCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1renameTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return ;
  } 
  (arg1)->renameTexture(arg2,(irr::io::path const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ECOLOR_FORMAT arg4 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = (irr::video::ECOLOR_FORMAT)jarg4; 
  result = (irr::video::ITexture *)(arg1)->addTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3,arg4);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::video::ITexture *)(arg1)->addTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addTexture_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  void *arg4 = (void *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::IImage **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (irr::video::ITexture *)(arg1)->addTexture((irr::io::path const &)*arg2,arg3,arg4);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addTexture_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg3 = *(irr::video::IImage **)&jarg3; 
  result = (irr::video::ITexture *)(arg1)->addTexture((irr::io::path const &)*arg2,arg3);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addRenderTargetTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ECOLOR_FORMAT arg4 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = (irr::video::ECOLOR_FORMAT)jarg4; 
  result = (irr::video::ITexture *)(arg1)->addRenderTargetTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3,arg4);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addRenderTargetTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::video::ITexture *)(arg1)->addRenderTargetTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addRenderTargetTexture_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::ITexture *)(arg1)->addRenderTargetTexture((irr::core::dimension2d< irr::u32 > const &)*arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1removeTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  (arg1)->removeTexture(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1removeAllTextures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->removeAllTextures();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1removeHardwareBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  (arg1)->removeHardwareBuffer((irr::scene::IMeshBuffer const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1removeAllHardwareBuffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->removeAllHardwareBuffers();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addOcclusionQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMesh *arg3 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = *(irr::scene::IMesh **)&jarg3; 
  (arg1)->addOcclusionQuery(arg2,(irr::scene::IMesh const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addOcclusionQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->addOcclusionQuery(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1removeOcclusionQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->removeOcclusionQuery(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1removeAllOcclusionQueries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->removeAllOcclusionQueries();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1runOcclusionQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->runOcclusionQuery(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1runOcclusionQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->runOcclusionQuery(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1runAllOcclusionQueries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->runAllOcclusionQueries(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1runAllOcclusionQueries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->runAllOcclusionQueries();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1updateOcclusionQuery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->updateOcclusionQuery(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1updateOcclusionQuery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->updateOcclusionQuery(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1updateAllOcclusionQueries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->updateAllOcclusionQueries(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1updateAllOcclusionQueries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->updateAllOcclusionQueries();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getOcclusionQueryResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getOcclusionQueryResult(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1makeColorKeyTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::SColor arg3 ;
  bool arg4 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1makeColorKeyTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1makeColorKeyTexture_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::core::vector2d< irr::s32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::vector2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1makeColorKeyTexture_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  irr::core::vector2d< irr::s32 > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  argp3 = *(irr::core::vector2d< irr::s32 > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return ;
  }
  arg3 = *argp3; 
  ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1makeNormalMapTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  ((irr::video::IVideoDriver const *)arg1)->makeNormalMapTexture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1makeNormalMapTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  ((irr::video::IVideoDriver const *)arg1)->makeNormalMapTexture(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setRenderTarget(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  result = (bool)(arg1)->setRenderTarget(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_RENDER_TARGET)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_RENDER_TARGET)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_RENDER_TARGET)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setRenderTarget(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_RENDER_TARGET)jarg2; 
  result = (bool)(arg1)->setRenderTarget(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setRenderTarget_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irrAllocator< irr::video::IRenderTarget > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setViewPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->setViewPort((irr::core::rect< irr::s32 > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getViewPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::core::rect< irr::s32 > *) &((irr::video::IVideoDriver const *)arg1)->getViewPort();
  *(irr::core::rect< irr::s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawVertexPrimitiveList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  E_INDEX_TYPE arg8 ;
  irr::scene::E_PRIMITIVE_TYPE *argp7 ;
  E_INDEX_TYPE *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::video::E_VERTEX_TYPE)jarg6; 
  argp7 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return ;
  }
  arg7 = *argp7; 
  argp8 = *(E_INDEX_TYPE **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_INDEX_TYPE");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawVertexPrimitiveList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  irr::scene::E_PRIMITIVE_TYPE *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::video::E_VERTEX_TYPE)jarg6; 
  argp7 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawVertexPrimitiveList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::video::E_VERTEX_TYPE)jarg6; 
  (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawVertexPrimitiveList_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DVertexPrimitiveList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  E_INDEX_TYPE arg8 ;
  irr::scene::E_PRIMITIVE_TYPE *argp7 ;
  E_INDEX_TYPE *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::video::E_VERTEX_TYPE)jarg6; 
  argp7 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return ;
  }
  arg7 = *argp7; 
  argp8 = *(E_INDEX_TYPE **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_INDEX_TYPE");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DVertexPrimitiveList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  irr::scene::E_PRIMITIVE_TYPE *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::video::E_VERTEX_TYPE)jarg6; 
  argp7 = *(irr::scene::E_PRIMITIVE_TYPE **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::scene::E_PRIMITIVE_TYPE");
    return ;
  }
  arg7 = *argp7; 
  (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DVertexPrimitiveList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::video::E_VERTEX_TYPE)jarg6; 
  (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DVertexPrimitiveList_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawIndexedTriangleList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex *arg2 = (irr::video::S3DVertex *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertex[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertex **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  if (!SWIG_JavaArrayInUshort(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawIndexedTriangleList((irr::video::S3DVertex const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertex **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawIndexedTriangleList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertex2TCoords[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertex2TCoords **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  if (!SWIG_JavaArrayInUshort(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawIndexedTriangleList((irr::video::S3DVertex2TCoords const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertex2TCoords **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawIndexedTriangleList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertexTangents *arg2 = (irr::video::S3DVertexTangents *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertexTangents[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertexTangents **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  if (!SWIG_JavaArrayInUshort(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawIndexedTriangleList((irr::video::S3DVertexTangents const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertexTangents **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawIndexedTriangleFan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex *arg2 = (irr::video::S3DVertex *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertex[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertex **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  if (!SWIG_JavaArrayInUshort(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawIndexedTriangleFan((irr::video::S3DVertex const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertex **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawIndexedTriangleFan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertex2TCoords[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertex2TCoords **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  if (!SWIG_JavaArrayInUshort(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawIndexedTriangleFan((irr::video::S3DVertex2TCoords const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertex2TCoords **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawIndexedTriangleFan_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jintArray jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertexTangents *arg2 = (irr::video::S3DVertexTangents *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertexTangents[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertexTangents **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  if (!SWIG_JavaArrayInUshort(jenv, &jarr4, &arg4, jarg4)) return ; 
  arg5 = (irr::u32)jarg5; 
  (arg1)->drawIndexedTriangleFan((irr::video::S3DVertexTangents const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertexTangents **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw3DLine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->draw3DLine((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw3DLine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->draw3DLine((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw3DTriangle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::triangle3df *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df const & reference is null");
    return ;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->draw3DTriangle((irr::core::triangle3df const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw3DTriangle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::triangle3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::triangle3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df const & reference is null");
    return ;
  } 
  (arg1)->draw3DTriangle((irr::core::triangle3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw3DBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::aabbox3d< irr::f32 > *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< irr::f32 > const & reference is null");
    return ;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->draw3DBox((irr::core::aabbox3d< irr::f32 > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw3DBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::aabbox3d< irr::f32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< irr::f32 > const & reference is null");
    return ;
  } 
  (arg1)->draw3DBox((irr::core::aabbox3d< irr::f32 > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  bool arg7 ;
  irr::video::SColor *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  irr::video::SColor *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jboolean jarg9) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg8 ;
  bool arg9 ;
  irr::video::SColor *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::array< irr::s32,irrAllocator< irr::s32 > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::s32,irrAllocator< irr::s32 > > const & reference is null");
    return ;
  } 
  arg6 = (irr::s32)jarg6; 
  arg7 = *(irr::core::rect< irr::s32 > **)&jarg7; 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irrAllocator< irr::s32 > > const &)*arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg8 ;
  irr::video::SColor *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::array< irr::s32,irrAllocator< irr::s32 > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::s32,irrAllocator< irr::s32 > > const & reference is null");
    return ;
  } 
  arg6 = (irr::s32)jarg6; 
  arg7 = *(irr::core::rect< irr::s32 > **)&jarg7; 
  argp8 = *(irr::video::SColor **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irrAllocator< irr::s32 > > const &)*arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg7_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::array< irr::s32,irrAllocator< irr::s32 > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::s32,irrAllocator< irr::s32 > > const & reference is null");
    return ;
  } 
  arg6 = (irr::s32)jarg6; 
  arg7 = *(irr::core::rect< irr::s32 > **)&jarg7; 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irrAllocator< irr::s32 > > const &)*arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jint jarg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::array< irr::s32,irrAllocator< irr::s32 > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::s32,irrAllocator< irr::s32 > > const & reference is null");
    return ;
  } 
  arg6 = (irr::s32)jarg6; 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irrAllocator< irr::s32 > > const &)*arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irrAllocator< irr::s32 > > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::array< irr::s32,irrAllocator< irr::s32 > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::s32,irrAllocator< irr::s32 > > const & reference is null");
    return ;
  } 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irrAllocator< irr::s32 > > const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  bool arg7 ;
  irr::video::SColor *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  irr::video::SColor *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImageBatch_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const & reference is null");
    return ;
  } 
  (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlongArray jarg6, jboolean jarg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg6 = (irr::video::SColor *) (irr::video::SColor *)0 ;
  bool arg7 ;
  jlong *jarr6 ;
  jsize sz6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return ;
    }
    
    arg6 = new irr::video::SColor[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::video::SColor **)&jarr6[i];
    }
  }
  arg7 = jarg7 ? true : false; 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,(irr::video::SColor const *)arg6,arg7);
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::video::SColor **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlongArray jarg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg6 = (irr::video::SColor *) (irr::video::SColor *)0 ;
  jlong *jarr6 ;
  jsize sz6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  {
    int i;
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz6 = jenv->GetArrayLength(jarg6);
    jarr6 = jenv->GetLongArrayElements(jarg6, 0);
    if (!jarr6) {
      return ;
    }
    
    arg6 = new irr::video::SColor[sz6];
    
    
    
    if (!arg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz6; i++) {
      arg6[i] = **(irr::video::SColor **)&jarr6[i];
    }
  }
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,(irr::video::SColor const *)arg6);
  {
    int i;
    for (i=0; i<sz6; i++) {
      jarr6[i] = 0;
      *(irr::video::SColor **)&jarr6[i] = &arg6[i];
    }
    jenv->ReleaseLongArrayElements(jarg6, jarr6, 0);
  }
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg5 = *(irr::core::rect< irr::s32 > **)&jarg5; 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DImage_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DRectangle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::rect< irr::s32 > **)&jarg4; 
  (arg1)->draw2DRectangle(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DRectangle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::rect< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw2DRectangle(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DRectangle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::video::SColor *argp5 ;
  irr::video::SColor *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg6 = *argp6; 
  arg7 = *(irr::core::rect< irr::s32 > **)&jarg7; 
  (arg1)->draw2DRectangle((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DRectangle_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::video::SColor *argp5 ;
  irr::video::SColor *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< irr::s32 > const & reference is null");
    return ;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->draw2DRectangle((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DRectangleOutline_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::recti *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::recti **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::recti const & reference is null");
    return ;
  } 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->draw2DRectangleOutline((irr::core::recti const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DRectangleOutline_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::recti *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::recti **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::recti const & reference is null");
    return ;
  } 
  (arg1)->draw2DRectangleOutline((irr::core::recti const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DLine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->draw2DLine((irr::core::vector2d< irr::s32 > const &)*arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DLine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->draw2DLine((irr::core::vector2d< irr::s32 > const &)*arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(irr::video::SColor **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->drawPixel(arg2,arg3,(irr::video::SColor const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DPolygon_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  irr::f32 arg3 ;
  irr::video::SColor arg4 ;
  irr::s32 arg5 ;
  irr::core::vector2d< irr::s32 > *argp2 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::core::vector2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::f32)jarg3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (irr::s32)jarg5; 
  (arg1)->draw2DPolygon(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DPolygon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  irr::f32 arg3 ;
  irr::video::SColor arg4 ;
  irr::core::vector2d< irr::s32 > *argp2 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::core::vector2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::f32)jarg3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->draw2DPolygon(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1draw2DPolygon_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  irr::f32 arg3 ;
  irr::core::vector2d< irr::s32 > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::core::vector2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector2d< irr::s32 >");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::f32)jarg3; 
  (arg1)->draw2DPolygon(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadowVolume_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg2 = 0 ;
  bool arg3 ;
  irr::u32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (irr::u32)jarg4; 
  (arg1)->drawStencilShadowVolume((irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadowVolume_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->drawStencilShadowVolume((irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadowVolume_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const & reference is null");
    return ;
  } 
  (arg1)->drawStencilShadowVolume((irr::core::array< irr::core::vector3df,irrAllocator< irr::core::vector3df > > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::video::SColor *argp5 ;
  irr::video::SColor *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(irr::video::SColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawStencilShadow(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  irr::video::SColor *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(irr::video::SColor **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawStencilShadow(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadow_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp3 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawStencilShadow(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadow_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->drawStencilShadow(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadow_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->drawStencilShadow(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawStencilShadow_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->drawStencilShadow();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawMeshBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  (arg1)->drawMeshBuffer((irr::scene::IMeshBuffer const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawMeshBufferNormals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  argp4 = *(irr::video::SColor **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawMeshBufferNormals((irr::scene::IMeshBuffer const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawMeshBufferNormals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  arg3 = (irr::f32)jarg3; 
  (arg1)->drawMeshBufferNormals((irr::scene::IMeshBuffer const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1drawMeshBufferNormals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  (arg1)->drawMeshBufferNormals((irr::scene::IMeshBuffer const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jboolean jarg7, jboolean jarg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  bool arg7 ;
  bool arg8 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::video::E_FOG_TYPE)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  (arg1)->setFog(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jboolean jarg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  bool arg7 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::video::E_FOG_TYPE)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->setFog(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::video::E_FOG_TYPE)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  (arg1)->setFog(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jfloat jarg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::video::E_FOG_TYPE)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  (arg1)->setFog(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::video::E_FOG_TYPE)jarg3; 
  arg4 = (irr::f32)jarg4; 
  (arg1)->setFog(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (irr::video::E_FOG_TYPE)jarg3; 
  (arg1)->setFog(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setFog(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setFog_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->setFog();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getFog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::E_FOG_TYPE *arg3 = 0 ;
  irr::f32 *arg4 = 0 ;
  irr::f32 *arg5 = 0 ;
  irr::f32 *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor & reference is null");
    return ;
  } 
  arg3 = *(irr::video::E_FOG_TYPE **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::E_FOG_TYPE & reference is null");
    return ;
  } 
  arg4 = *(irr::f32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return ;
  } 
  arg5 = *(irr::f32 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return ;
  } 
  arg6 = *(irr::f32 **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return ;
  } 
  arg7 = *(bool **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  arg8 = *(bool **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  (arg1)->getFog(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getColorFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::video::ECOLOR_FORMAT)((irr::video::IVideoDriver const *)arg1)->getColorFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getScreenSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IVideoDriver const *)arg1)->getScreenSize();
  *(irr::core::dimension2d< irr::u32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getCurrentRenderTargetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IVideoDriver const *)arg1)->getCurrentRenderTargetSize();
  *(irr::core::dimension2d< irr::u32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getFPS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::s32)((irr::video::IVideoDriver const *)arg1)->getFPS();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getPrimitiveCountDrawn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getPrimitiveCountDrawn(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getPrimitiveCountDrawn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getPrimitiveCountDrawn();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1deleteAllDynamicLights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->deleteAllDynamicLights();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addDynamicLight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SLight *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::SLight **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SLight const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->addDynamicLight((irr::video::SLight const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMaximalDynamicLightAmount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getMaximalDynamicLightAmount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getDynamicLightCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getDynamicLightCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getDynamicLight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::SLight *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::SLight *) &((irr::video::IVideoDriver const *)arg1)->getDynamicLight(arg2);
  *(irr::video::SLight **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1turnLightOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->turnLightOn(arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (wchar_t *)((irr::video::IVideoDriver const *)arg1)->getName();
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addExternalImageLoader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImageLoader *arg2 = (irr::video::IImageLoader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IImageLoader **)&jarg2; 
  (arg1)->addExternalImageLoader(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addExternalImageWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImageWriter *arg2 = (irr::video::IImageWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IImageWriter **)&jarg2; 
  (arg1)->addExternalImageWriter(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMaximalPrimitiveCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getMaximalPrimitiveCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setTextureCreationFlag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TEXTURE_CREATION_FLAG arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_TEXTURE_CREATION_FLAG)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTextureCreationFlag(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setTextureCreationFlag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TEXTURE_CREATION_FLAG arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_TEXTURE_CREATION_FLAG)jarg2; 
  (arg1)->setTextureCreationFlag(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getTextureCreationFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TEXTURE_CREATION_FLAG arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::E_TEXTURE_CREATION_FLAG)jarg2; 
  result = (bool)((irr::video::IVideoDriver const *)arg1)->getTextureCreationFlag(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImageFromFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::video::IImage *)(arg1)->createImageFromFile((irr::io::path const &)*arg2);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImageFromFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::video::IImage *)(arg1)->createImageFromFile(arg2);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1writeImageToFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::path *arg3 = 0 ;
  irr::u32 arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  result = (bool)(arg1)->writeImageToFile(arg2,(irr::io::path const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1writeImageToFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::io::path **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->writeImageToFile(arg2,(irr::io::path const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1writeImageToFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::IWriteFile *arg3 = (irr::io::IWriteFile *) 0 ;
  irr::u32 arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::io::IWriteFile **)&jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (bool)(arg1)->writeImageToFile(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1writeImageToFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::IWriteFile *arg3 = (irr::io::IWriteFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::io::IWriteFile **)&jarg3; 
  result = (bool)(arg1)->writeImageToFile(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImageFromData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  bool arg5 ;
  bool arg6 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::ECOLOR_FORMAT)jarg2; 
  arg3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg4 = *(void **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (irr::video::IImage *)(arg1)->createImageFromData(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4,arg5,arg6);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImageFromData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  bool arg5 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::ECOLOR_FORMAT)jarg2; 
  arg3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg4 = *(void **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (irr::video::IImage *)(arg1)->createImageFromData(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4,arg5);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImageFromData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::ECOLOR_FORMAT)jarg2; 
  arg3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg4 = *(void **)&jarg4; 
  result = (irr::video::IImage *)(arg1)->createImageFromData(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::ECOLOR_FORMAT)jarg2; 
  arg3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::IImage *)(arg1)->createImage(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::ECOLOR_FORMAT)jarg2; 
  arg3 = *(irr::video::IImage **)&jarg3; 
  result = (irr::video::IImage *)(arg1)->createImage(arg2,arg3);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IImage **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::dimension2d< irr::u32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::IImage *)(arg1)->createImage(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createImage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::dimension2d< irr::u32 > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  result = (irr::video::IImage *)(arg1)->createImage(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1OnResize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return ;
  } 
  (arg1)->OnResize((irr::core::dimension2d< irr::u32 > const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addMaterialRenderer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IMaterialRenderer *arg2 = (irr::video::IMaterialRenderer *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IMaterialRenderer **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (irr::s32)(arg1)->addMaterialRenderer(arg2,(irr::c8 const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1addMaterialRenderer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IMaterialRenderer *arg2 = (irr::video::IMaterialRenderer *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::IMaterialRenderer **)&jarg2; 
  result = (irr::s32)(arg1)->addMaterialRenderer(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMaterialRenderer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::IMaterialRenderer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::video::IMaterialRenderer *)(arg1)->getMaterialRenderer(arg2);
  *(irr::video::IMaterialRenderer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMaterialRendererCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getMaterialRendererCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMaterialRendererName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::c8 *)((irr::video::IVideoDriver const *)arg1)->getMaterialRendererName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setMaterialRendererName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setMaterialRendererName(arg2,(irr::c8 const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createAttributesFromMaterial_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  arg3 = *(irr::io::SAttributeReadWriteOptions **)&jarg3; 
  result = (irr::io::IAttributes *)(arg1)->createAttributesFromMaterial((irr::video::SMaterial const &)*arg2,arg3);
  *(irr::io::IAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createAttributesFromMaterial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::io::IAttributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (irr::io::IAttributes *)(arg1)->createAttributesFromMaterial((irr::video::SMaterial const &)*arg2);
  *(irr::io::IAttributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1fillMaterialStructureFromAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::io::IAttributes *arg3 = (irr::io::IAttributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial & reference is null");
    return ;
  } 
  arg3 = *(irr::io::IAttributes **)&jarg3; 
  (arg1)->fillMaterialStructureFromAttributes(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getExposedVideoData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  SExposedVideoData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (SExposedVideoData *) &(arg1)->getExposedVideoData();
  *(SExposedVideoData **)&jresult = result; 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createExposedVideoData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SExposedVideoData*videoData=new SExposedVideoData();
  jresult=(jlong)videoData;
  return jresult;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1deleteExposedVideoData(JNIEnv *jenv, jclass jcls, jlong pointer) {
  SExposedVideoData*videoData=(SExposedVideoData*)pointer;
  delete videoData;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setExposedVideoDataD3D8HWND(JNIEnv *jenv, jclass jcls, jlong pointer, jlong handle) {
  SExposedVideoData*videoData=(SExposedVideoData*)pointer;
  void*hwnd=(void*)handle;
  videoData->D3D8.HWnd=hwnd;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setExposedVideoDataD3D9HWND(JNIEnv *jenv, jclass jcls, jlong pointer, jlong handle) {
  SExposedVideoData*videoData=(SExposedVideoData*)pointer;
  void*hwnd=(void*)handle;
  videoData->D3D9.HWnd=hwnd;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setExposedVideoDataOGLWIN(JNIEnv *jenv, jclass jcls, jlong pointer, jlong handle) {
  SExposedVideoData*videoData=(SExposedVideoData*)pointer;
  void*hwnd=(void*)handle;
  videoData->OpenGLWin32.HWnd=hwnd;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setExposedVideoDataOGLLin(JNIEnv *jenv, jclass jcls, jlong pointer, jlong handle) {
  SExposedVideoData*videoData=(SExposedVideoData*)pointer;
  //void*hwnd=(void*)handle;
  videoData->OpenGLLinux.X11Window=handle;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getDriverType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_DRIVER_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::video::E_DRIVER_TYPE)((irr::video::IVideoDriver const *)arg1)->getDriverType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getGPUProgrammingServices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IGPUProgrammingServices *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::video::IGPUProgrammingServices *)(arg1)->getGPUProgrammingServices();
  *(irr::video::IGPUProgrammingServices **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMeshManipulator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshManipulator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::scene::IMeshManipulator *)(arg1)->getMeshManipulator();
  *(irr::scene::IMeshManipulator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1clearZBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->clearZBuffer();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createScreenShot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::video::E_RENDER_TARGET arg3 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::ECOLOR_FORMAT)jarg2; 
  arg3 = (irr::video::E_RENDER_TARGET)jarg3; 
  result = (irr::video::IImage *)(arg1)->createScreenShot(arg2,arg3);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createScreenShot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::video::ECOLOR_FORMAT)jarg2; 
  result = (irr::video::IImage *)(arg1)->createScreenShot(arg2);
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1createScreenShot_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::video::IImage *)(arg1)->createScreenShot();
  *(irr::video::IImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1findTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (irr::video::ITexture *)(arg1)->findTexture((irr::io::path const &)*arg2);
  *(irr::video::ITexture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setClipPlane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::core::plane3df *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::plane3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3df const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setClipPlane(arg2,(irr::core::plane3df const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setClipPlane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::core::plane3df *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::core::plane3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3df const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setClipPlane(arg2,(irr::core::plane3df const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1enableClipPlane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->enableClipPlane(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setMinHardwareBufferVertexCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setMinHardwareBufferVertexCount(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getOverrideMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SOverrideMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::video::SOverrideMaterial *) &(arg1)->getOverrideMaterial();
  *(irr::video::SOverrideMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMaterial2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (irr::video::SMaterial *) &(arg1)->getMaterial2D();
  *(irr::video::SMaterial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1enableMaterial2D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableMaterial2D(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1enableMaterial2D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  (arg1)->enableMaterial2D();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getVendorInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  SwigValueWrapper< irr::core::string< char,irrAllocator< char > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = (arg1)->getVendorInfo();
  *(irr::core::stringc **)&jresult = new irr::core::stringc((const irr::core::stringc &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setAmbientLight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(irr::video::SColorf **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColorf const & reference is null");
    return ;
  } 
  (arg1)->setAmbientLight((irr::video::SColorf const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1setAllowZWriteOnTransparent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAllowZWriteOnTransparent(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1getMaxTextureSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  result = ((irr::video::IVideoDriver const *)arg1)->getMaxTextureSize();
  *(irr::core::dimension2du **)&jresult = new irr::core::dimension2du((const irr::core::dimension2du &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IVideoDriver_1convertColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jint jarg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg3 ;
  irr::s32 arg4 ;
  void *arg5 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::video::ECOLOR_FORMAT)jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (irr::video::ECOLOR_FORMAT)jarg6; 
  ((irr::video::IVideoDriver const *)arg1)->convertColor((void const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IVideoDriver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IVideoDriver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMeshLoader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IMeshLoader *arg1 = (irr::scene::IMeshLoader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IMeshLoader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshLoader_1isALoadableFileExtension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::scene::IMeshLoader *arg1 = (irr::scene::IMeshLoader *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMeshLoader **)&jarg1; 
  arg2 = *(irr::io::path **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::io::path const & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::IMeshLoader const *)arg1)->isALoadableFileExtension((irr::io::path const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshLoader_1createMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IMeshLoader *arg1 = (irr::scene::IMeshLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IMeshLoader **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (irr::scene::IAnimatedMesh *)(arg1)->createMesh(arg2);
  *(irr::scene::IAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_GUICursorIconNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::gui::GUICursorIconNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SCursorSprite_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::gui::SCursorSprite *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::gui::SCursorSprite *)new irr::gui::SCursorSprite();
  *(irr::gui::SCursorSprite **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SCursorSprite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::gui::SCursorSprite *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::vector2d< irr::s32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (irr::gui::SCursorSprite *)new irr::gui::SCursorSprite(arg1,arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
  *(irr::gui::SCursorSprite **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SCursorSprite_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::s32 arg2 ;
  irr::gui::SCursorSprite *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUISpriteBank **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::gui::SCursorSprite *)new irr::gui::SCursorSprite(arg1,arg2);
  *(irr::gui::SCursorSprite **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SCursorSprite_1SpriteBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::SCursorSprite *arg1 = (irr::gui::SCursorSprite *) 0 ;
  irr::gui::IGUISpriteBank *arg2 = (irr::gui::IGUISpriteBank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::SCursorSprite **)&jarg1; 
  arg2 = *(irr::gui::IGUISpriteBank **)&jarg2; 
  if (arg1) (arg1)->SpriteBank = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SCursorSprite_1SpriteBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::SCursorSprite *arg1 = (irr::gui::SCursorSprite *) 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SCursorSprite **)&jarg1; 
  result = (irr::gui::IGUISpriteBank *) ((arg1)->SpriteBank);
  *(irr::gui::IGUISpriteBank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SCursorSprite_1SpriteId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::SCursorSprite *arg1 = (irr::gui::SCursorSprite *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SCursorSprite **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->SpriteId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SCursorSprite_1SpriteId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::SCursorSprite *arg1 = (irr::gui::SCursorSprite *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SCursorSprite **)&jarg1; 
  result = (irr::s32) ((arg1)->SpriteId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SCursorSprite_1HotSpot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::SCursorSprite *arg1 = (irr::gui::SCursorSprite *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = (irr::core::vector2d< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::SCursorSprite **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2; 
  if (arg1) (arg1)->HotSpot = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SCursorSprite_1HotSpot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::SCursorSprite *arg1 = (irr::gui::SCursorSprite *) 0 ;
  irr::core::vector2d< irr::s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::SCursorSprite **)&jarg1; 
  result = (irr::core::vector2d< irr::s32 > *)& ((arg1)->HotSpot);
  *(irr::core::vector2d< irr::s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SCursorSprite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::SCursorSprite *arg1 = (irr::gui::SCursorSprite *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::SCursorSprite **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  result = (bool)((irr::gui::ICursorControl const *)arg1)->isVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::f32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::f32 > const & reference is null");
    return ;
  } 
  (arg1)->setPosition((irr::core::vector2d< irr::f32 > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  (arg1)->setPosition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return ;
  } 
  (arg1)->setPosition((irr::core::vector2d< irr::s32 > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setPosition_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setPosition(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  result = (irr::core::vector2d< irr::s32 > *) &(arg1)->getPosition();
  *(irr::core::vector2d< irr::s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1getRelativePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::f32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  result = (arg1)->getRelativePosition();
  *(irr::core::vector2d< irr::f32 > **)&jresult = new irr::core::vector2d< irr::f32 >((const irr::core::vector2d< irr::f32 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setReferenceRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = *(irr::core::rect< irr::s32 > **)&jarg2; 
  (arg1)->setReferenceRect(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setReferenceRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  (arg1)->setReferenceRect();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setActiveIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_ICON arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = (irr::gui::ECURSOR_ICON)jarg2; 
  (arg1)->setActiveIcon(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1getActiveIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_ICON result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  result = (irr::gui::ECURSOR_ICON)((irr::gui::ICursorControl const *)arg1)->getActiveIcon();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1addIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::SCursorSprite *arg2 = 0 ;
  irr::gui::ECURSOR_ICON result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = *(irr::gui::SCursorSprite **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::gui::SCursorSprite const & reference is null");
    return 0;
  } 
  result = (irr::gui::ECURSOR_ICON)(arg1)->addIcon((irr::gui::SCursorSprite const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1changeIcon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_ICON arg2 ;
  irr::gui::SCursorSprite *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = (irr::gui::ECURSOR_ICON)jarg2; 
  arg3 = *(irr::gui::SCursorSprite **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::gui::SCursorSprite const & reference is null");
    return ;
  } 
  (arg1)->changeIcon(arg2,(irr::gui::SCursorSprite const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1getSupportedIconSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::dimension2di result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  result = ((irr::gui::ICursorControl const *)arg1)->getSupportedIconSize();
  *(irr::core::dimension2di **)&jresult = new irr::core::dimension2di((const irr::core::dimension2di &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1setPlatformBehavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_PLATFORM_BEHAVIOR arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  arg2 = (irr::gui::ECURSOR_PLATFORM_BEHAVIOR)jarg2; 
  (arg1)->setPlatformBehavior(arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ICursorControl_1getPlatformBehavior(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_PLATFORM_BEHAVIOR result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  result = (irr::gui::ECURSOR_PLATFORM_BEHAVIOR)((irr::gui::ICursorControl const *)arg1)->getPlatformBehavior();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ICursorControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::gui::ICursorControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoModeList_1getVideoModeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoModeList **)&jarg1; 
  result = (irr::s32)((irr::video::IVideoModeList const *)arg1)->getVideoModeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoModeList_1getVideoModeResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoModeList **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = ((irr::video::IVideoModeList const *)arg1)->getVideoModeResolution(arg2);
  *(irr::core::dimension2d< irr::u32 > **)&jresult = new irr::core::dimension2d< irr::u32 >((const irr::core::dimension2d< irr::u32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoModeList_1getVideoModeResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  SwigValueWrapper< irr::core::dimension2d< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoModeList **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::dimension2d< irr::u32 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  result = ((irr::video::IVideoModeList const *)arg1)->getVideoModeResolution((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3);
  *(irr::core::dimension2d< irr::u32 > **)&jresult = new irr::core::dimension2d< irr::u32 >((const irr::core::dimension2d< irr::u32 > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoModeList_1getVideoModeDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoModeList **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::s32)((irr::video::IVideoModeList const *)arg1)->getVideoModeDepth(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IVideoModeList_1getDesktopResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoModeList **)&jarg1; 
  result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IVideoModeList const *)arg1)->getDesktopResolution();
  *(irr::core::dimension2d< irr::u32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IVideoModeList_1getDesktopDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::video::IVideoModeList **)&jarg1; 
  result = (irr::s32)((irr::video::IVideoModeList const *)arg1)->getDesktopDepth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IVideoModeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IVideoModeList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  result = (irr::u32)((irr::ITimer const *)arg1)->getRealTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::ITimer::RealTimeDate result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  result = ((irr::ITimer const *)arg1)->getRealTimeAndDate();
  *(irr::ITimer::RealTimeDate **)&jresult = new irr::ITimer::RealTimeDate((const irr::ITimer::RealTimeDate &)result); 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDateDay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::ITimer::RealTimeDate*timeDateStruct = (irr::ITimer::RealTimeDate *)jarg1; 
  jlong day=timeDateStruct->Day;
  return day;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDateMonth(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::ITimer::RealTimeDate*timeDateStruct = (irr::ITimer::RealTimeDate *)jarg1; 
  jlong month=timeDateStruct->Month;
  return month;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDateYear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::ITimer::RealTimeDate*timeDateStruct = (irr::ITimer::RealTimeDate *)jarg1; 
  jlong year=timeDateStruct->Year;
  return year;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDateHour(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::ITimer::RealTimeDate*timeDateStruct = (irr::ITimer::RealTimeDate *)jarg1; 
  jlong hour=timeDateStruct->Hour;
  return hour;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDateMinute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::ITimer::RealTimeDate*timeDateStruct = (irr::ITimer::RealTimeDate *)jarg1; 
  jlong minute=timeDateStruct->Minute;
  return minute;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDateSecond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::ITimer::RealTimeDate*timeDateStruct = (irr::ITimer::RealTimeDate *)jarg1; 
  jlong second=timeDateStruct->Second;
  return second;
}



SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getRealTimeAndDateIsDST(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::ITimer::RealTimeDate*timeDateStruct = (irr::ITimer::RealTimeDate *)jarg1; 
  jboolean isDST=timeDateStruct->IsDST;
  return isDST;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  result = (irr::u32)((irr::ITimer const *)arg1)->getTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  (arg1)->start();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1setSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1setSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  (arg1)->setSpeed();
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  result = (irr::f32)((irr::ITimer const *)arg1)->getSpeed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1isStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  result = (bool)((irr::ITimer const *)arg1)->isStopped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITimer_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::ITimer **)&jarg1; 
  (arg1)->tick();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ITimer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::ITimer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IOSOperator_1getOperatingSystemVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IOSOperator **)&jarg1; 
  result = (irr::core::stringc *) &((irr::IOSOperator const *)arg1)->getOperatingSystemVersion();
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IOSOperator_1getOperationSystemVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IOSOperator **)&jarg1; 
  result = (wchar_t *)((irr::IOSOperator const *)arg1)->getOperationSystemVersion();
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IOSOperator_1copyToClipboard(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IOSOperator **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ((irr::IOSOperator const *)arg1)->copyToClipboard((irr::c8 const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IOSOperator_1getTextFromClipboard(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IOSOperator **)&jarg1; 
  result = (irr::c8 *)((irr::IOSOperator const *)arg1)->getTextFromClipboard();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IOSOperator_1getProcessorSpeedMHz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::u32 *arg2 = (irr::u32 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IOSOperator **)&jarg1; 
  arg2 = *(irr::u32 **)&jarg2; 
  result = (bool)((irr::IOSOperator const *)arg1)->getProcessorSpeedMHz(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IOSOperator_1getSystemMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::u32 *arg2 = (irr::u32 *) 0 ;
  irr::u32 *arg3 = (irr::u32 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IOSOperator **)&jarg1; 
  arg2 = *(irr::u32 **)&jarg2; 
  arg3 = *(irr::u32 **)&jarg3; 
  result = (bool)((irr::IOSOperator const *)arg1)->getSystemMemory(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IOSOperator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::IOSOperator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1yield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  (arg1)->yield();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1sleep_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->sleep(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1sleep_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->sleep(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getVideoDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::video::IVideoDriver *)(arg1)->getVideoDriver();
  *(irr::video::IVideoDriver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getFileSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::io::IFileSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::io::IFileSystem *)(arg1)->getFileSystem();
  *(irr::io::IFileSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getGUIEnvironment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::gui::IGUIEnvironment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::gui::IGUIEnvironment *)(arg1)->getGUIEnvironment();
  *(irr::gui::IGUIEnvironment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getSceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::scene::ISceneManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::scene::ISceneManager *)(arg1)->getSceneManager();
  *(irr::scene::ISceneManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getCursorControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::gui::ICursorControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::gui::ICursorControl *)(arg1)->getCursorControl();
  *(irr::gui::ICursorControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getLogger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::ILogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::ILogger *)(arg1)->getLogger();
  *(irr::ILogger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getVideoModeList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::video::IVideoModeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::video::IVideoModeList *)(arg1)->getVideoModeList();
  *(irr::video::IVideoModeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getOSOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IOSOperator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::IOSOperator *)(arg1)->getOSOperator();
  *(irr::IOSOperator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::ITimer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::ITimer *)(arg1)->getTimer();
  *(irr::ITimer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getRandomizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IRandomizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::IRandomizer *)((irr::IrrlichtDevice const *)arg1)->getRandomizer();
  *(irr::IRandomizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1setRandomizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IRandomizer *arg2 = (irr::IRandomizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = *(irr::IRandomizer **)&jarg2; 
  (arg1)->setRandomizer(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1createDefaultRandomizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IRandomizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::IRandomizer *)((irr::IrrlichtDevice const *)arg1)->createDefaultRandomizer();
  *(irr::IRandomizer **)&jresult = result; 
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1StringToPath(JNIEnv *jenv, jclass jcls,jstring string) {
  wchar_t *arg2 = (wchar_t *) 0 ;
  arg2 = (wchar_t *)jenv->GetStringChars(string, 0);
  path*p=new path(arg2);
  if (arg2){
	  jenv->ReleaseStringChars(string, (const jchar *) arg2); 
  }
  return (jlong)p;
}

SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1PathToString(JNIEnv *jenv, jclass jcls,jlong pathPointer) {
	jstring string=jenv->NewStringUTF(((path*)pathPointer)->c_str());
  return string;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1ReleasePath(JNIEnv *jenv, jclass jcls,jlong pathPointer) {
  delete (path*)pathPointer;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1setWindowCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->setWindowCaption((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1isWindowActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (bool)((irr::IrrlichtDevice const *)arg1)->isWindowActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1isWindowFocused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (bool)((irr::IrrlichtDevice const *)arg1)->isWindowFocused();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1isWindowMinimized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (bool)((irr::IrrlichtDevice const *)arg1)->isWindowMinimized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1isFullscreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (bool)((irr::IrrlichtDevice const *)arg1)->isFullscreen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getColorFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::video::ECOLOR_FORMAT)((irr::IrrlichtDevice const *)arg1)->getColorFormat();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1closeDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  (arg1)->closeDevice();
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::c8 *)((irr::IrrlichtDevice const *)arg1)->getVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1setEventReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IEventReceiver *arg2 = (irr::IEventReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = *(irr::IEventReceiver **)&jarg2; 
  (arg1)->setEventReceiver(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getEventReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IEventReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = (irr::IEventReceiver *)(arg1)->getEventReceiver();
  *(irr::IEventReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1postEventFromUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = *(irr::SEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SEvent const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->postEventFromUser((irr::SEvent const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1setInputReceivingSceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::scene::ISceneManager *arg2 = (irr::scene::ISceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = *(irr::scene::ISceneManager **)&jarg2; 
  (arg1)->setInputReceivingSceneManager(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1setResizable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setResizable(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1setResizable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  (arg1)->setResizable();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1minimizeWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  (arg1)->minimizeWindow();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1maximizeWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  (arg1)->maximizeWindow();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1restoreWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  (arg1)->restoreWindow();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1activateJoysticks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::core::array< irr::SJoystickInfo,irrAllocator< irr::SJoystickInfo > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = *(irr::core::array< irr::SJoystickInfo,irrAllocator< irr::SJoystickInfo > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::SJoystickInfo,irrAllocator< irr::SJoystickInfo > > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->activateJoysticks(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1setGammaRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::f32)jarg6; 
  result = (bool)(arg1)->setGammaRamp(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getGammaRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::f32 *arg2 = 0 ;
  irr::f32 *arg3 = 0 ;
  irr::f32 *arg4 = 0 ;
  irr::f32 *arg5 = 0 ;
  irr::f32 *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  arg2 = *(irr::f32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return 0;
  } 
  arg3 = *(irr::f32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return 0;
  } 
  arg4 = *(irr::f32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return 0;
  } 
  arg5 = *(irr::f32 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return 0;
  } 
  arg6 = *(irr::f32 **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getGammaRamp(*arg2,*arg3,*arg4,*arg5,*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1clearSystemMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  (arg1)->clearSystemMessages();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  E_DEVICE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  result = ((irr::IrrlichtDevice const *)arg1)->getType();
  *(E_DEVICE_TYPE **)&jresult = new E_DEVICE_TYPE((const E_DEVICE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IrrlichtDevice_1isDriverSupported(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  irr::video::E_DRIVER_TYPE arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_DRIVER_TYPE)jarg1; 
  result = (bool)irr::IrrlichtDevice::isDriverSupported(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IrrlichtDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::IrrlichtDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getCollisionPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::scene::ITriangleSelector *arg3 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::triangle3df *arg5 = 0 ;
  irr::scene::ISceneNode **arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::line3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ITriangleSelector **)&jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::triangle3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  arg6 = (irr::scene::ISceneNode **)&jarg6; 
  result = (bool)(arg1)->getCollisionPoint((irr::core::line3d< irr::f32 > const &)*arg2,arg3,*arg4,*arg5,*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getCollisionResultPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jobject jarg9_, jfloat jarg10, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::triangle3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool *arg8 = 0 ;
  irr::scene::ISceneNode **arg9 = 0 ;
  irr::f32 arg10 ;
  irr::core::vector3df *arg11 = 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg9_;
  (void)jarg11_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::triangle3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg8 = *(bool **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg9 = (irr::scene::ISceneNode **)&jarg9; 
  arg10 = (irr::f32)jarg10; 
  arg11 = *(irr::core::vector3df **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (arg1)->getCollisionResultPosition(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,*arg6,*arg7,*arg8,*arg9,arg10,(irr::core::vector3df const &)*arg11);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getCollisionResultPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jobject jarg9_, jfloat jarg10) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::triangle3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool *arg8 = 0 ;
  irr::scene::ISceneNode **arg9 = 0 ;
  irr::f32 arg10 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg9_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::triangle3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg8 = *(bool **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg9 = (irr::scene::ISceneNode **)&jarg9; 
  arg10 = (irr::f32)jarg10; 
  result = (arg1)->getCollisionResultPosition(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,*arg6,*arg7,*arg8,*arg9,arg10);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getCollisionResultPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::triangle3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool *arg8 = 0 ;
  irr::scene::ISceneNode **arg9 = 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg9_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = *(irr::core::triangle3df **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg8 = *(bool **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  arg9 = (irr::scene::ISceneNode **)&jarg9; 
  result = (arg1)->getCollisionResultPosition(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,*arg6,*arg7,*arg8,*arg9);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getRayFromScreenCoordinates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::scene::ICameraSceneNode *arg3 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::line3d< irr::f32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ICameraSceneNode **)&jarg3; 
  result = (arg1)->getRayFromScreenCoordinates((irr::core::vector2d< irr::s32 > const &)*arg2,arg3);
  *(irr::core::line3d< irr::f32 > **)&jresult = new irr::core::line3d< irr::f32 >((const irr::core::line3d< irr::f32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getRayFromScreenCoordinates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::core::line3d< irr::f32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  result = (arg1)->getRayFromScreenCoordinates((irr::core::vector2d< irr::s32 > const &)*arg2);
  *(irr::core::line3d< irr::f32 > **)&jresult = new irr::core::line3d< irr::f32 >((const irr::core::line3d< irr::f32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getScreenCoordinatesFrom3DPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ICameraSceneNode *arg3 = (irr::scene::ICameraSceneNode *) 0 ;
  bool arg4 ;
  irr::core::vector2d< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ICameraSceneNode **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->getScreenCoordinatesFrom3DPosition((irr::core::vector3df const &)*arg2,arg3,arg4);
  *(irr::core::vector2d< irr::s32 > **)&jresult = new irr::core::vector2d< irr::s32 >((const irr::core::vector2d< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getScreenCoordinatesFrom3DPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ICameraSceneNode *arg3 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector2d< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::scene::ICameraSceneNode **)&jarg3; 
  result = (arg1)->getScreenCoordinatesFrom3DPosition((irr::core::vector3df const &)*arg2,arg3);
  *(irr::core::vector2d< irr::s32 > **)&jresult = new irr::core::vector2d< irr::s32 >((const irr::core::vector2d< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getScreenCoordinatesFrom3DPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector2d< irr::s32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (arg1)->getScreenCoordinatesFrom3DPosition((irr::core::vector3df const &)*arg2);
  *(irr::core::vector2d< irr::s32 > **)&jresult = new irr::core::vector2d< irr::s32 >((const irr::core::vector2d< irr::s32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromScreenCoordinatesBB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::scene::ISceneNode **)&jarg5; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromScreenCoordinatesBB((irr::core::vector2d< irr::s32 > const &)*arg2,arg3,arg4,arg5);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromScreenCoordinatesBB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromScreenCoordinatesBB((irr::core::vector2d< irr::s32 > const &)*arg2,arg3,arg4);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromScreenCoordinatesBB_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::vector2d< irr::s32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< irr::s32 > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromScreenCoordinatesBB((irr::core::vector2d< irr::s32 > const &)*arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


///My function
SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromScreenCoordinatesBB_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong collizionManagerPointer,jlong pointPointer) {
	ISceneCollisionManager*collizionManager=(ISceneCollisionManager*)collizionManagerPointer;
	int refCount=collizionManager->getReferenceCount();
	irr::core::vector2d< irr::s32 >*pos=(irr::core::vector2d< irr::s32 >*)pointPointer;
	ISceneNode*node=collizionManager->getSceneNodeFromScreenCoordinatesBB(*pos);
	/*if(node==0){
		printf("Node not Found");
	}else{
		printf("Node found");
	}
	fflush(stdout);*/
	return 0;
	//return (jlong)node;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromRayBB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::line3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(irr::scene::ISceneNode **)&jarg5; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2,arg3,arg4,arg5);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromRayBB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::line3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2,arg3,arg4);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromRayBB_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::line3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromRayBB_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::core::line3d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< irr::f32 > const & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromCameraBB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::scene::ICameraSceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromCameraBB(arg2,arg3,arg4);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromCameraBB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::scene::ICameraSceneNode **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromCameraBB(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeFromCameraBB_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  arg2 = *(irr::scene::ICameraSceneNode **)&jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromCameraBB(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeAndCollisionPointFromRay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  bool arg7 ;
  irr::core::line3df *argp2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  argp2 = *(irr::core::line3df **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line3df");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::triangle3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::scene::ISceneNode **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4,arg5,arg6,arg7);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeAndCollisionPointFromRay_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::core::line3df *argp2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  argp2 = *(irr::core::line3df **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line3df");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::triangle3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  arg6 = *(irr::scene::ISceneNode **)&jarg6; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4,arg5,arg6);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeAndCollisionPointFromRay_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::core::line3df *argp2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  argp2 = *(irr::core::line3df **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line3df");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::triangle3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4,arg5);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneCollisionManager_1getSceneNodeAndCollisionPointFromRay_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::core::line3df *argp2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  argp2 = *(irr::core::line3df **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::line3df");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::triangle3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3df & reference is null");
    return 0;
  } 
  result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ISceneCollisionManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneCollisionManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ICollisionCallback_1onCollision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ICollisionCallback *arg1 = (irr::scene::ICollisionCallback *) 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ICollisionCallback **)&jarg1; 
  arg2 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::ISceneNodeAnimatorCollisionResponse const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->onCollision((irr::scene::ISceneNodeAnimatorCollisionResponse const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ICollisionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ICollisionCallback *arg1 = (irr::scene::ICollisionCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ICollisionCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ISceneNodeAnimatorCollisionResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1isFalling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (bool)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->isFalling();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1setEllipsoidRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setEllipsoidRadius((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getEllipsoidRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = ((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getEllipsoidRadius();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setGravity((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = ((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getGravity();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1jump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->jump(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1setAnimateTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAnimateTarget(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getAnimateTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (bool)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getAnimateTarget();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1setEllipsoidTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setEllipsoidTranslation((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getEllipsoidTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = ((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getEllipsoidTranslation();
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1setWorld(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = *(irr::scene::ITriangleSelector **)&jarg2; 
  (arg1)->setWorld(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getWorld(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (irr::scene::ITriangleSelector *)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getWorld();
  *(irr::scene::ITriangleSelector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1setTargetNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = *(irr::scene::ISceneNode **)&jarg2; 
  (arg1)->setTargetNode(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getTargetNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (irr::scene::ISceneNode *)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getTargetNode();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1collisionOccurred(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (bool)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->collisionOccurred();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getCollisionPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionPoint();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getCollisionTriangle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::triangle3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (irr::core::triangle3df *) &((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionTriangle();
  *(irr::core::triangle3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getCollisionResultPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionResultPosition();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1getCollisionNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  result = (irr::scene::ISceneNode *)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionNode();
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1setCollisionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ICollisionCallback *arg2 = (irr::scene::ICollisionCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1; 
  arg2 = *(irr::scene::ICollisionCallback **)&jarg2; 
  (arg1)->setCollisionCallback(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->pos);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->vector = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->vector);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->startTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::u32) ((arg1)->startTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1endTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->endTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1endTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::u32) ((arg1)->endTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::video::SColor *)& ((arg1)->color);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2; 
  if (arg1) (arg1)->startColor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::video::SColor *)& ((arg1)->startColor);
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->startVector = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->startVector);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::dimension2df *arg2 = (irr::core::dimension2df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = *(irr::core::dimension2df **)&jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::dimension2df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::core::dimension2df *)& ((arg1)->size);
  *(irr::core::dimension2df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::dimension2df *arg2 = (irr::core::dimension2df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  arg2 = *(irr::core::dimension2df **)&jarg2; 
  if (arg1) (arg1)->startSize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SParticle_1startSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  irr::core::dimension2df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  result = (irr::core::dimension2df *)& ((arg1)->startSize);
  *(irr::core::dimension2df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SParticle(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SParticle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SParticle *)new irr::scene::SParticle();
  *(irr::scene::SParticle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SParticle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SParticle *arg1 = (irr::scene::SParticle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SParticle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ParticleEmitterTypeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::scene::ParticleEmitterTypeNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1emitt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::scene::SParticle **arg4 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = *(irr::scene::SParticle ***)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SParticle *& reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->emitt(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return ;
  } 
  (arg1)->setDirection((irr::core::vector3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMinParticlesPerSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setMinParticlesPerSecond(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMaxParticlesPerSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setMaxParticlesPerSecond(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMinStartColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->setMinStartColor((irr::video::SColor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMaxStartColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->setMaxStartColor((irr::video::SColor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMaxStartSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = *(irr::core::dimension2df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return ;
  } 
  (arg1)->setMaxStartSize((irr::core::dimension2df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMinStartSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = *(irr::core::dimension2df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return ;
  } 
  (arg1)->setMinStartSize((irr::core::dimension2df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMinLifeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setMinLifeTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMaxLifeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->setMaxLifeTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1setMaxAngleDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  (arg1)->setMaxAngleDegrees(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::IParticleEmitter const *)arg1)->getDirection();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMinParticlesPerSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMinParticlesPerSecond();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMaxParticlesPerSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMaxParticlesPerSecond();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMinStartColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::video::SColor *) &((irr::scene::IParticleEmitter const *)arg1)->getMinStartColor();
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMaxStartColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::video::SColor *) &((irr::scene::IParticleEmitter const *)arg1)->getMaxStartColor();
  *(irr::video::SColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMaxStartSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::core::dimension2df *) &((irr::scene::IParticleEmitter const *)arg1)->getMaxStartSize();
  *(irr::core::dimension2df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMinStartSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::core::dimension2df *) &((irr::scene::IParticleEmitter const *)arg1)->getMinStartSize();
  *(irr::core::dimension2df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMinLifeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMinLifeTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMaxLifeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMaxLifeTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getMaxAngleDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::s32)((irr::scene::IParticleEmitter const *)arg1)->getMaxAngleDegrees();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::scene::E_PARTICLE_EMITTER_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  result = (irr::scene::E_PARTICLE_EMITTER_TYPE)((irr::scene::IParticleEmitter const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IParticleEmitter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IParticleEmitter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ParticleAffectorTypeNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::c8 **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::c8 **)(irr::c8 **)irr::scene::ParticleAffectorTypeNames;
  *(irr::c8 ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleAffector_1affect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  irr::u32 arg2 ;
  irr::scene::SParticle *arg3 = (irr::scene::SParticle *) 0 ;
  irr::u32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::IParticleAffector **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = *(irr::scene::SParticle **)&jarg3; 
  arg4 = (irr::u32)jarg4; 
  (arg1)->affect(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleAffector_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleAffector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IParticleAffector_1getEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleAffector **)&jarg1; 
  result = (bool)((irr::scene::IParticleAffector const *)arg1)->getEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IParticleAffector_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  irr::scene::E_PARTICLE_AFFECTOR_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleAffector **)&jarg1; 
  result = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)((irr::scene::IParticleAffector const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IParticleAffector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IParticleAffector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1setParticleSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return ;
  } 
  (arg1)->setParticleSize((irr::core::dimension2d< irr::f32 > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1setParticleSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  (arg1)->setParticleSize();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1setParticlesAreGlobal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setParticlesAreGlobal(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1setParticlesAreGlobal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  (arg1)->setParticlesAreGlobal();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1clearParticles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  (arg1)->clearParticles();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1doParticleSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->doParticleSystem(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1getEmitter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (irr::scene::IParticleEmitter *)(arg1)->getEmitter();
  *(irr::scene::IParticleEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1setEmitter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleEmitter *arg2 = (irr::scene::IParticleEmitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IParticleEmitter **)&jarg2; 
  (arg1)->setEmitter(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1addAffector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleAffector *arg2 = (irr::scene::IParticleAffector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IParticleAffector **)&jarg2; 
  (arg1)->addAffector(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1getAffectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::list< irr::scene::IParticleAffector * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (irr::core::list< irr::scene::IParticleAffector * > *) &((irr::scene::IParticleSystemSceneNode const *)arg1)->getAffectors();
  *(irr::core::list< irr::scene::IParticleAffector * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1removeAllAffectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  (arg1)->removeAllAffectors();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14, jlong jarg15, jobject jarg15_, jlong jarg16, jobject jarg16_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::core::dimension2df *arg16 = 0 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  (void)jarg15_;
  (void)jarg16_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  arg15 = *(irr::core::dimension2df **)&jarg15;
  if (!arg15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  arg16 = *(irr::core::dimension2df **)&jarg16;
  if (!arg16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15,(irr::core::dimension2df const &)*arg16);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14, jlong jarg15, jobject jarg15_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  (void)jarg15_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  arg15 = *(irr::core::dimension2df **)&jarg15;
  if (!arg15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAnimatedMeshSceneNodeEmitter_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IAnimatedMeshSceneNode **)&jarg2; 
  result = (IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2);
  *(IParticleAnimatedMeshSceneNodeEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jint jarg10, jlong jarg11, jobject jarg11_, jlong jarg12, jobject jarg12_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::s32 arg10 ;
  irr::core::dimension2df *arg11 = 0 ;
  irr::core::dimension2df *arg12 = 0 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg11_;
  (void)jarg12_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = (irr::s32)jarg10; 
  arg11 = *(irr::core::dimension2df **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  arg12 = *(irr::core::dimension2df **)&jarg12;
  if (!arg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9,arg10,(irr::core::dimension2df const &)*arg11,(irr::core::dimension2df const &)*arg12);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jint jarg10, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::s32 arg10 ;
  irr::core::dimension2df *arg11 = 0 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = (irr::s32)jarg10; 
  arg11 = *(irr::core::dimension2df **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9,arg10,(irr::core::dimension2df const &)*arg11);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jint jarg10) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::s32 arg10 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = (irr::s32)jarg10; 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9,arg10);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  arg5 = (irr::u32)jarg5; 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg4 = (irr::u32)jarg4; 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return 0;
  } 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2);
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createBoxEmitter_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  IParticleBoxEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (IParticleBoxEmitter *)(arg1)->createBoxEmitter();
  *(IParticleBoxEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14, jlong jarg15, jobject jarg15_, jlong jarg16, jobject jarg16_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::core::dimension2df *arg16 = 0 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg10_;
  (void)jarg11_;
  (void)jarg15_;
  (void)jarg16_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  arg15 = *(irr::core::dimension2df **)&jarg15;
  if (!arg15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  arg16 = *(irr::core::dimension2df **)&jarg16;
  if (!arg16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15,(irr::core::dimension2df const &)*arg16);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14, jlong jarg15, jobject jarg15_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg10_;
  (void)jarg11_;
  (void)jarg15_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  arg15 = *(irr::core::dimension2df **)&jarg15;
  if (!arg15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg10_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg8 = (irr::u32)jarg8; 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::core::vector3df **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createCylinderEmitter_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  IParticleCylinderEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  result = (IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
  *(IParticleCylinderEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14, jlong jarg15, jobject jarg15_, jlong jarg16, jobject jarg16_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::core::dimension2df *arg16 = 0 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  (void)jarg15_;
  (void)jarg16_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  arg15 = *(irr::core::dimension2df **)&jarg15;
  if (!arg15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  arg16 = *(irr::core::dimension2df **)&jarg16;
  if (!arg16) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15,(irr::core::dimension2df const &)*arg16);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14, jlong jarg15, jobject jarg15_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  (void)jarg15_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  arg15 = *(irr::core::dimension2df **)&jarg15;
  if (!arg15) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13, jint jarg14) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  arg14 = (irr::s32)jarg14; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12, jlong jarg13) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  arg13 = (irr::u32)jarg13; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_, jlong jarg12) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg12 = (irr::u32)jarg12; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg11 = *(irr::video::SColor **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg10_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  arg10 = *(irr::video::SColor **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::u32)jarg9; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (irr::u32)jarg8; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  arg6 = (irr::s32)jarg6; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jfloat jarg5) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::f32)jarg5; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createMeshEmitter_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  IParticleMeshEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  result = (IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2);
  *(IParticleMeshEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jint jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::s32 arg9 ;
  irr::core::dimension2df *arg10 = 0 ;
  irr::core::dimension2df *arg11 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = (irr::u32)jarg7; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = *(irr::core::dimension2df **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  arg11 = *(irr::core::dimension2df **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8,arg9,(irr::core::dimension2df const &)*arg10,(irr::core::dimension2df const &)*arg11);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jint jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::s32 arg9 ;
  irr::core::dimension2df *arg10 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg10_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = (irr::u32)jarg7; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::s32)jarg9; 
  arg10 = *(irr::core::dimension2df **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8,arg9,(irr::core::dimension2df const &)*arg10);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jint jarg9) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::s32 arg9 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = (irr::u32)jarg7; 
  arg8 = (irr::u32)jarg8; 
  arg9 = (irr::s32)jarg9; 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8,arg9);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = (irr::u32)jarg7; 
  arg8 = (irr::u32)jarg8; 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg7 = (irr::u32)jarg7; 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg6 = *(irr::video::SColor **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  arg5 = *(irr::video::SColor **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = (irr::u32)jarg4; 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2);
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createPointEmitter_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter();
  *(irr::scene::IParticlePointEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jlong jarg11, jint jarg12, jlong jarg13, jobject jarg13_, jlong jarg14, jobject jarg14_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  irr::s32 arg12 ;
  irr::core::dimension2df *arg13 = 0 ;
  irr::core::dimension2df *arg14 = 0 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg13_;
  (void)jarg14_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = *(irr::video::SColor **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg10 = (irr::u32)jarg10; 
  arg11 = (irr::u32)jarg11; 
  arg12 = (irr::s32)jarg12; 
  arg13 = *(irr::core::dimension2df **)&jarg13;
  if (!arg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  arg14 = *(irr::core::dimension2df **)&jarg14;
  if (!arg14) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11,arg12,(irr::core::dimension2df const &)*arg13,(irr::core::dimension2df const &)*arg14);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jlong jarg11, jint jarg12, jlong jarg13, jobject jarg13_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  irr::s32 arg12 ;
  irr::core::dimension2df *arg13 = 0 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg9_;
  (void)jarg13_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = *(irr::video::SColor **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg10 = (irr::u32)jarg10; 
  arg11 = (irr::u32)jarg11; 
  arg12 = (irr::s32)jarg12; 
  arg13 = *(irr::core::dimension2df **)&jarg13;
  if (!arg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11,arg12,(irr::core::dimension2df const &)*arg13);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jlong jarg11, jint jarg12) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  irr::s32 arg12 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = *(irr::video::SColor **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg10 = (irr::u32)jarg10; 
  arg11 = (irr::u32)jarg11; 
  arg12 = (irr::s32)jarg12; 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11,arg12);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10, jlong jarg11) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = *(irr::video::SColor **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg10 = (irr::u32)jarg10; 
  arg11 = (irr::u32)jarg11; 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_, jlong jarg10) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = *(irr::video::SColor **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg10 = (irr::u32)jarg10; 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = *(irr::video::SColor **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg8_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  arg7 = (irr::u32)jarg7; 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg6 = (irr::u32)jarg6; 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  arg5 = *(irr::core::vector3df **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRingEmitter_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  IParticleRingEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  result = (IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4);
  *(IParticleRingEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jlong jarg10, jint jarg11, jlong jarg12, jobject jarg12_, jlong jarg13, jobject jarg13_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  irr::s32 arg11 ;
  irr::core::dimension2df *arg12 = 0 ;
  irr::core::dimension2df *arg13 = 0 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg12_;
  (void)jarg13_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = (irr::u32)jarg9; 
  arg10 = (irr::u32)jarg10; 
  arg11 = (irr::s32)jarg11; 
  arg12 = *(irr::core::dimension2df **)&jarg12;
  if (!arg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  arg13 = *(irr::core::dimension2df **)&jarg13;
  if (!arg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10,arg11,(irr::core::dimension2df const &)*arg12,(irr::core::dimension2df const &)*arg13);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jlong jarg10, jint jarg11, jlong jarg12, jobject jarg12_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  irr::s32 arg11 ;
  irr::core::dimension2df *arg12 = 0 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg12_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = (irr::u32)jarg9; 
  arg10 = (irr::u32)jarg10; 
  arg11 = (irr::s32)jarg11; 
  arg12 = *(irr::core::dimension2df **)&jarg12;
  if (!arg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10,arg11,(irr::core::dimension2df const &)*arg12);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jlong jarg10, jint jarg11) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  irr::s32 arg11 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = (irr::u32)jarg9; 
  arg10 = (irr::u32)jarg10; 
  arg11 = (irr::s32)jarg11; 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10,arg11);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jlong jarg10) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = (irr::u32)jarg9; 
  arg10 = (irr::u32)jarg10; 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg9 = (irr::u32)jarg9; 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg8 = *(irr::video::SColor **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg7_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  arg7 = *(irr::video::SColor **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  arg6 = (irr::u32)jarg6; 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg5 = (irr::u32)jarg5; 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = *(irr::core::vector3df **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createSphereEmitter_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  IParticleSphereEmitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3);
  *(IParticleSphereEmitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAttractionAffector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  IParticleAttractionAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(IParticleAttractionAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAttractionAffector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  IParticleAttractionAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4,arg5,arg6);
  *(IParticleAttractionAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAttractionAffector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  IParticleAttractionAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4,arg5);
  *(IParticleAttractionAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAttractionAffector_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  IParticleAttractionAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4);
  *(IParticleAttractionAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAttractionAffector_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  IParticleAttractionAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = (IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3);
  *(IParticleAttractionAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createAttractionAffector_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  IParticleAttractionAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2);
  *(IParticleAttractionAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createScaleParticleAffector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::dimension2df *arg2 = 0 ;
  irr::scene::IParticleAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::dimension2df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2df const & reference is null");
    return 0;
  } 
  result = (irr::scene::IParticleAffector *)(arg1)->createScaleParticleAffector((irr::core::dimension2df const &)*arg2);
  *(irr::scene::IParticleAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createScaleParticleAffector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (irr::scene::IParticleAffector *)(arg1)->createScaleParticleAffector();
  *(irr::scene::IParticleAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createFadeOutParticleAffector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::u32 arg3 ;
  IParticleFadeOutAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  result = (IParticleFadeOutAffector *)(arg1)->createFadeOutParticleAffector((irr::video::SColor const &)*arg2,arg3);
  *(IParticleFadeOutAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createFadeOutParticleAffector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  IParticleFadeOutAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return 0;
  } 
  result = (IParticleFadeOutAffector *)(arg1)->createFadeOutParticleAffector((irr::video::SColor const &)*arg2);
  *(IParticleFadeOutAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createFadeOutParticleAffector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  IParticleFadeOutAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (IParticleFadeOutAffector *)(arg1)->createFadeOutParticleAffector();
  *(IParticleFadeOutAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createGravityAffector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  IParticleGravityAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  result = (IParticleGravityAffector *)(arg1)->createGravityAffector((irr::core::vector3df const &)*arg2,arg3);
  *(IParticleGravityAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createGravityAffector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  IParticleGravityAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleGravityAffector *)(arg1)->createGravityAffector((irr::core::vector3df const &)*arg2);
  *(IParticleGravityAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createGravityAffector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  IParticleGravityAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (IParticleGravityAffector *)(arg1)->createGravityAffector();
  *(IParticleGravityAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRotationAffector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  IParticleRotationAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3df **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleRotationAffector *)(arg1)->createRotationAffector((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3);
  *(IParticleRotationAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRotationAffector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  IParticleRotationAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (IParticleRotationAffector *)(arg1)->createRotationAffector((irr::core::vector3df const &)*arg2);
  *(IParticleRotationAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1createRotationAffector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  IParticleRotationAffector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  result = (IParticleRotationAffector *)(arg1)->createRotationAffector();
  *(IParticleRotationAffector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IParticleSystemSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IParticleSystemSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getBoundingBoxConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::ITerrainSceneNode const *)arg1)->getBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::ITerrainSceneNode const *)arg1)->getBoundingBox(arg2,arg3);
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getIndexCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  result = (irr::u32)((irr::scene::ITerrainSceneNode const *)arg1)->getIndexCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  result = (irr::scene::IMesh *)(arg1)->getMesh();
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getRenderBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  result = (irr::scene::IMeshBuffer *)(arg1)->getRenderBuffer();
  *(irr::scene::IMeshBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getMeshBufferForLOD_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  IDynamicMeshBuffer *arg2 = 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(IDynamicMeshBuffer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IDynamicMeshBuffer & reference is null");
    return ;
  } 
  arg3 = (irr::s32)jarg3; 
  ((irr::scene::ITerrainSceneNode const *)arg1)->getMeshBufferForLOD(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getMeshBufferForLOD_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  IDynamicMeshBuffer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(IDynamicMeshBuffer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IDynamicMeshBuffer & reference is null");
    return ;
  } 
  ((irr::scene::ITerrainSceneNode const *)arg1)->getMeshBufferForLOD(*arg2);
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getIndicesForPatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::s32)(arg1)->getIndicesForPatch(*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getIndicesForPatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::array< irr::u32,irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::core::array< irr::u32,irrAllocator< irr::u32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::u32,irrAllocator< irr::u32 > > & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::s32)(arg1)->getIndicesForPatch(*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getCurrentLODOfPatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::array< irr::s32,irrAllocator< irr::s32 > > *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::core::array< irr::s32,irrAllocator< irr::s32 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::s32,irrAllocator< irr::s32 > > & reference is null");
    return 0;
  } 
  result = (irr::s32)((irr::scene::ITerrainSceneNode const *)arg1)->getCurrentLODOfPatches(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1setLODOfPatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  (arg1)->setLODOfPatch(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1setLODOfPatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->setLODOfPatch(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getTerrainCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  result = (irr::core::vector3df *) &((irr::scene::ITerrainSceneNode const *)arg1)->getTerrainCenter();
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  result = (irr::f32)((irr::scene::ITerrainSceneNode const *)arg1)->getHeight(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1setCameraMovementDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setCameraMovementDelta(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1setCameraRotationDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setCameraRotationDelta(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1setDynamicSelectorUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDynamicSelectorUpdate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1overrideLODDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::f64 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::f64)jarg3; 
  result = (bool)(arg1)->overrideLODDistance(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1scaleTexture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  (arg1)->scaleTexture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1scaleTexture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->scaleTexture(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1scaleTexture_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  (arg1)->scaleTexture();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::SColor arg3 ;
  irr::s32 arg4 ;
  irr::video::SColor *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (irr::s32)jarg4; 
  result = (bool)(arg1)->loadHeightMap(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  argp3 = *(irr::video::SColor **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->loadHeightMap(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (bool)(arg1)->loadHeightMap(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMapRAW_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jboolean jarg5, jint jarg6, jlong jarg7, jobject jarg7_, jint jarg8) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  irr::video::SColor arg7 ;
  irr::s32 arg8 ;
  irr::video::SColor *argp7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (irr::s32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (irr::s32)jarg8; 
  result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMapRAW_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jboolean jarg5, jint jarg6, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  irr::video::SColor arg7 ;
  irr::video::SColor *argp7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (irr::s32)jarg6; 
  argp7 = *(irr::video::SColor **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return 0;
  }
  arg7 = *argp7; 
  result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMapRAW_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jboolean jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (irr::s32)jarg6; 
  result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMapRAW_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMapRAW_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMapRAW_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1loadHeightMapRAW_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  arg2 = *(irr::io::IReadFile **)&jarg2; 
  result = (bool)(arg1)->loadHeightMapRAW(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ITerrainSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ITerrainSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextSceneNode_1setText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::scene::ITextSceneNode *arg1 = (irr::scene::ITextSceneNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ITextSceneNode **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return ;
    }
  }
  (arg1)->setText((wchar_t const *)arg2);
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextSceneNode_1setTextColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::ITextSceneNode *arg1 = (irr::scene::ITextSceneNode *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::ITextSceneNode **)&jarg1; 
  argp2 = *(irr::video::SColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::SColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTextColor(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ITextSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ITextSceneNode *arg1 = (irr::scene::ITextSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ITextSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1setSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::f32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::f32 > const & reference is null");
    return ;
  } 
  (arg1)->setSize((irr::core::dimension2d< irr::f32 > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1setSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  arg3 = (irr::f32)jarg3; 
  arg4 = (irr::f32)jarg4; 
  (arg1)->setSize(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1getSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  result = (irr::core::dimension2d< irr::f32 > *) &((irr::scene::IBillboardSceneNode const *)arg1)->getSize();
  *(irr::core::dimension2d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1getSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::f32 *arg2 = 0 ;
  irr::f32 *arg3 = 0 ;
  irr::f32 *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  arg2 = *(irr::f32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return ;
  } 
  arg3 = *(irr::f32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return ;
  } 
  arg4 = *(irr::f32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f32 & reference is null");
    return ;
  } 
  ((irr::scene::IBillboardSceneNode const *)arg1)->getSize(*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1setColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->setColor((irr::video::SColor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1setColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  arg3 = *(irr::video::SColor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor const & reference is null");
    return ;
  } 
  (arg1)->setColor((irr::video::SColor const &)*arg2,(irr::video::SColor const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1getColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  arg2 = *(irr::video::SColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor & reference is null");
    return ;
  } 
  arg3 = *(irr::video::SColor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SColor & reference is null");
    return ;
  } 
  ((irr::scene::IBillboardSceneNode const *)arg1)->getColor(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IBillboardSceneNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IBillboardSceneNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SAnimatedMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE arg2 ;
  irr::scene::SAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  arg2 = (irr::scene::E_ANIMATED_MESH_TYPE)jarg2; 
  result = (irr::scene::SAnimatedMesh *)new irr::scene::SAnimatedMesh(arg1,arg2);
  *(irr::scene::SAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SAnimatedMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::scene::SAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IMesh **)&jarg1; 
  result = (irr::scene::SAnimatedMesh *)new irr::scene::SAnimatedMesh(arg1);
  *(irr::scene::SAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SAnimatedMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SAnimatedMesh *)new irr::scene::SAnimatedMesh();
  *(irr::scene::SAnimatedMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SAnimatedMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getFrameCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::u32)((irr::scene::SAnimatedMesh const *)arg1)->getFrameCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getAnimationSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::f32)((irr::scene::SAnimatedMesh const *)arg1)->getAnimationSpeed();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1setAnimationSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  (arg1)->setAnimationSpeed(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMesh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3,arg4,arg5);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMesh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3,arg4);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMesh_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMesh_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::scene::IMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  result = (irr::scene::IMesh *)(arg1)->getMesh(arg2);
  *(irr::scene::IMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1addMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = *(irr::scene::IMesh **)&jarg2; 
  (arg1)->addMesh(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getBoundingBoxConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::SAnimatedMesh const *)arg1)->getBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1setBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return ;
  } 
  (arg1)->setBoundingBox((irr::core::aabbox3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1recalculateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  (arg1)->recalculateBoundingBox();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMeshType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::scene::E_ANIMATED_MESH_TYPE)((irr::scene::SAnimatedMesh const *)arg1)->getMeshType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMeshBufferCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::u32)((irr::scene::SAnimatedMesh const *)arg1)->getMeshBufferCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMeshBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::IMeshBuffer *)((irr::scene::SAnimatedMesh const *)arg1)->getMeshBuffer(arg2);
  *(irr::scene::IMeshBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1getMeshBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshBuffer *)((irr::scene::SAnimatedMesh const *)arg1)->getMeshBuffer((irr::video::SMaterial const &)*arg2);
  *(irr::scene::IMeshBuffer **)&jresult = result; 
  return jresult;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1setMaterialFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong flag, jboolean state) {
	irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  bool arg3 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  (arg1)->setMaterialFlag((E_MATERIAL_FLAG)flag,state?true: false);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1setHardwareMappingHint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_BUFFER_TYPE arg3 ;
  E_HARDWARE_MAPPING *argp2 ;
  E_BUFFER_TYPE *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(E_BUFFER_TYPE **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setHardwareMappingHint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1setHardwareMappingHint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_HARDWARE_MAPPING *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setHardwareMappingHint(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1setDirty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  E_BUFFER_TYPE arg2 ;
  E_BUFFER_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  argp2 = *(E_BUFFER_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDirty(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1setDirty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  (arg1)->setDirty();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1Meshes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *arg2 = (irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jarg2; 
  if (arg1) (arg1)->Meshes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1Meshes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *)& ((arg1)->Meshes);
  *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1Box_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::core::aabbox3d< irr::f32 > *arg2 = (irr::core::aabbox3d< irr::f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< irr::f32 > **)&jarg2; 
  if (arg1) (arg1)->Box = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1Box_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *)& ((arg1)->Box);
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1FramesPerSecond_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->FramesPerSecond = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1FramesPerSecond_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::f32) ((arg1)->FramesPerSecond);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  arg2 = (irr::scene::E_ANIMATED_MESH_TYPE)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SAnimatedMesh *arg1 = (irr::scene::SAnimatedMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SAnimatedMesh **)&jarg1; 
  result = (irr::scene::E_ANIMATED_MESH_TYPE) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMesh(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMesh *)new irr::scene::SMesh();
  *(irr::scene::SMesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1getMeshBufferCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  result = (irr::u32)((irr::scene::SMesh const *)arg1)->getMeshBufferCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1getMeshBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::IMeshBuffer *)((irr::scene::SMesh const *)arg1)->getMeshBuffer(arg2);
  *(irr::scene::IMeshBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1getMeshBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return 0;
  } 
  result = (irr::scene::IMeshBuffer *)((irr::scene::SMesh const *)arg1)->getMeshBuffer((irr::video::SMaterial const &)*arg2);
  *(irr::scene::IMeshBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1getBoundingBoxConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::SMesh const *)arg1)->getBoundingBox();
  *(irr::core::aabbox3d< irr::f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1setBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  arg2 = *(irr::core::aabbox3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3df const & reference is null");
    return ;
  } 
  (arg1)->setBoundingBox((irr::core::aabbox3df const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1recalculateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  (arg1)->recalculateBoundingBox();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1addMeshBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  arg2 = *(irr::scene::IMeshBuffer **)&jarg2; 
  (arg1)->addMeshBuffer(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1setMaterialFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong flag, jboolean state) {
	irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  (arg1)->setMaterialFlag((E_MATERIAL_FLAG)flag,state?true:false);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1setHardwareMappingHint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_BUFFER_TYPE arg3 ;
  E_HARDWARE_MAPPING *argp2 ;
  E_BUFFER_TYPE *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(E_BUFFER_TYPE **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setHardwareMappingHint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1setHardwareMappingHint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  E_HARDWARE_MAPPING arg2 ;
  E_HARDWARE_MAPPING *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  argp2 = *(E_HARDWARE_MAPPING **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_HARDWARE_MAPPING");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setHardwareMappingHint(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1setDirty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  E_BUFFER_TYPE arg2 ;
  E_BUFFER_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  argp2 = *(E_BUFFER_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_BUFFER_TYPE");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDirty(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1setDirty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  (arg1)->setDirty();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1MeshBuffers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::core::array< irr::scene::IMeshBuffer *,irrAllocator< irr::scene::IMeshBuffer * > > *arg2 = (irr::core::array< irr::scene::IMeshBuffer *,irrAllocator< irr::scene::IMeshBuffer * > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::IMeshBuffer *,irrAllocator< irr::scene::IMeshBuffer * > > **)&jarg2; 
  if (arg1) (arg1)->MeshBuffers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1MeshBuffers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMesh *arg1 = (irr::scene::SMesh *) 0 ;
  irr::core::array< irr::scene::IMeshBuffer *,irrAllocator< irr::scene::IMeshBuffer * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMesh **)&jarg1; 
  result = (irr::core::array< irr::scene::IMeshBuffer *,irrAllocator< irr::scene::IMeshBuffer * > > *)& ((arg1)->MeshBuffers);
  *(irr::core::array< irr::scene::IMeshBuffer *,irrAllocator< irr::scene::IMeshBuffer * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IWriteFile_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IWriteFile **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  result = (irr::s32)(arg1)->write((void const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IWriteFile_1seek_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  long arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IWriteFile **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->seek(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IWriteFile_1seek_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IWriteFile **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->seek(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IWriteFile_1getPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IWriteFile **)&jarg1; 
  result = (long)((irr::io::IWriteFile const *)arg1)->getPos();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IWriteFile_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IWriteFile **)&jarg1; 
  result = (path *) &((irr::io::IWriteFile const *)arg1)->getFileName();
  *(path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IWriteFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IWriteFile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1addSceneNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->addSceneNode(arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1addSceneNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  result = (irr::scene::ISceneNode *)(arg1)->addSceneNode(arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1addSceneNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((irr::c8 const *)arg2,arg3);
  *(irr::scene::ISceneNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1addSceneNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((irr::c8 const *)arg2);
  *(irr::scene::ISceneNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1getCreatableSceneNodeTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneNodeFactory const *)arg1)->getCreatableSceneNodeTypeCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1getCreateableSceneNodeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ESCENE_NODE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::ESCENE_NODE_TYPE)((irr::scene::ISceneNodeFactory const *)arg1)->getCreateableSceneNodeType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1getCreateableSceneNodeTypeName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::u32 arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::c8 *)((irr::scene::ISceneNodeFactory const *)arg1)->getCreateableSceneNodeTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeFactory_1getCreateableSceneNodeTypeName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  arg2 = (irr::scene::ESCENE_NODE_TYPE)jarg2; 
  result = (irr::c8 *)((irr::scene::ISceneNodeFactory const *)arg1)->getCreateableSceneNodeTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ISceneNodeFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneNodeFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorFactory_1createSceneNodeAnimator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  ESCENE_NODE_ANIMATOR_TYPE arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  ESCENE_NODE_ANIMATOR_TYPE *argp2 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg1; 
  argp2 = *(ESCENE_NODE_ANIMATOR_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ESCENE_NODE_ANIMATOR_TYPE");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator(arg2,arg3);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorFactory_1createSceneNodeAnimator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(irr::scene::ISceneNode **)&jarg3; 
  result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator((irr::c8 const *)arg2,arg3);
  *(irr::scene::ISceneNodeAnimator **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorFactory_1getCreatableSceneNodeAnimatorTypeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg1; 
  result = (irr::u32)((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreatableSceneNodeAnimatorTypeCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorFactory_1getCreateableSceneNodeAnimatorType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::u32 arg2 ;
  ESCENE_NODE_ANIMATOR_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = ((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreateableSceneNodeAnimatorType(arg2);
  *(ESCENE_NODE_ANIMATOR_TYPE **)&jresult = new ESCENE_NODE_ANIMATOR_TYPE((const ESCENE_NODE_ANIMATOR_TYPE &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorFactory_1getCreateableSceneNodeAnimatorTypeName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::u32 arg2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::c8 *)((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreateableSceneNodeAnimatorTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorFactory_1getCreateableSceneNodeAnimatorTypeName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  ESCENE_NODE_ANIMATOR_TYPE arg2 ;
  ESCENE_NODE_ANIMATOR_TYPE *argp2 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg1; 
  argp2 = *(ESCENE_NODE_ANIMATOR_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ESCENE_NODE_ANIMATOR_TYPE");
    return 0;
  }
  arg2 = *argp2; 
  result = (irr::c8 *)((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreateableSceneNodeAnimatorTypeName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ISceneNodeAnimatorFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::ISceneNodeAnimatorFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1Q3LevelLoadParameter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::quake3::Q3LevelLoadParameter *)new irr::scene::quake3::Q3LevelLoadParameter();
  *(irr::scene::quake3::Q3LevelLoadParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1defaultLightMapMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::video::E_MATERIAL_TYPE arg2 ;
  irr::video::E_MATERIAL_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  argp2 = *(irr::video::E_MATERIAL_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::E_MATERIAL_TYPE");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->defaultLightMapMaterial = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1defaultLightMapMaterial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::video::E_MATERIAL_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result =  ((arg1)->defaultLightMapMaterial);
  *(irr::video::E_MATERIAL_TYPE **)&jresult = new irr::video::E_MATERIAL_TYPE((const irr::video::E_MATERIAL_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1defaultModulate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::video::E_MODULATE_FUNC arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::video::E_MODULATE_FUNC)jarg2; 
  if (arg1) (arg1)->defaultModulate = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1defaultModulate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::video::E_MODULATE_FUNC result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::video::E_MODULATE_FUNC) ((arg1)->defaultModulate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1defaultFilter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2 ;
  irr::video::E_MATERIAL_FLAG *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  argp2 = *(irr::video::E_MATERIAL_FLAG **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::E_MATERIAL_FLAG");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->defaultFilter = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1defaultFilter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::video::E_MATERIAL_FLAG result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result =  ((arg1)->defaultFilter);
  *(irr::video::E_MATERIAL_FLAG **)&jresult = new irr::video::E_MATERIAL_FLAG((const irr::video::E_MATERIAL_FLAG &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1patchTesselation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->patchTesselation = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1patchTesselation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->patchTesselation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->verbose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1startTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->startTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1startTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::u32) ((arg1)->startTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1endTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->endTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1endTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::u32) ((arg1)->endTime);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1mergeShaderBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->mergeShaderBuffer = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1mergeShaderBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->mergeShaderBuffer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1cleanUnResolvedMeshes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->cleanUnResolvedMeshes = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1cleanUnResolvedMeshes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->cleanUnResolvedMeshes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1loadAllShaders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->loadAllShaders = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1loadAllShaders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->loadAllShaders);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1loadSkyShader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->loadSkyShader = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1loadSkyShader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->loadSkyShader);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1alpharef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->alpharef = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1alpharef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->alpharef);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1swapLump_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->swapLump = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1swapLump_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->swapLump);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1swapHeader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->swapHeader = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1swapHeader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::s32) ((arg1)->swapHeader);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1scriptDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::c8 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->scriptDir, (const char *)arg2, 64-1);
      arg1->scriptDir[64-1] = 0;
    } else {
      arg1->scriptDir[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_Q3LevelLoadParameter_1scriptDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  result = (irr::c8 *)(irr::c8 *) ((arg1)->scriptDir);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1Q3LevelLoadParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::Q3LevelLoadParameter *arg1 = (irr::scene::quake3::Q3LevelLoadParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::Q3LevelLoadParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4) {
  jshort jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u32 *arg2 = 0 ;
  irr::c8 **arg3 ;
  irr::u16 arg4 ;
  irr::s16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  arg2 = *(irr::u32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return 0;
  } 
  arg3 = *(irr::c8 ***)&jarg3; 
  arg4 = (irr::u16)jarg4; 
  result = (irr::s16)irr::scene::quake3::isEqual((irr::core::string< char,irrAllocator< char > > const &)*arg1,*arg2,(char const *(*))arg3,arg4);
  jresult = (jshort)result; 
  
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_getAsFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jfloat jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u32 *arg2 = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  arg2 = *(irr::u32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return 0;
  } 
  result = (irr::f32)irr::scene::quake3::getAsFloat((irr::core::string< char,irrAllocator< char > > const &)*arg1,*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getAsVector3df(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u32 *arg2 = 0 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  arg2 = *(irr::u32 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return 0;
  } 
  result = irr::scene::quake3::getAsVector3df((irr::core::string< char,irrAllocator< char > > const &)*arg1,*arg2);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_getAsStringList(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  irr::scene::quake3::tStringList *arg1 = 0 ;
  irr::s32 arg2 ;
  irr::core::stringc *arg3 = 0 ;
  irr::u32 *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::tStringList **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::tStringList & reference is null");
    return ;
  } 
  arg2 = (irr::s32)jarg2; 
  arg3 = *(irr::core::stringc **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return ;
  } 
  arg4 = *(irr::u32 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return ;
  } 
  irr::scene::quake3::getAsStringList(*arg1,arg2,(irr::core::string< char,irrAllocator< char > > const &)*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SBlendFunc(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  irr::video::E_MODULATE_FUNC arg1 ;
  irr::scene::quake3::SBlendFunc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::video::E_MODULATE_FUNC)jarg1; 
  result = (irr::scene::quake3::SBlendFunc *)new irr::scene::quake3::SBlendFunc(arg1);
  *(irr::scene::quake3::SBlendFunc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::video::E_MATERIAL_TYPE arg2 ;
  irr::video::E_MATERIAL_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  argp2 = *(irr::video::E_MATERIAL_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::video::E_MATERIAL_TYPE");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::video::E_MATERIAL_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  result =  ((arg1)->type);
  *(irr::video::E_MATERIAL_TYPE **)&jresult = new irr::video::E_MATERIAL_TYPE((const irr::video::E_MATERIAL_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1modulate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::video::E_MODULATE_FUNC arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  arg2 = (irr::video::E_MODULATE_FUNC)jarg2; 
  if (arg1) (arg1)->modulate = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1modulate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::video::E_MODULATE_FUNC result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  result = (irr::video::E_MODULATE_FUNC) ((arg1)->modulate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1param0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->param0 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1param0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  result = (irr::f32) ((arg1)->param0);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1isTransparent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->isTransparent = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SBlendFunc_1isTransparent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  result = (irr::u32) ((arg1)->isTransparent);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SBlendFunc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::SBlendFunc *arg1 = (irr::scene::quake3::SBlendFunc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::SBlendFunc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_getCullingFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  result = (bool)irr::scene::quake3::getCullingFunction((irr::core::string< char,irrAllocator< char > > const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_getDepthFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  result = (irr::u8)irr::scene::quake3::getDepthFunction((irr::core::string< char,irrAllocator< char > > const &)*arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_getBlendFunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::SBlendFunc *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return ;
  } 
  arg2 = *(irr::scene::quake3::SBlendFunc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::SBlendFunc & reference is null");
    return ;
  } 
  irr::scene::quake3::getBlendFunc((irr::core::string< char,irrAllocator< char > > const &)*arg1,*arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_Noiser_1get(JNIEnv *jenv, jclass jcls) {
  jfloat jresult = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  result = (irr::f32)irr::scene::quake3::Noiser::get();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1Noiser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::quake3::Noiser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::quake3::Noiser *)new irr::scene::quake3::Noiser();
  *(irr::scene::quake3::Noiser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1Noiser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::Noiser *arg1 = (irr::scene::quake3::Noiser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::Noiser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SModifierFunction(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::quake3::SModifierFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::quake3::SModifierFunction *)new irr::scene::quake3::SModifierFunction();
  *(irr::scene::quake3::SModifierFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1masterfunc0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::scene::quake3::eQ3ModifierFunction)jarg2; 
  if (arg1) (arg1)->masterfunc0 = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1masterfunc0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::scene::quake3::eQ3ModifierFunction) ((arg1)->masterfunc0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1masterfunc1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::scene::quake3::eQ3ModifierFunction)jarg2; 
  if (arg1) (arg1)->masterfunc1 = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1masterfunc1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::scene::quake3::eQ3ModifierFunction) ((arg1)->masterfunc1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1func_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::scene::quake3::eQ3ModifierFunction)jarg2; 
  if (arg1) (arg1)->func = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1func_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::scene::quake3::eQ3ModifierFunction) ((arg1)->func);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1tcgen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::scene::quake3::eQ3ModifierFunction)jarg2; 
  if (arg1) (arg1)->tcgen = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1tcgen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::scene::quake3::eQ3ModifierFunction) ((arg1)->tcgen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1rgbgen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::scene::quake3::eQ3ModifierFunction)jarg2; 
  if (arg1) (arg1)->rgbgen = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1rgbgen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::scene::quake3::eQ3ModifierFunction) ((arg1)->rgbgen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1alphagen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::scene::quake3::eQ3ModifierFunction)jarg2; 
  if (arg1) (arg1)->alphagen = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1alphagen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::scene::quake3::eQ3ModifierFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::scene::quake3::eQ3ModifierFunction) ((arg1)->alphagen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1phase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->phase = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1phase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::f32) ((arg1)->phase);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::f32) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::f32) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::f32) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  result = (irr::u32) ((arg1)->count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SModifierFunction_1evaluate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  irr::f32 arg2 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  result = (irr::f32)((irr::scene::quake3::SModifierFunction const *)arg1)->evaluate(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SModifierFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::SModifierFunction *arg1 = (irr::scene::quake3::SModifierFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_getMD3Normal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::core::vector3df result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = irr::scene::quake3::getMD3Normal(arg1,arg2);
  *(irr::core::vector3df **)&jresult = new irr::core::vector3df((const irr::core::vector3df &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_getModifierFunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::scene::quake3::SModifierFunction *arg1 = 0 ;
  irr::core::stringc *arg2 = 0 ;
  irr::u32 *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SModifierFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::SModifierFunction & reference is null");
    return ;
  } 
  arg2 = *(irr::core::stringc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return ;
  } 
  arg3 = *(irr::u32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return ;
  } 
  irr::scene::quake3::getModifierFunc(*arg1,(irr::core::string< char,irrAllocator< char > > const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  result = (irr::core::stringc *)& ((arg1)->name);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2; 
  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  result = (irr::core::stringc *)& ((arg1)->content);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  irr::c8 *arg1 = (irr::c8 *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::quake3::SVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (irr::c8 *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::scene::quake3::SVariable *)new irr::scene::quake3::SVariable((irr::c8 const *)arg1,(irr::c8 const *)arg2);
  *(irr::scene::quake3::SVariable **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  irr::c8 *arg1 = (irr::c8 *) 0 ;
  irr::scene::quake3::SVariable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (irr::c8 *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (irr::scene::quake3::SVariable *)new irr::scene::quake3::SVariable((irr::c8 const *)arg1);
  *(irr::scene::quake3::SVariable **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SVariable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  result = (irr::s32)((irr::scene::quake3::SVariable const *)arg1)->isValid();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  irr::scene::quake3::SVariable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  arg2 = *(irr::scene::quake3::SVariable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::SVariable const & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::quake3::SVariable const *)arg1)->operator ==((irr::scene::quake3::SVariable const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SVariable_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::quake3::SVariable *arg1 = (irr::scene::quake3::SVariable *) 0 ;
  irr::scene::quake3::SVariable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::quake3::SVariable **)&jarg1; 
  arg2 = *(irr::scene::quake3::SVariable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::SVariable const & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::quake3::SVariable const *)arg1)->operator <((irr::scene::quake3::SVariable const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SVarGroup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVarGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::quake3::SVarGroup *)new irr::scene::quake3::SVarGroup();
  *(irr::scene::quake3::SVarGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SVarGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SVarGroup_1isDefined_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (irr::u32)((irr::scene::quake3::SVarGroup const *)arg1)->isDefined((irr::c8 const *)arg2,(irr::c8 const *)arg3);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SVarGroup_1isDefined_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::u32)((irr::scene::quake3::SVarGroup const *)arg1)->isDefined((irr::c8 const *)arg2);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SVarGroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (irr::core::stringc *) &((irr::scene::quake3::SVarGroup const *)arg1)->get((irr::c8 const *)arg2);
  *(irr::core::stringc **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SVarGroup_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (irr::c8 *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->set((irr::c8 const *)arg2,(irr::c8 const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SVarGroup_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (irr::c8 *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->set((irr::c8 const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SVarGroup_1Variable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::core::array< irr::scene::quake3::SVariable,irrAllocator< irr::scene::quake3::SVariable > > *arg2 = (irr::core::array< irr::scene::quake3::SVariable,irrAllocator< irr::scene::quake3::SVariable > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::quake3::SVariable,irrAllocator< irr::scene::quake3::SVariable > > **)&jarg2; 
  if (arg1) (arg1)->Variable = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SVarGroup_1Variable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVarGroup *arg1 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::core::array< irr::scene::quake3::SVariable,irrAllocator< irr::scene::quake3::SVariable > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroup **)&jarg1; 
  result = (irr::core::array< irr::scene::quake3::SVariable,irrAllocator< irr::scene::quake3::SVariable > > *)& ((arg1)->Variable);
  *(irr::core::array< irr::scene::quake3::SVariable,irrAllocator< irr::scene::quake3::SVariable > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SVarGroupList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVarGroupList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::quake3::SVarGroupList *)new irr::scene::quake3::SVarGroupList();
  *(irr::scene::quake3::SVarGroupList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SVarGroupList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::SVarGroupList *arg1 = (irr::scene::quake3::SVarGroupList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::SVarGroupList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SVarGroupList_1VariableGroup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::SVarGroupList *arg1 = (irr::scene::quake3::SVarGroupList *) 0 ;
  irr::core::array< irr::scene::quake3::SVarGroup,irrAllocator< irr::scene::quake3::SVarGroup > > *arg2 = (irr::core::array< irr::scene::quake3::SVarGroup,irrAllocator< irr::scene::quake3::SVarGroup > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroupList **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::quake3::SVarGroup,irrAllocator< irr::scene::quake3::SVarGroup > > **)&jarg2; 
  if (arg1) (arg1)->VariableGroup = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SVarGroupList_1VariableGroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::SVarGroupList *arg1 = (irr::scene::quake3::SVarGroupList *) 0 ;
  irr::core::array< irr::scene::quake3::SVarGroup,irrAllocator< irr::scene::quake3::SVarGroup > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::SVarGroupList **)&jarg1; 
  result = (irr::core::array< irr::scene::quake3::SVarGroup,irrAllocator< irr::scene::quake3::SVarGroup > > *)& ((arg1)->VariableGroup);
  *(irr::core::array< irr::scene::quake3::SVarGroup,irrAllocator< irr::scene::quake3::SVarGroup > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IShader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::quake3::IShader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::quake3::IShader *)new irr::scene::quake3::IShader();
  *(irr::scene::quake3::IShader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IShader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShader_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::quake3::IShader *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  arg2 = *(irr::scene::quake3::IShader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::IShader const & reference is null");
    return ;
  } 
  (arg1)->operator =((irr::scene::quake3::IShader const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IShader_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::quake3::IShader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  arg2 = *(irr::scene::quake3::IShader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::IShader const & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::quake3::IShader const *)arg1)->operator ==((irr::scene::quake3::IShader const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IShader_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::quake3::IShader *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  arg2 = *(irr::scene::quake3::IShader **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::IShader const & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::quake3::IShader const *)arg1)->operator <((irr::scene::quake3::IShader const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IShader_1getGroupSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  result = (irr::u32)((irr::scene::quake3::IShader const *)arg1)->getGroupSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IShader_1getGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::u32 arg2 ;
  irr::scene::quake3::SVarGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  result = (irr::scene::quake3::SVarGroup *)((irr::scene::quake3::IShader const *)arg1)->getGroup(arg2);
  *(irr::scene::quake3::SVarGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShader_1ID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IShader_1ID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  result = (irr::s32) ((arg1)->ID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShader_1VarGroup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::quake3::SVarGroupList *arg2 = (irr::scene::quake3::SVarGroupList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  arg2 = *(irr::scene::quake3::SVarGroupList **)&jarg2; 
  if (arg1) (arg1)->VarGroup = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IShader_1VarGroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::quake3::SVarGroupList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  result = (irr::scene::quake3::SVarGroupList *) ((arg1)->VarGroup);
  *(irr::scene::quake3::SVarGroupList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShader_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IShader_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::quake3::IShader *arg1 = (irr::scene::quake3::IShader *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::quake3::IShader **)&jarg1; 
  result = (irr::core::stringc *)& ((arg1)->name);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_dumpVarGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::SVarGroup *arg2 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc & reference is null");
    return ;
  } 
  arg2 = *(irr::scene::quake3::SVarGroup **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  irr::scene::quake3::dumpVarGroup(*arg1,(irr::scene::quake3::SVarGroup const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dumpShader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::IShader *arg2 = (irr::scene::quake3::IShader *) 0 ;
  bool arg3 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc & reference is null");
    return 0;
  } 
  arg2 = *(irr::scene::quake3::IShader **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (irr::core::stringc *) &irr::scene::quake3::dumpShader(*arg1,(irr::scene::quake3::IShader const *)arg2,arg3);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dumpShader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::IShader *arg2 = (irr::scene::quake3::IShader *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc & reference is null");
    return 0;
  } 
  arg2 = *(irr::scene::quake3::IShader **)&jarg2; 
  result = (irr::core::stringc *) &irr::scene::quake3::dumpShader(*arg1,(irr::scene::quake3::IShader const *)arg2);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_getTextures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  irr::scene::quake3::tTexArray *arg1 = 0 ;
  irr::core::stringc *arg2 = 0 ;
  irr::u32 *arg3 = 0 ;
  irr::io::IFileSystem *arg4 = (irr::io::IFileSystem *) 0 ;
  irr::video::IVideoDriver *arg5 = (irr::video::IVideoDriver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(irr::scene::quake3::tTexArray **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::quake3::tTexArray & reference is null");
    return ;
  } 
  arg2 = *(irr::core::stringc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return ;
  } 
  arg3 = *(irr::u32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::u32 & reference is null");
    return ;
  } 
  arg4 = *(irr::io::IFileSystem **)&jarg4; 
  arg5 = *(irr::video::IVideoDriver **)&jarg5; 
  irr::scene::quake3::getTextures(*arg1,(irr::core::string< char,irrAllocator< char > > const &)*arg2,*arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IShaderManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::quake3::IShaderManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::quake3::IShaderManager *)new irr::scene::quake3::IShaderManager();
  *(irr::scene::quake3::IShaderManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IShaderManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::quake3::IShaderManager *arg1 = (irr::scene::quake3::IShaderManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::quake3::IShaderManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  result = (irr::s32) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  result = (irr::s32) ((arg1)->num);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1looping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->looping = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1looping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  result = (irr::s32) ((arg1)->looping);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1fps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->fps = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3AnimationInfo_1fps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  result = (irr::s32) ((arg1)->fps);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3AnimationInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3AnimationInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3AnimationInfo *)new irr::scene::SMD3AnimationInfo();
  *(irr::scene::SMD3AnimationInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3AnimationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3AnimationInfo *arg1 = (irr::scene::SMD3AnimationInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3AnimationInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1headerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::c8 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->headerID, (const char *)arg2, 4-1);
      arg1->headerID[4-1] = 0;
    } else {
      arg1->headerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1headerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::c8 *)(irr::c8 *) ((arg1)->headerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1Version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1Version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->Version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1fileName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s8 *arg2 ;
  jbyte *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 68) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char**)&arg2, jarg2)) return ; 
  {
    size_t ii;
    irr::s8 *b = (irr::s8 *) arg1->fileName;
    for (ii = 0; ii < (size_t)68; ii++) b[ii] = *((irr::s8 *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char*)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jbyteArray JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1fileName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s8 *)(irr::s8 *) ((arg1)->fileName);
  jresult = SWIG_JavaArrayOutSchar(jenv, (signed char*)result, 68); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numFrames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numFrames = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numFrames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->numFrames);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numTags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numTags = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numTags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->numTags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numMeshes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numMeshes = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numMeshes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->numMeshes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numMaxSkins_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numMaxSkins = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1numMaxSkins_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->numMaxSkins);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1frameStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->frameStart = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1frameStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->frameStart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1tagStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->tagStart = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1tagStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->tagStart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1tagEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->tagEnd = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1tagEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->tagEnd);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1fileSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->fileSize = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3Header_1fileSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  result = (irr::s32) ((arg1)->fileSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3Header(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3Header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3Header *)new irr::scene::SMD3Header();
  *(irr::scene::SMD3Header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3Header(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_PACK_1STRUCT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*
  irr::scene::SMD3Header *arg1 = (irr::scene::SMD3Header *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Header **)&jarg1; 
  irr::scene::PACK_STRUCT = *arg1;
  */
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_PACK_1STRUCT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  /*irr::scene::SMD3Header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3Header *)&irr::scene::PACK_STRUCT;
  *(irr::scene::SMD3Header **)&jresult = result; 
  */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1meshID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::c8 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->meshID, (const char *)arg2, 4-1);
      arg1->meshID[4-1] = 0;
    } else {
      arg1->meshID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1meshID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::c8 *)(irr::c8 *) ((arg1)->meshID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1meshName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::c8 *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->meshName, (const char *)arg2, 68-1);
      arg1->meshName[68-1] = 0;
    } else {
      arg1->meshName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1meshName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::c8 *)(irr::c8 *) ((arg1)->meshName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numFrames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numFrames = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numFrames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->numFrames);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numShader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numShader = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numShader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->numShader);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numVertices_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numVertices_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->numVertices);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numTriangles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->numTriangles = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1numTriangles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->numTriangles);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1triangles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->offset_triangles = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1triangles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->offset_triangles);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1shaders_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->offset_shaders = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1shaders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->offset_shaders);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1st_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->offset_st = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1st_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->offset_st);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1vertexStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->vertexStart = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1vertexStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->vertexStart);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  if (arg1) (arg1)->offset_end = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshHeader_1offset_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  result = (irr::s32) ((arg1)->offset_end);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3MeshHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3MeshHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3MeshHeader *)new irr::scene::SMD3MeshHeader();
  *(irr::scene::SMD3MeshHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3MeshHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3MeshHeader *arg1 = (irr::scene::SMD3MeshHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3MeshHeader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Vertex_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  irr::scene::SMD3Vertex *arg1 = (irr::scene::SMD3Vertex *) 0 ;
  irr::s16 *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Vertex **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInShort(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    irr::s16 *b = (irr::s16 *) arg1->position;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((irr::s16 *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutShort(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_org_swig_jirr_JirrJNI_SMD3Vertex_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  irr::scene::SMD3Vertex *arg1 = (irr::scene::SMD3Vertex *) 0 ;
  irr::s16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Vertex **)&jarg1; 
  result = (irr::s16 *)(irr::s16 *) ((arg1)->position);
  jresult = SWIG_JavaArrayOutShort(jenv, result, 3); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Vertex_1normal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  irr::scene::SMD3Vertex *arg1 = (irr::scene::SMD3Vertex *) 0 ;
  irr::u8 *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Vertex **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    irr::u8 *b = (irr::u8 *) arg1->normal;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((irr::u8 *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_org_swig_jirr_JirrJNI_SMD3Vertex_1normal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  irr::scene::SMD3Vertex *arg1 = (irr::scene::SMD3Vertex *) 0 ;
  irr::u8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Vertex **)&jarg1; 
  result = (irr::u8 *)(irr::u8 *) ((arg1)->normal);
  jresult = SWIG_JavaArrayOutUchar(jenv, result, 2); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3Vertex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3Vertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3Vertex *)new irr::scene::SMD3Vertex();
  *(irr::scene::SMD3Vertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3Vertex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3Vertex *arg1 = (irr::scene::SMD3Vertex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3Vertex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3TexCoord_1u_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::SMD3TexCoord *arg1 = (irr::scene::SMD3TexCoord *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3TexCoord **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->u = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SMD3TexCoord_1u_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::SMD3TexCoord *arg1 = (irr::scene::SMD3TexCoord *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3TexCoord **)&jarg1; 
  result = (irr::f32) ((arg1)->u);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3TexCoord_1v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::scene::SMD3TexCoord *arg1 = (irr::scene::SMD3TexCoord *) 0 ;
  irr::f32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3TexCoord **)&jarg1; 
  arg2 = (irr::f32)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_SMD3TexCoord_1v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::scene::SMD3TexCoord *arg1 = (irr::scene::SMD3TexCoord *) 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3TexCoord **)&jarg1; 
  result = (irr::f32) ((arg1)->v);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3TexCoord(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3TexCoord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3TexCoord *)new irr::scene::SMD3TexCoord();
  *(irr::scene::SMD3TexCoord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3TexCoord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3TexCoord *arg1 = (irr::scene::SMD3TexCoord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3TexCoord **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Face_1Index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  irr::scene::SMD3Face *arg1 = (irr::scene::SMD3Face *) 0 ;
  irr::s32 *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Face **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    irr::s32 *b = (irr::s32 *) arg1->Index;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((irr::s32 *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_org_swig_jirr_JirrJNI_SMD3Face_1Index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  irr::scene::SMD3Face *arg1 = (irr::scene::SMD3Face *) 0 ;
  irr::s32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Face **)&jarg1; 
  result = (irr::s32 *)(irr::s32 *) ((arg1)->Index);
  jresult = SWIG_JavaArrayOutInt(jenv, result, 3); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3Face(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3Face *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3Face *)new irr::scene::SMD3Face();
  *(irr::scene::SMD3Face **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3Face(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3Face *arg1 = (irr::scene::SMD3Face *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3Face **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshBuffer_1MeshHeader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMD3MeshBuffer *arg1 = (irr::scene::SMD3MeshBuffer *) 0 ;
  irr::scene::SMD3MeshHeader *arg2 = (irr::scene::SMD3MeshHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3MeshBuffer **)&jarg1; 
  arg2 = *(irr::scene::SMD3MeshHeader **)&jarg2; 
  if (arg1) (arg1)->MeshHeader = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshBuffer_1MeshHeader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3MeshBuffer *arg1 = (irr::scene::SMD3MeshBuffer *) 0 ;
  irr::scene::SMD3MeshHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshBuffer **)&jarg1; 
  result = (irr::scene::SMD3MeshHeader *)& ((arg1)->MeshHeader);
  *(irr::scene::SMD3MeshHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshBuffer_1Shader_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMD3MeshBuffer *arg1 = (irr::scene::SMD3MeshBuffer *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshBuffer **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2; 
  if (arg1) (arg1)->Shader = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshBuffer_1Shader_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3MeshBuffer *arg1 = (irr::scene::SMD3MeshBuffer *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshBuffer **)&jarg1; 
  result = (irr::core::stringc *)& ((arg1)->Shader);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshBuffer_1Tex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMD3MeshBuffer *arg1 = (irr::scene::SMD3MeshBuffer *) 0 ;
  irr::core::array< irr::scene::SMD3TexCoord,irrAllocator< irr::scene::SMD3TexCoord > > *arg2 = (irr::core::array< irr::scene::SMD3TexCoord,irrAllocator< irr::scene::SMD3TexCoord > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshBuffer **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::SMD3TexCoord,irrAllocator< irr::scene::SMD3TexCoord > > **)&jarg2; 
  if (arg1) (arg1)->Tex = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3MeshBuffer_1Tex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3MeshBuffer *arg1 = (irr::scene::SMD3MeshBuffer *) 0 ;
  irr::core::array< irr::scene::SMD3TexCoord,irrAllocator< irr::scene::SMD3TexCoord > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3MeshBuffer **)&jarg1; 
  result = (irr::core::array< irr::scene::SMD3TexCoord,irrAllocator< irr::scene::SMD3TexCoord > > *)& ((arg1)->Tex);
  *(irr::core::array< irr::scene::SMD3TexCoord,irrAllocator< irr::scene::SMD3TexCoord > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3MeshBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3MeshBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3MeshBuffer *)new irr::scene::SMD3MeshBuffer();
  *(irr::scene::SMD3MeshBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3MeshBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3MeshBuffer *arg1 = (irr::scene::SMD3MeshBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3MeshBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3QuaternionTag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3QuaternionTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTag *arg1 = 0 ;
  irr::scene::SMD3QuaternionTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SMD3QuaternionTag const & reference is null");
    return 0;
  } 
  result = (irr::scene::SMD3QuaternionTag *)new irr::scene::SMD3QuaternionTag((irr::scene::SMD3QuaternionTag const &)*arg1);
  *(irr::scene::SMD3QuaternionTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3QuaternionTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::scene::SMD3QuaternionTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::stringc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  result = (irr::scene::SMD3QuaternionTag *)new irr::scene::SMD3QuaternionTag((irr::core::stringc const &)*arg1);
  *(irr::scene::SMD3QuaternionTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3QuaternionTag_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::SMD3QuaternionTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3df **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3df **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3df const & reference is null");
    return 0;
  } 
  result = (irr::scene::SMD3QuaternionTag *)new irr::scene::SMD3QuaternionTag((irr::core::vector3df const &)*arg1,(irr::core::vector3df const &)*arg2);
  *(irr::scene::SMD3QuaternionTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1setto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  arg2 = *(irr::core::matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::matrix4 & reference is null");
    return ;
  } 
  (arg1)->setto(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::scene::SMD3QuaternionTag *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  arg2 = *(irr::scene::SMD3QuaternionTag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SMD3QuaternionTag const & reference is null");
    return 0;
  } 
  result = (bool)((irr::scene::SMD3QuaternionTag const *)arg1)->operator ==((irr::scene::SMD3QuaternionTag const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::scene::SMD3QuaternionTag *arg2 = 0 ;
  irr::scene::SMD3QuaternionTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  arg2 = *(irr::scene::SMD3QuaternionTag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SMD3QuaternionTag const & reference is null");
    return 0;
  } 
  result = (irr::scene::SMD3QuaternionTag *) &(arg1)->operator =((irr::scene::SMD3QuaternionTag const &)*arg2);
  *(irr::scene::SMD3QuaternionTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2; 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  result = (irr::core::stringc *)& ((arg1)->Name);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::core::vector3df *arg2 = (irr::core::vector3df *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  arg2 = *(irr::core::vector3df **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  result = (irr::core::vector3df *)& ((arg1)->position);
  *(irr::core::vector3df **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1rotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::core::quaternion *arg2 = (irr::core::quaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  arg2 = *(irr::core::quaternion **)&jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTag_1rotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTag *arg1 = (irr::scene::SMD3QuaternionTag *) 0 ;
  irr::core::quaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTag **)&jarg1; 
  result = (irr::core::quaternion *)& ((arg1)->rotation);
  *(irr::core::quaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3QuaternionTagList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTagList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3QuaternionTagList *)new irr::scene::SMD3QuaternionTagList();
  *(irr::scene::SMD3QuaternionTagList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3QuaternionTagList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTagList *arg1 = 0 ;
  irr::scene::SMD3QuaternionTagList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTagList **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SMD3QuaternionTagList const & reference is null");
    return 0;
  } 
  result = (irr::scene::SMD3QuaternionTagList *)new irr::scene::SMD3QuaternionTagList((irr::scene::SMD3QuaternionTagList const &)*arg1);
  *(irr::scene::SMD3QuaternionTagList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3QuaternionTagList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3QuaternionTagList *arg1 = (irr::scene::SMD3QuaternionTagList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3QuaternionTagList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTagList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTagList *arg1 = (irr::scene::SMD3QuaternionTagList *) 0 ;
  irr::core::stringc *arg2 = 0 ;
  irr::scene::SMD3QuaternionTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTagList **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::stringc const & reference is null");
    return 0;
  } 
  result = (irr::scene::SMD3QuaternionTag *)(arg1)->get((irr::core::stringc const &)*arg2);
  *(irr::scene::SMD3QuaternionTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTagList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTagList *arg1 = (irr::scene::SMD3QuaternionTagList *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTagList **)&jarg1; 
  result = (irr::u32)((irr::scene::SMD3QuaternionTagList const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTagList_1set_1used(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMD3QuaternionTagList *arg1 = (irr::scene::SMD3QuaternionTagList *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3QuaternionTagList **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->set_used(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTagList_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMD3QuaternionTagList *arg1 = (irr::scene::SMD3QuaternionTagList *) 0 ;
  irr::scene::SMD3QuaternionTag *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3QuaternionTagList **)&jarg1; 
  arg2 = *(irr::scene::SMD3QuaternionTag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SMD3QuaternionTag const & reference is null");
    return ;
  } 
  (arg1)->push_back((irr::scene::SMD3QuaternionTag const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3QuaternionTagList_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::scene::SMD3QuaternionTagList *arg1 = (irr::scene::SMD3QuaternionTagList *) 0 ;
  irr::scene::SMD3QuaternionTagList *arg2 = 0 ;
  irr::scene::SMD3QuaternionTagList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3QuaternionTagList **)&jarg1; 
  arg2 = *(irr::scene::SMD3QuaternionTagList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::scene::SMD3QuaternionTagList const & reference is null");
    return 0;
  } 
  result = (irr::scene::SMD3QuaternionTagList *) &(arg1)->operator =((irr::scene::SMD3QuaternionTagList const &)*arg2);
  *(irr::scene::SMD3QuaternionTagList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SMD3Mesh(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::scene::SMD3Mesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::scene::SMD3Mesh *)new irr::scene::SMD3Mesh();
  *(irr::scene::SMD3Mesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SMD3Mesh(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  arg2 = *(irr::core::stringc **)&jarg2; 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::core::stringc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  result = (irr::core::stringc *)& ((arg1)->Name);
  *(irr::core::stringc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1Buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::core::array< irr::scene::SMD3MeshBuffer *,irrAllocator< irr::scene::SMD3MeshBuffer * > > *arg2 = (irr::core::array< irr::scene::SMD3MeshBuffer *,irrAllocator< irr::scene::SMD3MeshBuffer * > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::SMD3MeshBuffer *,irrAllocator< irr::scene::SMD3MeshBuffer * > > **)&jarg2; 
  if (arg1) (arg1)->Buffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1Buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::core::array< irr::scene::SMD3MeshBuffer *,irrAllocator< irr::scene::SMD3MeshBuffer * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  result = (irr::core::array< irr::scene::SMD3MeshBuffer *,irrAllocator< irr::scene::SMD3MeshBuffer * > > *)& ((arg1)->Buffer);
  *(irr::core::array< irr::scene::SMD3MeshBuffer *,irrAllocator< irr::scene::SMD3MeshBuffer * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1TagList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::scene::SMD3QuaternionTagList *arg2 = (irr::scene::SMD3QuaternionTagList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  arg2 = *(irr::scene::SMD3QuaternionTagList **)&jarg2; 
  if (arg1) (arg1)->TagList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1TagList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::scene::SMD3QuaternionTagList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  result = (irr::scene::SMD3QuaternionTagList *)& ((arg1)->TagList);
  *(irr::scene::SMD3QuaternionTagList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1MD3Header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::scene::SMD3Header *arg2 = (irr::scene::SMD3Header *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  arg2 = *(irr::scene::SMD3Header **)&jarg2; 
  if (arg1) (arg1)->MD3Header = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMD3Mesh_1MD3Header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::SMD3Mesh *arg1 = (irr::scene::SMD3Mesh *) 0 ;
  irr::scene::SMD3Header *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::SMD3Mesh **)&jarg1; 
  result = (irr::scene::SMD3Header *)& ((arg1)->MD3Header);
  *(irr::scene::SMD3Header **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD3_1setInterpolationShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshMD3 **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->setInterpolationShift(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD3_1getTagList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::SMD3QuaternionTagList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshMD3 **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  result = (irr::scene::SMD3QuaternionTagList *)(arg1)->getTagList(arg2,arg3,arg4,arg5);
  *(irr::scene::SMD3QuaternionTagList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD3_1getOriginalMesh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  irr::scene::SMD3Mesh *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::scene::IAnimatedMeshMD3 **)&jarg1; 
  result = (irr::scene::SMD3Mesh *)(arg1)->getOriginalMesh();
  *(irr::scene::SMD3Mesh **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IAnimatedMeshMD3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::scene::IAnimatedMeshMD3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SEventQueue_1OnEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::SEventQueue *arg1 = (irr::SEventQueue *) 0 ;
  irr::SEvent arg2 ;
  irr::SEvent *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::SEventQueue **)&jarg1; 
  argp2 = *(irr::SEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::SEvent");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->OnEvent(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SEventQueue_1getEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SEventQueue *arg1 = (irr::SEventQueue *) 0 ;
  irr::SEvent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEventQueue **)&jarg1; 
  result = (arg1)->getEvent();
  *(irr::SEvent **)&jresult = new irr::SEvent((const irr::SEvent &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SEventQueue_1hasEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SEventQueue *arg1 = (irr::SEventQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SEventQueue **)&jarg1; 
  result = (bool)(arg1)->hasEvent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SEventQueue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::SEventQueue *arg1 = (irr::SEventQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::SEventQueue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_createWchar(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (wchar_t *)irr::createWchar((char const *)arg1);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_instantiateAllDontExecMe(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  irr::instantiateAllDontExecMe();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_castToIGUIScrollBar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIScrollBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::gui::IGUIScrollBar *)irr::gui::castToIGUIScrollBar(arg1);
  *(irr::gui::IGUIScrollBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_castToIGUIContextMenu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::gui::IGUIContextMenu *)irr::gui::castToIGUIContextMenu(arg1);
  *(irr::gui::IGUIContextMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_castToIGUIFileOpenDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::gui::IGUIFileOpenDialog *)irr::gui::castToIGUIFileOpenDialog(arg1);
  *(irr::gui::IGUIFileOpenDialog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_castToIGUIComboBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIComboBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::gui::IGUIElement **)&jarg1; 
  result = (irr::gui::IGUIComboBox *)irr::gui::castToIGUIComboBox(arg1);
  *(irr::gui::IGUIComboBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_copySColorArrayToVoid(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::core::dimension2d< irr::s32 > arg2 ;
  void *arg3 = (void *) 0 ;
  jlong *jarr1 ;
  jsize sz1 ;
  irr::core::dimension2d< irr::s32 > *argp2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  {
    int i;
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    sz1 = jenv->GetArrayLength(jarg1);
    jarr1 = jenv->GetLongArrayElements(jarg1, 0);
    if (!jarr1) {
      return 0;
    }
    
    arg1 = new irr::video::SColor[sz1];
    
    
    
    if (!arg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return 0;
    }
    for (i=0; i<sz1; i++) {
      arg1[i] = **(irr::video::SColor **)&jarr1[i];
    }
  }
  argp2 = *(irr::core::dimension2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::s32 >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(void **)&jarg3; 
  result = (void *)irr::gui::copySColorArrayToVoid(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  {
    int i;
    for (i=0; i<sz1; i++) {
      jarr1[i] = 0;
      *(irr::video::SColor **)&jarr1[i] = &arg1[i];
    }
    jenv->ReleaseLongArrayElements(jarg1, jarr1, 0);
  }
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_copyInt32ArrayToVoid(JNIEnv *jenv, jclass jcls, jintArray jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  irr::core::dimension2d< irr::s32 > arg2 ;
  void *arg3 = (void *) 0 ;
  jint *jarr1 ;
  irr::core::dimension2d< irr::s32 > *argp2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if (!SWIG_JavaArrayInInt(jenv, &jarr1, &arg1, jarg1)) return 0; 
  argp2 = *(irr::core::dimension2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::s32 >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(void **)&jarg3; 
  result = (void *)irr::gui::copyInt32ArrayToVoid(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  SWIG_JavaArrayArgoutInt(jenv, jarr1, arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_copyU32ArrayToVoid(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  irr::core::dimension2d< irr::s32 > arg2 ;
  void *arg3 = (void *) 0 ;
  jlong *jarr1 ;
  irr::core::dimension2d< irr::s32 > *argp2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if (!SWIG_JavaArrayInUint(jenv, &jarr1, &arg1, jarg1)) return 0; 
  argp2 = *(irr::core::dimension2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::s32 >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(void **)&jarg3; 
  result = (void *)irr::gui::copyU32ArrayToVoid(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  SWIG_JavaArrayArgoutUint(jenv, jarr1, arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_swig_jirr_JirrJNI_castVoidToByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jbyteArray jresult = 0 ;
  void *arg1 = (void *) 0 ;
  irr::core::dimension2d< irr::s32 > arg2 ;
  irr::core::dimension2d< irr::s32 > *argp2 ;
  signed char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(void **)&jarg1; 
  argp2 = *(irr::core::dimension2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::s32 >");
    return 0;
  }
  arg2 = *argp2; 
  result = (signed char *)irr::gui::castVoidToByteArray(arg1,arg2);
  jresult = SWIG_JavaArrayOutSchar(jenv, result, arg2.Height*arg2.Width); 
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_swig_jirr_JirrJNI_castVoidToU32Array(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlongArray jresult = 0 ;
  void *arg1 = (void *) 0 ;
  irr::core::dimension2d< irr::s32 > arg2 ;
  irr::core::dimension2d< irr::s32 > *argp2 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(void **)&jarg1; 
  argp2 = *(irr::core::dimension2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::s32 >");
    return 0;
  }
  arg2 = *argp2; 
  result = (unsigned int *)irr::gui::castVoidToU32Array(arg1,arg2);
  jresult = SWIG_JavaArrayOutUint(jenv, result, arg2.Height*arg2.Width); 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_org_swig_jirr_JirrJNI_castVoidToInt32Array(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jintArray jresult = 0 ;
  void *arg1 = (void *) 0 ;
  irr::core::dimension2d< irr::s32 > arg2 ;
  irr::core::dimension2d< irr::s32 > *argp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(void **)&jarg1; 
  argp2 = *(irr::core::dimension2d< irr::s32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::dimension2d< irr::s32 >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int *)irr::gui::castVoidToInt32Array(arg1,arg2);
  jresult = SWIG_JavaArrayOutInt(jenv, result, arg2.Height*arg2.Width); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SIrrlichtCreationParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::SIrrlichtCreationParameters *)new irr::SIrrlichtCreationParameters();
  *(irr::SIrrlichtCreationParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1SIrrlichtCreationParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = 0 ;
  irr::SIrrlichtCreationParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SIrrlichtCreationParameters const & reference is null");
    return 0;
  } 
  result = (irr::SIrrlichtCreationParameters *)new irr::SIrrlichtCreationParameters((irr::SIrrlichtCreationParameters const &)*arg1);
  *(irr::SIrrlichtCreationParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::SIrrlichtCreationParameters *arg2 = 0 ;
  irr::SIrrlichtCreationParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = *(irr::SIrrlichtCreationParameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SIrrlichtCreationParameters const & reference is null");
    return 0;
  } 
  result = (irr::SIrrlichtCreationParameters *) &(arg1)->operator =((irr::SIrrlichtCreationParameters const &)*arg2);
  *(irr::SIrrlichtCreationParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DeviceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  E_DEVICE_TYPE arg2 ;
  E_DEVICE_TYPE *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  argp2 = *(E_DEVICE_TYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null E_DEVICE_TYPE");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DeviceType = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DeviceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  E_DEVICE_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result =  ((arg1)->DeviceType);
  *(E_DEVICE_TYPE **)&jresult = new E_DEVICE_TYPE((const E_DEVICE_TYPE &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DriverType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::video::E_DRIVER_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = (irr::video::E_DRIVER_TYPE)jarg2; 
  if (arg1) (arg1)->DriverType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DriverType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::video::E_DRIVER_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::video::E_DRIVER_TYPE) ((arg1)->DriverType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1WindowSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = (irr::core::dimension2d< irr::u32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2; 
  if (arg1) (arg1)->WindowSize = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1WindowSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::core::dimension2d< irr::u32 > *)& ((arg1)->WindowSize);
  *(irr::core::dimension2d< irr::u32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Bits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->Bits = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Bits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::u8) ((arg1)->Bits);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1ZBufferBits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->ZBufferBits = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1ZBufferBits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::u8) ((arg1)->ZBufferBits);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Fullscreen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Fullscreen = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Fullscreen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->Fullscreen);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Stencilbuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Stencilbuffer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Stencilbuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->Stencilbuffer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Vsync_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Vsync = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Vsync_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->Vsync);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1AntiAlias_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = (irr::u8)jarg2; 
  if (arg1) (arg1)->AntiAlias = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1AntiAlias_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::u8) ((arg1)->AntiAlias);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1HandleSRGB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HandleSRGB = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1HandleSRGB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->HandleSRGB);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1WithAlphaChannel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WithAlphaChannel = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1WithAlphaChannel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->WithAlphaChannel);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Doublebuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Doublebuffer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Doublebuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->Doublebuffer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1IgnoreInput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IgnoreInput = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1IgnoreInput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->IgnoreInput);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Stereobuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Stereobuffer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1Stereobuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->Stereobuffer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1HighPrecisionFPU_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HighPrecisionFPU = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1HighPrecisionFPU_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->HighPrecisionFPU);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1EventReceiver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::IEventReceiver *arg2 = (irr::IEventReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = *(irr::IEventReceiver **)&jarg2; 
  if (arg1) (arg1)->EventReceiver = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1EventReceiver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::IEventReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::IEventReceiver *) ((arg1)->EventReceiver);
  *(irr::IEventReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1WindowId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong arg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  if (arg1) (arg1)->WindowId = (void*)arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1WindowId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  jresult = (long)((arg1)->WindowId);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1LoggingLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::ELOG_LEVEL arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = (irr::ELOG_LEVEL)jarg2; 
  if (arg1) (arg1)->LoggingLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1LoggingLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::ELOG_LEVEL result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::ELOG_LEVEL) ((arg1)->LoggingLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DisplayAdapter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  if (arg1) (arg1)->DisplayAdapter = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DisplayAdapter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::u32) ((arg1)->DisplayAdapter);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DriverMultithreaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DriverMultithreaded = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1DriverMultithreaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->DriverMultithreaded);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1UsePerformanceTimer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UsePerformanceTimer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1UsePerformanceTimer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (bool) ((arg1)->UsePerformanceTimer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_SIrrlichtCreationParameters_1SDK_1version_1do_1not_1use_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  irr::c8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  result = (irr::c8 *)(irr::c8 *) ((arg1)->SDK_version_do_not_use);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1SIrrlichtCreationParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::SIrrlichtCreationParameters *arg1 = (irr::SIrrlichtCreationParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShaderConstantSetCallBack_1OnSetMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IShaderConstantSetCallBack *arg1 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IShaderConstantSetCallBack **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  (arg1)->OnSetMaterial((irr::video::SMaterial const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShaderConstantSetCallBack_1OnSetMaterialSwigExplicitIShaderConstantSetCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::video::IShaderConstantSetCallBack *arg1 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IShaderConstantSetCallBack **)&jarg1; 
  arg2 = *(irr::video::SMaterial **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::SMaterial const & reference is null");
    return ;
  } 
  (arg1)->irr::video::IShaderConstantSetCallBack::OnSetMaterial((irr::video::SMaterial const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShaderConstantSetCallBack_1OnSetConstants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  irr::video::IShaderConstantSetCallBack *arg1 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::IMaterialRendererServices *arg2 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::video::IShaderConstantSetCallBack **)&jarg1; 
  arg2 = *(irr::video::IMaterialRendererServices **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->OnSetConstants(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IShaderConstantSetCallBack(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::video::IShaderConstantSetCallBack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::video::IShaderConstantSetCallBack *)new SwigDirector_IShaderConstantSetCallBack(jenv);
  *(irr::video::IShaderConstantSetCallBack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IShaderConstantSetCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::video::IShaderConstantSetCallBack *arg1 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::video::IShaderConstantSetCallBack **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShaderConstantSetCallBack_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  irr::video::IShaderConstantSetCallBack *obj = *((irr::video::IShaderConstantSetCallBack **)&objarg);
  (void)jcls;
  SwigDirector_IShaderConstantSetCallBack *director = dynamic_cast<SwigDirector_IShaderConstantSetCallBack *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IShaderConstantSetCallBack_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  irr::video::IShaderConstantSetCallBack *obj = *((irr::video::IShaderConstantSetCallBack **)&objarg);
  SwigDirector_IShaderConstantSetCallBack *director = dynamic_cast<SwigDirector_IShaderConstantSetCallBack *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_createDevice(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  irr::video::E_DRIVER_TYPE arg1 = (irr::video::E_DRIVER_TYPE) irr::video::EDT_SOFTWARE ;
  irr::core::dimension2d< irr::u32 > const &arg2_defvalue = (irr::core::dimension2d< irr::u32 >(640,480)) ;
  irr::core::dimension2d< irr::u32 > *arg2 = (irr::core::dimension2d< irr::u32 > *) &arg2_defvalue ;
  irr::u32 arg3 = (irr::u32) 16 ;
  bool arg4 = (bool) false ;
  bool arg5 = (bool) false ;
  bool arg6 = (bool) false ;
  irr::IEventReceiver *arg7 = (irr::IEventReceiver *) 0 ;
  irr::IrrlichtDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  arg1 = (irr::video::E_DRIVER_TYPE)jarg1; 
  arg2 = *(irr::core::dimension2d< irr::u32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< irr::u32 > const & reference is null");
    return 0;
  } 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(irr::IEventReceiver **)&jarg7; 
  result = (irr::IrrlichtDevice *)irr::createDevice(arg1,(irr::core::dimension2d< unsigned int > const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(irr::IrrlichtDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_createDeviceEx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::SIrrlichtCreationParameters *arg1 = 0 ;
  irr::IrrlichtDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::SIrrlichtCreationParameters **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::SIrrlichtCreationParameters const & reference is null");
    return 0;
  } 
  result = (irr::IrrlichtDevice *)irr::createDeviceEx((irr::SIrrlichtCreationParameters const &)*arg1);
  *(irr::IrrlichtDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >();
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >(arg1,arg2);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2df_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >(arg1);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2df_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< float > *arg1 = 0 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >((irr::core::vector2d< float > const &)*arg1);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2df_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< float > *arg1 = 0 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >((irr::core::dimension2d< float > const &)*arg1);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1subtractOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -();
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator =((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator =((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1addOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator +((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1addOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator +((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignPlusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator +=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1addOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator +(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignPlusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator +=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignPlusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator +=((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1subtractOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1subtractOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignMinusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator -=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1subtractOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignMinusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator -=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignMinusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator -=((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1timesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator *((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignTimesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator *=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1timesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator *(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignTimesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator *=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1dividedOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator /((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignDivideOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator /=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1dividedOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator /(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1assignDivideOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator /=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1lessThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator <=((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1moreThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator >=((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator <((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1moreThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator >((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator ==((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator !=((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->equals((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (irr::core::vector2d< float > *) &(arg1)->set(arg2,arg3);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->set((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getLength();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getLengthSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getLengthSQ();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->dotProduct((irr::core::vector2d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getDistanceFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getDistanceFrom((irr::core::vector2d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getDistanceFromSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getDistanceFromSQ((irr::core::vector2d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1rotateBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->rotateBy(arg2,(irr::core::vector2d< float > const &)*arg3);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1rotateBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->rotateBy(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (irr::core::vector2d< float > *) &(arg1)->normalize();
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getAngleTrig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< f32 > const *)arg1)->getAngleTrig();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< f32 > const *)arg1)->getAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getAngleWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::f64)((irr::core::vector2d< f32 > const *)arg1)->getAngleWith((irr::core::vector2d< float > const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1isBetweenPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->isBetweenPoints((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f64)jarg3; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->getInterpolated((irr::core::vector2d< float > const &)*arg2,arg3);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1getInterpolated_1quadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3,arg4);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = (irr::core::vector2d< float > *) &(arg1)->interpolate((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3,arg4);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float) ((arg1)->X);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector2df_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float) ((arg1)->Y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1vector2df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2di_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >();
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2di_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >(arg1,arg2);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2di_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >(arg1);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2di_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >((irr::core::vector2d< int > const &)*arg1);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector2di_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< int > *arg1 = 0 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >((irr::core::dimension2d< int > const &)*arg1);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1subtractOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -();
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator =((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator =((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1addOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator +((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1addOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator +((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignPlusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator +=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1addOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator +(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignPlusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator +=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignPlusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator +=((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1subtractOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1subtractOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignMinusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator -=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1subtractOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignMinusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator -=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignMinusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator -=((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1timesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator *((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignTimesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator *=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1timesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator *(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignTimesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator *=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1dividedOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator /((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignDivideOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator /=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1dividedOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator /(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1assignDivideOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator /=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1lessThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator <=((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1moreThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator >=((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator <((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1moreThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator >((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator ==((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator !=((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->equals((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (irr::core::vector2d< int > *) &(arg1)->set(arg2,arg3);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->set((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getLengthSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getLengthSQ();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->dotProduct((irr::core::vector2d< int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getDistanceFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getDistanceFrom((irr::core::vector2d< int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getDistanceFromSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getDistanceFromSQ((irr::core::vector2d< int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1rotateBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->rotateBy(arg2,(irr::core::vector2d< int > const &)*arg3);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1rotateBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->rotateBy(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (irr::core::vector2d< int > *) &(arg1)->normalize();
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getAngleTrig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< s32 > const *)arg1)->getAngleTrig();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< s32 > const *)arg1)->getAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getAngleWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::f64)((irr::core::vector2d< s32 > const *)arg1)->getAngleWith((irr::core::vector2d< int > const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1isBetweenPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->isBetweenPoints((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f64)jarg3; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->getInterpolated((irr::core::vector2d< int > const &)*arg2,arg3);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1getInterpolated_1quadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3,arg4);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = (irr::core::vector2d< int > *) &(arg1)->interpolate((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3,arg4);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int) ((arg1)->X);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector2di_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int) ((arg1)->Y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1vector2di(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector3df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::vector3d< f32 > *)new irr::core::vector3d< f32 >();
  *(irr::core::vector3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector3df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  irr::core::vector3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (irr::core::vector3d< f32 > *)new irr::core::vector3d< f32 >(arg1,arg2,arg3);
  *(irr::core::vector3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector3df_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  irr::core::vector3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (irr::core::vector3d< f32 > *)new irr::core::vector3d< f32 >(arg1);
  *(irr::core::vector3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector3df_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector3d< f32 > *)new irr::core::vector3d< f32 >((irr::core::vector3d< float > const &)*arg1);
  *(irr::core::vector3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1subtractOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator -();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector3d< float > *) &(arg1)->operator =((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1addOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator +((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignPlusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector3d< float > *) &(arg1)->operator +=((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1addOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator +(arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignPlusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector3d< float > *) &(arg1)->operator +=(arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1subtractOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator -((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignMinusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector3d< float > *) &(arg1)->operator -=((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1subtractOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator -(arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignMinusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector3d< float > *) &(arg1)->operator -=(arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1timesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator *((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignTimesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector3d< float > *) &(arg1)->operator *=((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1timesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator *(arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignTimesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector3d< float > *) &(arg1)->operator *=(arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1dividedOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator /((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignDivideOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector3d< float > *) &(arg1)->operator /=((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1dividedOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->operator /(arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1assignDivideOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector3d< float > *) &(arg1)->operator /=(arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1lessThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->operator <=((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1moreThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->operator >=((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->operator <((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1moreThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->operator >((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->operator ==((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->operator !=((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->equals((irr::core::vector3d< float > const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->equals((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (irr::core::vector3d< float > *) &(arg1)->set(arg2,arg3,arg4);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector3d< float > *) &(arg1)->set((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = (float)((irr::core::vector3d< f32 > const *)arg1)->getLength();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getLengthSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = (float)((irr::core::vector3d< f32 > const *)arg1)->getLengthSQ();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector3d< f32 > const *)arg1)->dotProduct((irr::core::vector3d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getDistanceFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector3d< f32 > const *)arg1)->getDistanceFrom((irr::core::vector3d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getDistanceFromSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector3d< f32 > const *)arg1)->getDistanceFromSQ((irr::core::vector3d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1crossProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector3d< f32 > const *)arg1)->crossProduct((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1isBetweenPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector3d< f32 > const *)arg1)->isBetweenPoints((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *) &(arg1)->normalize();
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1setLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector3d< float > *) &(arg1)->setLength(arg2);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1invert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *) &(arg1)->invert();
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotateXZBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->rotateXZBy(arg2,(irr::core::vector3d< float > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotateXZBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::f64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  (arg1)->rotateXZBy(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotateXYBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->rotateXYBy(arg2,(irr::core::vector3d< float > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotateXYBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::f64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  (arg1)->rotateXYBy(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotateYZBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->rotateYZBy(arg2,(irr::core::vector3d< float > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotateYZBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::f64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  (arg1)->rotateYZBy(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f64)jarg3; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->getInterpolated((irr::core::vector3d< float > const &)*arg2,arg3);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getInterpolated_1quadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,arg4);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = (irr::core::vector3d< float > *) &(arg1)->interpolate((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,arg4);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getHorizontalAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->getHorizontalAngle();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getSphericalCoordinateAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->getSphericalCoordinateAngles();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotationToDirection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector3d< f32 > const *)arg1)->rotationToDirection((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1rotationToDirection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = ((irr::core::vector3d< f32 > const *)arg1)->rotationToDirection();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getAs4Values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  ((irr::core::vector3d< f32 > const *)arg1)->getAs4Values(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1getAs3Values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  ((irr::core::vector3d< f32 > const *)arg1)->getAs3Values(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = (float) ((arg1)->X);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = (float) ((arg1)->Y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1Z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_vector3df_1Z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  result = (float) ((arg1)->Z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1vector3df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::vector3d< f32 > *arg1 = (irr::core::vector3d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::vector3d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1plane3df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::plane3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::plane3d< f32 > *)new irr::core::plane3d< f32 >();
  *(irr::core::plane3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1plane3df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::plane3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::plane3d< f32 > *)new irr::core::plane3d< f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2);
  *(irr::core::plane3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1plane3df_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  irr::core::plane3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (irr::core::plane3d< f32 > *)new irr::core::plane3d< f32 >(arg1,arg2,arg3,arg4,arg5,arg6);
  *(irr::core::plane3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1plane3df_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::plane3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector3d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::plane3d< f32 > *)new irr::core::plane3d< f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
  *(irr::core::plane3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1plane3df_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  float arg2 ;
  irr::core::plane3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (irr::core::plane3d< f32 > *)new irr::core::plane3d< f32 >((irr::core::vector3d< float > const &)*arg1,arg2);
  *(irr::core::plane3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::plane3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->operator ==((irr::core::plane3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::plane3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->operator !=((irr::core::plane3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1setPlane_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->setPlane((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1setPlane_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->setPlane((irr::core::vector3d< float > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1setPlane_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->setPlane((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,(irr::core::vector3d< float > const &)*arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1getIntersectionWithLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->getIntersectionWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1getKnownIntersectionWithLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jfloat jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::f32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::f32)((irr::core::plane3d< f32 > const *)arg1)->getKnownIntersectionWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1getIntersectionWithLimitedLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->getIntersectionWithLimitedLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1classifyPointRelation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::EIntersectionRelation3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::EIntersectionRelation3D)((irr::core::plane3d< f32 > const *)arg1)->classifyPointRelation((irr::core::vector3d< float > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1recalculateD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->recalculateD((irr::core::vector3d< float > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1getMemberPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  result = ((irr::core::plane3d< f32 > const *)arg1)->getMemberPoint();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1existsIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::plane3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->existsIntersection((irr::core::plane3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1getIntersectionWithPlane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::plane3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->getIntersectionWithPlane((irr::core::plane3d< float > const &)*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1getIntersectionWithPlanes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  irr::core::plane3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::plane3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::plane3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3d< float > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->getIntersectionWithPlanes((irr::core::plane3d< float > const &)*arg2,(irr::core::plane3d< float > const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1isFrontFacing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::plane3d< f32 > const *)arg1)->isFrontFacing((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1getDistanceTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::plane3d< f32 > const *)arg1)->getDistanceTo((irr::core::vector3d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1Normal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->Normal = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1Normal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->Normal);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1D_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->D = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_plane3df_1D_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  result = (float) ((arg1)->D);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1plane3df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::plane3d< f32 > *arg1 = (irr::core::plane3d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::plane3d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1line3df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::line3d< f32 > *)new irr::core::line3d< f32 >();
  *(irr::core::line3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1line3df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  irr::core::line3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (irr::core::line3d< f32 > *)new irr::core::line3d< f32 >(arg1,arg2,arg3,arg4,arg5,arg6);
  *(irr::core::line3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1line3df_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::line3d< f32 > *)new irr::core::line3d< f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2);
  *(irr::core::line3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1addOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::line3d< f32 > const *)arg1)->operator +((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::line3d< float > **)&jresult = new irr::core::line3d< float >((const irr::core::line3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1assignPlusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::line3d< float > *) &(arg1)->operator +=((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::line3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1subtractOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::line3d< f32 > const *)arg1)->operator -((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::line3d< float > **)&jresult = new irr::core::line3d< float >((const irr::core::line3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1assignMinusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::line3d< float > *) &(arg1)->operator -=((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::line3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_line3df_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::line3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::line3d< f32 > const *)arg1)->operator ==((irr::core::line3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_line3df_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::line3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::line3d< f32 > const *)arg1)->operator !=((irr::core::line3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_line3df_1setLine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  float temp2 ;
  float temp3 ;
  float temp4 ;
  float temp5 ;
  float temp6 ;
  float temp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  temp5 = (float)jarg5; 
  arg5 = &temp5; 
  temp6 = (float)jarg6; 
  arg6 = &temp6; 
  temp7 = (float)jarg7; 
  arg7 = &temp7; 
  (arg1)->setLine((float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,(float const &)*arg6,(float const &)*arg7);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_line3df_1setLine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->setLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_line3df_1setLine_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::line3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< float > const & reference is null");
    return ;
  } 
  (arg1)->setLine((irr::core::line3d< float > const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_line3df_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  result = (float)((irr::core::line3d< f32 > const *)arg1)->getLength();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_line3df_1getLengthSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  result = (float)((irr::core::line3d< f32 > const *)arg1)->getLengthSQ();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1getMiddle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  result = ((irr::core::line3d< f32 > const *)arg1)->getMiddle();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1getVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  result = ((irr::core::line3d< f32 > const *)arg1)->getVector();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_line3df_1isPointBetweenStartAndEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::line3d< f32 > const *)arg1)->isPointBetweenStartAndEnd((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1getClosestPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::line3d< f32 > const *)arg1)->getClosestPoint((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_line3df_1getIntersectionWithSphere(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > arg2 ;
  float arg3 ;
  irr::f64 *arg4 = 0 ;
  irr::core::vector3d< float > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  argp2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector3d< float >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = *(irr::f64 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::f64 & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::line3d< f32 > const *)arg1)->getIntersectionWithSphere(arg2,arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_line3df_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->start);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_line3df_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->end = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_line3df_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->end);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1line3df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::line3d< f32 > *arg1 = (irr::core::line3d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::line3d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1aabbox3df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::aabbox3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::aabbox3d< f32 > *)new irr::core::aabbox3d< f32 >();
  *(irr::core::aabbox3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1aabbox3df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::aabbox3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector3d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::aabbox3d< f32 > *)new irr::core::aabbox3d< f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2);
  *(irr::core::aabbox3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1aabbox3df_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::aabbox3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector3d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::aabbox3d< f32 > *)new irr::core::aabbox3d< f32 >((irr::core::vector3d< float > const &)*arg1);
  *(irr::core::aabbox3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1aabbox3df_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  irr::core::aabbox3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (irr::core::aabbox3d< f32 > *)new irr::core::aabbox3d< f32 >(arg1,arg2,arg3,arg4,arg5,arg6);
  *(irr::core::aabbox3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->operator ==((irr::core::aabbox3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->operator !=((irr::core::aabbox3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->reset(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return ;
  } 
  (arg1)->reset((irr::core::aabbox3d< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1reset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->reset((irr::core::vector3d< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1addInternalPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->addInternalPoint((irr::core::vector3d< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1addInternalBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return ;
  } 
  (arg1)->addInternalBox((irr::core::aabbox3d< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1addInternalPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->addInternalPoint(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  result = ((irr::core::aabbox3d< f32 > const *)arg1)->getCenter();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1getExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  result = ((irr::core::aabbox3d< f32 > const *)arg1)->getExtent();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1getVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  result = (float)((irr::core::aabbox3d< f32 > const *)arg1)->getVolume();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  result = (float)((irr::core::aabbox3d< f32 > const *)arg1)->getArea();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1getEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  ((irr::core::aabbox3d< f32 > const *)arg1)->getEdges(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1repair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  (arg1)->repair();
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::aabbox3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = ((irr::core::aabbox3d< f32 > const *)arg1)->getInterpolated((irr::core::aabbox3d< float > const &)*arg2,arg3);
  *(irr::core::aabbox3d< float > **)&jresult = new irr::core::aabbox3d< float >((const irr::core::aabbox3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1isPointInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->isPointInside((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1isPointTotalInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->isPointTotalInside((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1isFullInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->isFullInside((irr::core::aabbox3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1intersectsWithBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->intersectsWithBox((irr::core::aabbox3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1intersectsWithLine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::line3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->intersectsWithLine((irr::core::line3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1intersectsWithLine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jboolean jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)((irr::core::aabbox3d< f32 > const *)arg1)->intersectsWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1classifyPlaneRelation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  irr::core::EIntersectionRelation3D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::plane3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::plane3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::EIntersectionRelation3D)((irr::core::aabbox3d< f32 > const *)arg1)->classifyPlaneRelation((irr::core::plane3d< float > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1MinEdge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->MinEdge = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1MinEdge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->MinEdge);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1MaxEdge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->MaxEdge = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_aabbox3df_1MaxEdge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->MaxEdge);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1aabbox3df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::aabbox3d< f32 > *arg1 = (irr::core::aabbox3d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::aabbox3d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector3dfarray_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::array< vector3df > *)new irr::core::array< vector3df >();
  *(irr::core::array< vector3df > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector3dfarray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::core::array< vector3df > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::core::array< vector3df > *)new irr::core::array< vector3df >(arg1);
  *(irr::core::array< vector3df > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1vector3dfarray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > *arg1 = 0 ;
  irr::core::array< vector3df > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< vector3df > *)new irr::core::array< vector3df >((irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const &)*arg1);
  *(irr::core::array< vector3df > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1vector3dfarray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1reallocate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->reallocate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1reallocate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->reallocate(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1setAllocStrategy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  eAllocStrategy arg2 ;
  eAllocStrategy *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  argp2 = *(eAllocStrategy **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null eAllocStrategy");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAllocStrategy(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1setAllocStrategy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  (arg1)->setAllocStrategy();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->push_back((irr::core::vector3d< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->push_front((irr::core::vector3d< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg3 = (irr::u32)jarg3; 
  (arg1)->insert((irr::core::vector3d< float > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->insert((irr::core::vector3d< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1set_1pointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1set_1pointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1set_1pointer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->set_pointer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1set_1free_1when_1destroyed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_free_when_destroyed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1set_1used(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->set_used(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > *arg2 = 0 ;
  irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > *) &(arg1)->operator =((irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const &)*arg2);
  *(irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< vector3df > const *)arg1)->operator ==((irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< vector3df > const *)arg1)->operator !=((irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  result = (irr::core::vector3d< float > *) &(arg1)->getLast();
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1getLastConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  result = (irr::core::vector3d< float > *) &((irr::core::array< vector3df > const *)arg1)->getLast();
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  result = (irr::core::vector3d< float > *)(arg1)->pointer();
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1const_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  result = (irr::core::vector3d< float > *)((irr::core::array< vector3df > const *)arg1)->const_pointer();
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  result = (irr::u32)((irr::core::array< vector3df > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1allocated_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  result = (irr::u32)((irr::core::array< vector3df > const *)arg1)->allocated_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  result = (bool)((irr::core::array< vector3df > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1binary_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->binary_search((irr::core::vector3d< float > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1binary_1search_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::s32)((irr::core::array< vector3df > const *)arg1)->binary_search((irr::core::vector3d< float > const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1binary_1search_1multi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::s32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->binary_search_multi((irr::core::vector3d< float > const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1linear_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::s32)((irr::core::array< vector3df > const *)arg1)->linear_search((irr::core::vector3d< float > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1linear_1reverse_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (irr::s32)((irr::core::array< vector3df > const *)arg1)->linear_reverse_search((irr::core::vector3d< float > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1set_1sorted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_sorted(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_vector3dfarray_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< vector3df > *arg1 = (irr::core::array< vector3df > *) 0 ;
  irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< vector3df > **)&jarg1; 
  arg2 = *(irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::core::vector3d< float >,irrAllocator< irr::core::vector3d< float > > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1dimension2df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::dimension2d< f32 > *)new irr::core::dimension2d< f32 >();
  *(irr::core::dimension2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1dimension2df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  irr::core::dimension2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (irr::core::dimension2d< f32 > *)new irr::core::dimension2d< f32 >((float const &)*arg1,(float const &)*arg2);
  *(irr::core::dimension2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1dimension2df_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< float > *arg1 = 0 ;
  irr::core::dimension2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::dimension2d< f32 > *)new irr::core::dimension2d< f32 >((irr::core::vector2d< float > const &)*arg1);
  *(irr::core::dimension2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1equalsOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< f32 > const *)arg1)->operator ==((irr::core::dimension2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1notEqualsOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< f32 > const *)arg1)->operator !=((irr::core::dimension2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1equalsOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< f32 > const *)arg1)->operator ==((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1notEqualsOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< f32 > const *)arg1)->operator !=((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = (irr::core::dimension2d< float > *) &(arg1)->set((float const &)*arg2,(float const &)*arg3);
  *(irr::core::dimension2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1assignDivideOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (irr::core::dimension2d< float > *) &(arg1)->operator /=((float const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1dividedOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->operator /((float const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1assignTimesOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (irr::core::dimension2d< float > *) &(arg1)->operator *=((float const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1timesOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->operator *((float const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1assignPlusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::dimension2d< float > *) &(arg1)->operator +=((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1addOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->operator +((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1assignMinusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::dimension2d< float > *) &(arg1)->operator -=((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1subtractOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->operator -((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  result = (float)((irr::core::dimension2d< f32 > const *)arg1)->getArea();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1getOptimalSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::u32 arg5 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::u32)jarg5; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4,arg5);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1getOptimalSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1getOptimalSize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->getOptimalSize(arg2,arg3);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1getOptimalSize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  bool arg2 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->getOptimalSize(arg2);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1getOptimalSize_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->getOptimalSize();
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::dimension2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = ((irr::core::dimension2d< f32 > const *)arg1)->getInterpolated((irr::core::dimension2d< float > const &)*arg2,arg3);
  *(irr::core::dimension2d< float > **)&jresult = new irr::core::dimension2d< float >((const irr::core::dimension2d< float > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1Width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1Width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  result = (float) ((arg1)->Width);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1Height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_dimension2df_1Height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  result = (float) ((arg1)->Height);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1dimension2df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::dimension2d< f32 > *arg1 = (irr::core::dimension2d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::dimension2d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1dimension2di_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::dimension2d< s32 > *)new irr::core::dimension2d< s32 >();
  *(irr::core::dimension2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1dimension2di_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  int temp1 ;
  int temp2 ;
  irr::core::dimension2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (irr::core::dimension2d< s32 > *)new irr::core::dimension2d< s32 >((int const &)*arg1,(int const &)*arg2);
  *(irr::core::dimension2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1dimension2di_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  irr::core::dimension2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::dimension2d< s32 > *)new irr::core::dimension2d< s32 >((irr::core::vector2d< int > const &)*arg1);
  *(irr::core::dimension2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1equalsOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< s32 > const *)arg1)->operator ==((irr::core::dimension2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1notEqualsOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< s32 > const *)arg1)->operator !=((irr::core::dimension2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1equalsOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< s32 > const *)arg1)->operator ==((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1notEqualsOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::dimension2d< s32 > const *)arg1)->operator !=((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (irr::core::dimension2d< int > *) &(arg1)->set((int const &)*arg2,(int const &)*arg3);
  *(irr::core::dimension2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1assignDivideOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (irr::core::dimension2d< int > *) &(arg1)->operator /=((int const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1dividedOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->operator /((int const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1assignTimesOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (irr::core::dimension2d< int > *) &(arg1)->operator *=((int const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1timesOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->operator *((int const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1assignPlusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::dimension2d< int > *) &(arg1)->operator +=((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1addOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->operator +((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1assignMinusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::dimension2d< int > *) &(arg1)->operator -=((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1subtractOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->operator -((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  result = (int)((irr::core::dimension2d< s32 > const *)arg1)->getArea();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1getOptimalSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::u32 arg5 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (irr::u32)jarg5; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4,arg5);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1getOptimalSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1getOptimalSize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->getOptimalSize(arg2,arg3);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1getOptimalSize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  bool arg2 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->getOptimalSize(arg2);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1getOptimalSize_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->getOptimalSize();
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f32)jarg3; 
  result = ((irr::core::dimension2d< s32 > const *)arg1)->getInterpolated((irr::core::dimension2d< int > const &)*arg2,arg3);
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1Width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1Width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  result = (int) ((arg1)->Width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1Height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_dimension2di_1Height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  result = (int) ((arg1)->Height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1dimension2di(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::dimension2d< s32 > *arg1 = (irr::core::dimension2d< s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::dimension2d< s32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1triangle3df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::triangle3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::triangle3d< f32 > *)new irr::core::triangle3d< f32 >();
  *(irr::core::triangle3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1triangle3df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::vector3d< float > arg1 ;
  irr::core::vector3d< float > arg2 ;
  irr::core::vector3d< float > arg3 ;
  irr::core::vector3d< float > *argp1 ;
  irr::core::vector3d< float > *argp2 ;
  irr::core::vector3d< float > *argp3 ;
  irr::core::triangle3d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(irr::core::vector3d< float > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector3d< float >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector3d< float >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(irr::core::vector3d< float > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null irr::core::vector3d< float >");
    return 0;
  }
  arg3 = *argp3; 
  result = (irr::core::triangle3d< f32 > *)new irr::core::triangle3d< f32 >(arg1,arg2,arg3);
  *(irr::core::triangle3d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::triangle3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::triangle3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->operator ==((irr::core::triangle3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::triangle3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::triangle3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::triangle3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->operator !=((irr::core::triangle3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1isTotalInsideBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->isTotalInsideBox((irr::core::aabbox3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1isTotalOutsideBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::aabbox3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::aabbox3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->isTotalOutsideBox((irr::core::aabbox3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1closestPointOnTriangle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::triangle3d< f32 > const *)arg1)->closestPointOnTriangle((irr::core::vector3d< float > const &)*arg2);
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1isPointInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->isPointInside((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1isPointInsideFast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->isPointInsideFast((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1getIntersectionWithLimitedLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::line3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::line3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->getIntersectionWithLimitedLine((irr::core::line3d< float > const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1getIntersectionWithLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->getIntersectionWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1getIntersectionOfPlaneWithLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->getIntersectionOfPlaneWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1getNormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  result = ((irr::core::triangle3d< f32 > const *)arg1)->getNormal();
  *(irr::core::vector3d< float > **)&jresult = new irr::core::vector3d< float >((const irr::core::vector3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1isFrontFacing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::triangle3d< f32 > const *)arg1)->isFrontFacing((irr::core::vector3d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1getPlane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::plane3d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  result = ((irr::core::triangle3d< f32 > const *)arg1)->getPlane();
  *(irr::core::plane3d< float > **)&jresult = new irr::core::plane3d< float >((const irr::core::plane3d< float > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  result = (float)((irr::core::triangle3d< f32 > const *)arg1)->getArea();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg3 = *(irr::core::vector3d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  arg4 = *(irr::core::vector3d< float > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector3d< float > const & reference is null");
    return ;
  } 
  (arg1)->set((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,(irr::core::vector3d< float > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1pointA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->pointA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1pointA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->pointA);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1pointB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->pointB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1pointB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->pointB);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1pointC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector3d< float > **)&jarg2; 
  if (arg1) (arg1)->pointC = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_triangle3df_1pointC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  result = (irr::core::vector3d< float > *)& ((arg1)->pointC);
  *(irr::core::vector3d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1triangle3df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::triangle3d< f32 > *arg1 = (irr::core::triangle3d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::triangle3d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2df_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >();
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2df_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >(arg1,arg2);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2df_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >(arg1);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2df_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< float > *arg1 = 0 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >((irr::core::vector2d< float > const &)*arg1);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2df_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< float > *arg1 = 0 ;
  irr::core::vector2d< f32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< f32 > *)new irr::core::vector2d< f32 >((irr::core::dimension2d< float > const &)*arg1);
  *(irr::core::vector2d< f32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1subtractOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -();
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator =((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator =((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1addOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator +((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1addOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator +((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignPlusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator +=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1addOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator +(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignPlusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator +=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignPlusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator +=((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1subtractOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1subtractOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignMinusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator -=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1subtractOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator -(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignMinusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator -=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignMinusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator -=((irr::core::dimension2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1timesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator *((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignTimesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator *=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1timesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator *(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignTimesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator *=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1dividedOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator /((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignDivideOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->operator /=((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1dividedOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->operator /(arg2);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1assignDivideOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->operator /=(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1lessThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator <=((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1moreThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator >=((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator <((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1moreThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator >((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator ==((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->operator !=((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->equals((irr::core::vector2d< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (irr::core::vector2d< float > *) &(arg1)->set(arg2,arg3);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->set((irr::core::vector2d< float > const &)*arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getLength();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getLengthSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getLengthSQ();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_position2df_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->dotProduct((irr::core::vector2d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getDistanceFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getDistanceFrom((irr::core::vector2d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getDistanceFromSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (float)((irr::core::vector2d< f32 > const *)arg1)->getDistanceFromSQ((irr::core::vector2d< float > const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1rotateBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< float > *) &(arg1)->rotateBy(arg2,(irr::core::vector2d< float > const &)*arg3);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1rotateBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  result = (irr::core::vector2d< float > *) &(arg1)->rotateBy(arg2);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (irr::core::vector2d< float > *) &(arg1)->normalize();
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getAngleTrig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< f32 > const *)arg1)->getAngleTrig();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< f32 > const *)arg1)->getAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getAngleWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (irr::f64)((irr::core::vector2d< f32 > const *)arg1)->getAngleWith((irr::core::vector2d< float > const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2df_1isBetweenPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< f32 > const *)arg1)->isBetweenPoints((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f64)jarg3; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->getInterpolated((irr::core::vector2d< float > const &)*arg2,arg3);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1getInterpolated_1quadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< float > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = ((irr::core::vector2d< f32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3,arg4);
  *(irr::core::vector2d< float > **)&jresult = new irr::core::vector2d< float >((const irr::core::vector2d< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2df_1interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< float > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = (irr::core::vector2d< float > *) &(arg1)->interpolate((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3,arg4);
  *(irr::core::vector2d< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_position2df_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_position2df_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float) ((arg1)->X);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_position2df_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_position2df_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  result = (float) ((arg1)->Y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1position2df(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::vector2d< f32 > *arg1 = (irr::core::vector2d< f32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::vector2d< f32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2di_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >();
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2di_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >(arg1,arg2);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2di_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >(arg1);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2di_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >((irr::core::vector2d< int > const &)*arg1);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1position2di_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::dimension2d< int > *arg1 = 0 ;
  irr::core::vector2d< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::dimension2d< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< s32 > *)new irr::core::vector2d< s32 >((irr::core::dimension2d< int > const &)*arg1);
  *(irr::core::vector2d< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1subtractOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -();
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator =((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator =((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1addOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator +((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1addOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator +((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignPlusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator +=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1addOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator +(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignPlusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator +=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignPlusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator +=((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1subtractOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1subtractOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignMinusOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator -=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1subtractOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator -(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignMinusOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator -=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignMinusOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::dimension2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::dimension2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator -=((irr::core::dimension2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1timesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator *((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignTimesOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator *=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1timesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator *(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignTimesOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator *=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1dividedOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator /((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignDivideOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->operator /=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1dividedOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->operator /(arg2);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1assignDivideOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->operator /=(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1lessThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator <=((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1moreThanOrEqualOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator >=((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator <((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1moreThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator >((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator ==((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->operator !=((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->equals((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (irr::core::vector2d< int > *) &(arg1)->set(arg2,arg3);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->set((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getLengthSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getLengthSQ();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_position2di_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->dotProduct((irr::core::vector2d< int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getDistanceFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getDistanceFrom((irr::core::vector2d< int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getDistanceFromSQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (int)((irr::core::vector2d< s32 > const *)arg1)->getDistanceFromSQ((irr::core::vector2d< int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1rotateBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::vector2d< int > *) &(arg1)->rotateBy(arg2,(irr::core::vector2d< int > const &)*arg3);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1rotateBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (irr::f64)jarg2; 
  result = (irr::core::vector2d< int > *) &(arg1)->rotateBy(arg2);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (irr::core::vector2d< int > *) &(arg1)->normalize();
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getAngleTrig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< s32 > const *)arg1)->getAngleTrig();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (irr::f64)((irr::core::vector2d< s32 > const *)arg1)->getAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getAngleWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::f64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::f64)((irr::core::vector2d< s32 > const *)arg1)->getAngleWith((irr::core::vector2d< int > const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_position2di_1isBetweenPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::vector2d< s32 > const *)arg1)->isBetweenPoints((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getInterpolated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = (irr::f64)jarg3; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->getInterpolated((irr::core::vector2d< int > const &)*arg2,arg3);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1getInterpolated_1quadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = ((irr::core::vector2d< s32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3,arg4);
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_position2di_1interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg3 = *(irr::core::vector2d< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg4 = (irr::f64)jarg4; 
  result = (irr::core::vector2d< int > *) &(arg1)->interpolate((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3,arg4);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_position2di_1X_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_position2di_1X_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int) ((arg1)->X);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_position2di_1Y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_position2di_1Y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  result = (int) ((arg1)->Y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1position2di(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::vector2d< s32 > *arg1 = (irr::core::vector2d< s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::vector2d< s32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1recti_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::rect< s32 > *)new irr::core::rect< s32 >();
  *(irr::core::rect< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1recti_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  irr::core::rect< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (irr::core::rect< s32 > *)new irr::core::rect< s32 >(arg1,arg2,arg3,arg4);
  *(irr::core::rect< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1recti_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< s32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::vector2d< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::rect< s32 > *)new irr::core::rect< s32 >((irr::core::vector2d< int > const &)*arg1,(irr::core::vector2d< int > const &)*arg2);
  *(irr::core::rect< s32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1addOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::rect< s32 > const *)arg1)->operator +((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::rect< int > **)&jresult = new irr::core::rect< int >((const irr::core::rect< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1assignPlusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::rect< int > *) &(arg1)->operator +=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::rect< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1subtractOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = ((irr::core::rect< s32 > const *)arg1)->operator -((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::rect< int > **)&jresult = new irr::core::rect< int >((const irr::core::rect< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1assignMinusOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (irr::core::rect< int > *) &(arg1)->operator -=((irr::core::vector2d< int > const &)*arg2);
  *(irr::core::rect< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_recti_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::rect< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::rect< s32 > const *)arg1)->operator ==((irr::core::rect< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_recti_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::rect< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::rect< s32 > const *)arg1)->operator !=((irr::core::rect< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_recti_1lessThanOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::rect< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::rect< s32 > const *)arg1)->operator <((irr::core::rect< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_recti_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = (int)((irr::core::rect< s32 > const *)arg1)->getArea();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_recti_1isPointInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::rect< s32 > const *)arg1)->isPointInside((irr::core::vector2d< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_recti_1isRectCollided(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::rect< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< int > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::rect< s32 > const *)arg1)->isRectCollided((irr::core::rect< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_recti_1clipAgainst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::rect< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< int > const & reference is null");
    return ;
  } 
  (arg1)->clipAgainst((irr::core::rect< int > const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_recti_1constrainTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::rect< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::rect< int > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->constrainTo((irr::core::rect< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_recti_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = (int)((irr::core::rect< s32 > const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_recti_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = (int)((irr::core::rect< s32 > const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_recti_1repair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  (arg1)->repair();
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_recti_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = (bool)((irr::core::rect< s32 > const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = ((irr::core::rect< s32 > const *)arg1)->getCenter();
  *(irr::core::vector2d< int > **)&jresult = new irr::core::vector2d< int >((const irr::core::vector2d< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::dimension2d< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = ((irr::core::rect< s32 > const *)arg1)->getSize();
  *(irr::core::dimension2d< int > **)&jresult = new irr::core::dimension2d< int >((const irr::core::dimension2d< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_recti_1addInternalPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::vector2d< int > const & reference is null");
    return ;
  } 
  (arg1)->addInternalPoint((irr::core::vector2d< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_recti_1addInternalPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addInternalPoint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_recti_1UpperLeftCorner_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = (irr::core::vector2d< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2; 
  if (arg1) (arg1)->UpperLeftCorner = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1UpperLeftCorner_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = (irr::core::vector2d< int > *)& ((arg1)->UpperLeftCorner);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_recti_1LowerRightCorner_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = (irr::core::vector2d< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = *(irr::core::vector2d< int > **)&jarg2; 
  if (arg1) (arg1)->LowerRightCorner = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_recti_1LowerRightCorner_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  result = (irr::core::vector2d< int > *)& ((arg1)->LowerRightCorner);
  *(irr::core::vector2d< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_recti_1setRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  arg2 = (irr::s32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  arg5 = (irr::s32)jarg5; 
  irr_core_rect_Sl_s32_Sg__setRect(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1recti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::rect< s32 > *arg1 = (irr::core::rect< s32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::rect< s32 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ITextureArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::array< irr::video::ITexture * > *)new irr::core::array< irr::video::ITexture * >();
  *(irr::core::array< irr::video::ITexture * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ITextureArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::core::array< irr::video::ITexture * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::core::array< irr::video::ITexture * > *)new irr::core::array< irr::video::ITexture * >(arg1);
  *(irr::core::array< irr::video::ITexture * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1ITextureArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *arg1 = 0 ;
  irr::core::array< irr::video::ITexture * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< irr::video::ITexture * > *)new irr::core::array< irr::video::ITexture * >((irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const &)*arg1);
  *(irr::core::array< irr::video::ITexture * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1ITextureArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1reallocate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->reallocate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1reallocate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->reallocate(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1setAllocStrategy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  eAllocStrategy arg2 ;
  eAllocStrategy *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  argp2 = *(eAllocStrategy **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null eAllocStrategy");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAllocStrategy(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1setAllocStrategy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  (arg1)->setAllocStrategy();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  (arg1)->push_back((irr::video::ITexture *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  (arg1)->push_front((irr::video::ITexture *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->insert((irr::video::ITexture *const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  (arg1)->insert((irr::video::ITexture *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1set_1pointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = (irr::video::ITexture **) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = *(irr::video::ITexture ***)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1set_1pointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = (irr::video::ITexture **) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = *(irr::video::ITexture ***)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1set_1pointer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = (irr::video::ITexture **) 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = *(irr::video::ITexture ***)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->set_pointer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1set_1free_1when_1destroyed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_free_when_destroyed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1set_1used(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->set_used(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *) &(arg1)->operator =((irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const &)*arg2);
  *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< irr::video::ITexture * > const *)arg1)->operator ==((irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< irr::video::ITexture * > const *)arg1)->operator !=((irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  result = (irr::video::ITexture **) &(arg1)->getLast();
  *(irr::video::ITexture **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1getLastConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  result = (irr::video::ITexture **) &((irr::core::array< irr::video::ITexture * > const *)arg1)->getLast();
  *(irr::video::ITexture **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  result = (irr::video::ITexture **)(arg1)->pointer();
  *(irr::video::ITexture ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1const_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  result = (irr::video::ITexture **)((irr::core::array< irr::video::ITexture * > const *)arg1)->const_pointer();
  *(irr::video::ITexture ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  result = (irr::u32)((irr::core::array< irr::video::ITexture * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1allocated_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  result = (irr::u32)((irr::core::array< irr::video::ITexture * > const *)arg1)->allocated_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  result = (bool)((irr::core::array< irr::video::ITexture * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1binary_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  result = (irr::s32)(arg1)->binary_search((irr::video::ITexture *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1binary_1search_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::s32)((irr::core::array< irr::video::ITexture * > const *)arg1)->binary_search((irr::video::ITexture *const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1binary_1search_1multi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  arg3 = *(irr::s32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->binary_search_multi((irr::video::ITexture *const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1linear_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  result = (irr::s32)((irr::core::array< irr::video::ITexture * > const *)arg1)->linear_search((irr::video::ITexture *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1linear_1reverse_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::video::ITexture **)&jarg2; 
  result = (irr::s32)((irr::core::array< irr::video::ITexture * > const *)arg1)->linear_reverse_search((irr::video::ITexture *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1set_1sorted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_sorted(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_ITextureArray_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::ITexture * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::ITexture *,irrAllocator< irr::video::ITexture * > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IMeshArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::array< irr::scene::IMesh * > *)new irr::core::array< irr::scene::IMesh * >();
  *(irr::core::array< irr::scene::IMesh * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IMeshArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::core::array< irr::scene::IMesh * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::core::array< irr::scene::IMesh * > *)new irr::core::array< irr::scene::IMesh * >(arg1);
  *(irr::core::array< irr::scene::IMesh * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1IMeshArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *arg1 = 0 ;
  irr::core::array< irr::scene::IMesh * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< irr::scene::IMesh * > *)new irr::core::array< irr::scene::IMesh * >((irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const &)*arg1);
  *(irr::core::array< irr::scene::IMesh * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IMeshArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1reallocate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->reallocate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1reallocate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->reallocate(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1setAllocStrategy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  eAllocStrategy arg2 ;
  eAllocStrategy *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  argp2 = *(eAllocStrategy **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null eAllocStrategy");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAllocStrategy(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1setAllocStrategy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  (arg1)->setAllocStrategy();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  (arg1)->push_back((irr::scene::IMesh *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  (arg1)->push_front((irr::scene::IMesh *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->insert((irr::scene::IMesh *const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  (arg1)->insert((irr::scene::IMesh *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1set_1pointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = (irr::scene::IMesh **) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = *(irr::scene::IMesh ***)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1set_1pointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = (irr::scene::IMesh **) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = *(irr::scene::IMesh ***)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1set_1pointer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = (irr::scene::IMesh **) 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = *(irr::scene::IMesh ***)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->set_pointer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1set_1free_1when_1destroyed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_free_when_destroyed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1set_1used(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->set_used(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *arg2 = 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *) &(arg1)->operator =((irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const &)*arg2);
  *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< irr::scene::IMesh * > const *)arg1)->operator ==((irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< irr::scene::IMesh * > const *)arg1)->operator !=((irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  result = (irr::scene::IMesh **) &(arg1)->getLast();
  *(irr::scene::IMesh **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1getLastConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  result = (irr::scene::IMesh **) &((irr::core::array< irr::scene::IMesh * > const *)arg1)->getLast();
  *(irr::scene::IMesh **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  result = (irr::scene::IMesh **)(arg1)->pointer();
  *(irr::scene::IMesh ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1const_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  result = (irr::scene::IMesh **)((irr::core::array< irr::scene::IMesh * > const *)arg1)->const_pointer();
  *(irr::scene::IMesh ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  result = (irr::u32)((irr::core::array< irr::scene::IMesh * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1allocated_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  result = (irr::u32)((irr::core::array< irr::scene::IMesh * > const *)arg1)->allocated_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  result = (bool)((irr::core::array< irr::scene::IMesh * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1binary_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  result = (irr::s32)(arg1)->binary_search((irr::scene::IMesh *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1binary_1search_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::s32)((irr::core::array< irr::scene::IMesh * > const *)arg1)->binary_search((irr::scene::IMesh *const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1binary_1search_1multi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  arg3 = *(irr::s32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->binary_search_multi((irr::scene::IMesh *const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1linear_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  result = (irr::s32)((irr::core::array< irr::scene::IMesh * > const *)arg1)->linear_search((irr::scene::IMesh *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1linear_1reverse_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::scene::IMesh **arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::scene::IMesh **)&jarg2; 
  result = (irr::s32)((irr::core::array< irr::scene::IMesh * > const *)arg1)->linear_reverse_search((irr::scene::IMesh *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1set_1sorted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_sorted(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_IMeshArray_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::scene::IMesh * > *arg1 = (irr::core::array< irr::scene::IMesh * > *) 0 ;
  irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::scene::IMesh * > **)&jarg1; 
  arg2 = *(irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::scene::IMesh *,irrAllocator< irr::scene::IMesh * > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexCoreArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::array< irr::video::S3DVertex > *)new irr::core::array< irr::video::S3DVertex >();
  *(irr::core::array< irr::video::S3DVertex > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexCoreArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::core::array< irr::video::S3DVertex > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::core::array< irr::video::S3DVertex > *)new irr::core::array< irr::video::S3DVertex >(arg1);
  *(irr::core::array< irr::video::S3DVertex > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1S3DVertexCoreArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > *arg1 = 0 ;
  irr::core::array< irr::video::S3DVertex > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< irr::video::S3DVertex > *)new irr::core::array< irr::video::S3DVertex >((irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const &)*arg1);
  *(irr::core::array< irr::video::S3DVertex > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1S3DVertexCoreArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1reallocate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->reallocate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1reallocate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->reallocate(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1setAllocStrategy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  eAllocStrategy arg2 ;
  eAllocStrategy *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  argp2 = *(eAllocStrategy **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null eAllocStrategy");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAllocStrategy(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1setAllocStrategy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  (arg1)->setAllocStrategy();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return ;
  } 
  (arg1)->push_back((irr::video::S3DVertex const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return ;
  } 
  (arg1)->push_front((irr::video::S3DVertex const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return ;
  } 
  arg3 = (irr::u32)jarg3; 
  (arg1)->insert((irr::video::S3DVertex const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return ;
  } 
  (arg1)->insert((irr::video::S3DVertex const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1set_1pointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = (irr::video::S3DVertex *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  jlong *jarr2 ;
  jsize sz2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertex[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertex **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4,arg5);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertex **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1set_1pointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3, jboolean jarg4) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = (irr::video::S3DVertex *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  jlong *jarr2 ;
  jsize sz2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertex[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertex **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertex **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1set_1pointer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlong jarg3) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = (irr::video::S3DVertex *) 0 ;
  irr::u32 arg3 ;
  jlong *jarr2 ;
  jsize sz2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  {
    int i;
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return ;
    }
    sz2 = jenv->GetArrayLength(jarg2);
    jarr2 = jenv->GetLongArrayElements(jarg2, 0);
    if (!jarr2) {
      return ;
    }
    
    arg2 = new irr::video::S3DVertex[sz2];
    
    
    
    if (!arg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
      return ;
    }
    for (i=0; i<sz2; i++) {
      arg2[i] = **(irr::video::S3DVertex **)&jarr2[i];
    }
  }
  arg3 = (irr::u32)jarg3; 
  (arg1)->set_pointer(arg2,arg3);
  {
    int i;
    for (i=0; i<sz2; i++) {
      jarr2[i] = 0;
      *(irr::video::S3DVertex **)&jarr2[i] = &arg2[i];
    }
    jenv->ReleaseLongArrayElements(jarg2, jarr2, 0);
  }
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1set_1free_1when_1destroyed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_free_when_destroyed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1set_1used(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->set_used(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > *arg2 = 0 ;
  irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > *) &(arg1)->operator =((irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const &)*arg2);
  *(irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< irr::video::S3DVertex > const *)arg1)->operator ==((irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< irr::video::S3DVertex > const *)arg1)->operator !=((irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  result = (irr::video::S3DVertex *) &(arg1)->getLast();
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1getLastConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  result = (irr::video::S3DVertex *) &((irr::core::array< irr::video::S3DVertex > const *)arg1)->getLast();
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  result = (irr::video::S3DVertex *)(arg1)->pointer();
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1const_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlongArray jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  result = (irr::video::S3DVertex *)((irr::core::array< irr::video::S3DVertex > const *)arg1)->const_pointer();
  *(irr::video::S3DVertex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  result = (irr::u32)((irr::core::array< irr::video::S3DVertex > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1allocated_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  result = (irr::u32)((irr::core::array< irr::video::S3DVertex > const *)arg1)->allocated_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  result = (bool)((irr::core::array< irr::video::S3DVertex > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1binary_1search_1multi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return 0;
  } 
  arg3 = *(irr::s32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->binary_search_multi((irr::video::S3DVertex const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1linear_1reverse_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::video::S3DVertex **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::video::S3DVertex const & reference is null");
    return 0;
  } 
  result = (irr::s32)((irr::core::array< irr::video::S3DVertex > const *)arg1)->linear_reverse_search((irr::video::S3DVertex const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1set_1sorted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_sorted(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexCoreArray_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< irr::video::S3DVertex > *arg1 = (irr::core::array< irr::video::S3DVertex > *) 0 ;
  irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< irr::video::S3DVertex > **)&jarg1; 
  arg2 = *(irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< irr::video::S3DVertex,irrAllocator< irr::video::S3DVertex > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1u16Array_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  irr::core::array< u16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (irr::core::array< u16 > *)new irr::core::array< u16 >();
  *(irr::core::array< u16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1u16Array_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  irr::u32 arg1 ;
  irr::core::array< u16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (irr::u32)jarg1; 
  result = (irr::core::array< u16 > *)new irr::core::array< u16 >(arg1);
  *(irr::core::array< u16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_new_1u16Array_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< unsigned short,irrAllocator< unsigned short > > *arg1 = 0 ;
  irr::core::array< u16 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< unsigned short,irrAllocator< unsigned short > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< unsigned short,irrAllocator< unsigned short > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< u16 > *)new irr::core::array< u16 >((irr::core::array< unsigned short,irrAllocator< unsigned short > > const &)*arg1);
  *(irr::core::array< u16 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1u16Array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1reallocate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->reallocate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1reallocate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->reallocate(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1setAllocStrategy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  eAllocStrategy arg2 ;
  eAllocStrategy *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  argp2 = *(eAllocStrategy **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null eAllocStrategy");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAllocStrategy(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1setAllocStrategy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  (arg1)->setAllocStrategy();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_front((unsigned short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  irr::u32 arg3 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->insert((unsigned short const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->insert((unsigned short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1set_1pointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1set_1pointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->set_pointer(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1set_1pointer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  irr::u32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = *(unsigned short **)&jarg2; 
  arg3 = (irr::u32)jarg3; 
  (arg1)->set_pointer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1set_1free_1when_1destroyed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_free_when_destroyed(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1set_1used(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->set_used(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1assignOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::core::array< unsigned short,irrAllocator< unsigned short > > *arg2 = 0 ;
  irr::core::array< unsigned short,irrAllocator< unsigned short > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = *(irr::core::array< unsigned short,irrAllocator< unsigned short > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< unsigned short,irrAllocator< unsigned short > > const & reference is null");
    return 0;
  } 
  result = (irr::core::array< unsigned short,irrAllocator< unsigned short > > *) &(arg1)->operator =((irr::core::array< unsigned short,irrAllocator< unsigned short > > const &)*arg2);
  *(irr::core::array< unsigned short,irrAllocator< unsigned short > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1equalsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::core::array< unsigned short,irrAllocator< unsigned short > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = *(irr::core::array< unsigned short,irrAllocator< unsigned short > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< unsigned short,irrAllocator< unsigned short > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< u16 > const *)arg1)->operator ==((irr::core::array< unsigned short,irrAllocator< unsigned short > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1notEqualsOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::core::array< unsigned short,irrAllocator< unsigned short > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = *(irr::core::array< unsigned short,irrAllocator< unsigned short > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< unsigned short,irrAllocator< unsigned short > > const & reference is null");
    return 0;
  } 
  result = (bool)((irr::core::array< u16 > const *)arg1)->operator !=((irr::core::array< unsigned short,irrAllocator< unsigned short > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  result = (unsigned short *) &(arg1)->getLast();
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1getLastConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  result = (unsigned short *) &((irr::core::array< u16 > const *)arg1)->getLast();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  result = (unsigned short *)(arg1)->pointer();
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1const_1pointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  result = (unsigned short *)((irr::core::array< u16 > const *)arg1)->const_pointer();
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  result = (irr::u32)((irr::core::array< u16 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1allocated_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::u32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  result = (irr::u32)((irr::core::array< u16 > const *)arg1)->allocated_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  result = (bool)((irr::core::array< u16 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1binary_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (irr::s32)(arg1)->binary_search((unsigned short const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1binary_1search_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  unsigned short temp2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  arg3 = (irr::s32)jarg3; 
  arg4 = (irr::s32)jarg4; 
  result = (irr::s32)((irr::core::array< u16 > const *)arg1)->binary_search((unsigned short const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1binary_1search_1multi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  irr::s32 *arg3 = 0 ;
  unsigned short temp2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  arg3 = *(irr::s32 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::s32 & reference is null");
    return 0;
  } 
  result = (irr::s32)(arg1)->binary_search_multi((unsigned short const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1linear_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (irr::s32)((irr::core::array< u16 > const *)arg1)->linear_search((unsigned short const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1linear_1reverse_1search(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  irr::s32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (irr::s32)((irr::core::array< u16 > const *)arg1)->linear_reverse_search((unsigned short const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::u32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = (irr::u32)jarg2; 
  arg3 = (irr::s32)jarg3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1set_1sorted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_sorted(arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_u16Array_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  irr::core::array< u16 > *arg1 = (irr::core::array< u16 > *) 0 ;
  irr::core::array< unsigned short,irrAllocator< unsigned short > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(irr::core::array< u16 > **)&jarg1; 
  arg2 = *(irr::core::array< unsigned short,irrAllocator< unsigned short > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "irr::core::array< unsigned short,irrAllocator< unsigned short > > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_delete_1IXMLReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
 SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
/*	irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  delete arg1;
  */
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (bool)(arg1)->read();
  jresult = (jboolean)result; 
  */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getNodeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  irr::io::EXML_NODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (irr::io::EXML_NODE)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getNodeType();
  jresult = (jint)result; */
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (unsigned int)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeCount();
  jresult = (jlong)result; */
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  int arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (wchar_t *)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeName(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }*/
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  int arg2 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (wchar_t *)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeValue(arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }*/
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  /*
  irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (wchar_t *)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeValue((wchar_t const *)arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeValueSafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (wchar_t *)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeValueSafe((wchar_t const *)arg2);
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }
  */
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeValueAsInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*
  irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (int)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeValueAsInt((wchar_t const *)arg2);
  jresult = (jint)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }*/
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeValueAsInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeValueAsInt(arg2);
  jresult = (jint)result; */
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeValueAsFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  {
    arg2 = 0;
    if (jarg2) {
      arg2 = (wchar_t *)jenv->GetStringChars(jarg2, 0);
      if (!arg2) return 0;
    }
  }
  result = (float)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeValueAsFloat((wchar_t const *)arg2);
  jresult = (jfloat)result; 
  {
    if (arg2) jenv->ReleaseStringChars(jarg2, (const jchar *) arg2); 
  }*/
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getAttributeValueAsFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getAttributeValueAsFloat(arg2);
  jresult = (jfloat)result; */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getNodeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (wchar_t *)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getNodeName();
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }*/
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getNodeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (wchar_t *)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getNodeData();
  {
    if(result) jresult = jenv->NewString((const jchar *) result, wstrlen (result)); 
  }*/
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1isEmptyElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (bool)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->isEmptyElement();
  jresult = (jboolean)result; 
  */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getSourceFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  /*irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  irr::io::ETEXT_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (irr::io::ETEXT_FORMAT)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getSourceFormat();
  jresult = (jint)result; */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_swig_jirr_JirrJNI_IXMLReader_1getParserFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
/*  irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *arg1 = (irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > *) 0 ;
  irr::io::ETEXT_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > **)&jarg1; 
  result = (irr::io::ETEXT_FORMAT)((irr::io::IIrrXMLReader< wchar_t,irr::IUnknown > const *)arg1)->getParserFormat();
  jresult = (jint)result; 
  */
  SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Not implemented in JNI");
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertex2TCoords_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::video::S3DVertex **)&baseptr = *(irr::video::S3DVertex2TCoords **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_S3DVertexTangents_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::video::S3DVertex **)&baseptr = *(irr::video::S3DVertexTangents **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMesh_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::IMesh **)&baseptr = *(irr::scene::IAnimatedMesh **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD2_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::IAnimatedMesh **)&baseptr = *(irr::scene::IAnimatedMeshMD2 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::io::IAttributeExchangingObject **)&baseptr = *(irr::scene::ISceneNodeAnimator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::io::IAttributeExchangingObject **)&baseptr = *(irr::scene::ISceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMeshSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::IMeshSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IShadowVolumeSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::IShadowVolumeSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::IAnimatedMeshSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ICameraSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::ICameraSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IDummyTransformationSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::IDummyTransformationSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::io::IAttributeExchangingObject **)&baseptr = *(irr::gui::IGUIElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIButton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIButton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUICheckBox_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUICheckBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIContextMenu_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIContextMenu **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIEditBox_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIEditBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIWindow_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIWindow **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUISkin_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::io::IAttributeExchangingObject **)&baseptr = *(irr::gui::IGUISkin **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIFileOpenDialog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIFileOpenDialog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIImage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIImage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIInOutFader_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIInOutFader **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIListBox_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIListBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIMeshViewer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIMeshViewer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIScrollBar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIScrollBar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIStaticText_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIStaticText **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITab_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUITab **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUITabControl_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUITabControl **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIComboBox_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIComboBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIToolBar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIToolBar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIColorSelectDialog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIElement **)&baseptr = *(irr::gui::IGUIColorSelectDialog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IGUIFontBitmap_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::gui::IGUIFont **)&baseptr = *(irr::gui::IGUIFontBitmap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ILightSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::ILightSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IMetaTriangleSelector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ITriangleSelector **)&baseptr = *(irr::scene::IMetaTriangleSelector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ISceneNodeAnimatorCollisionResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNodeAnimator **)&baseptr = *(irr::scene::ISceneNodeAnimatorCollisionResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleEmitter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::io::IAttributeExchangingObject **)&baseptr = *(irr::scene::IParticleEmitter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleAffector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::io::IAttributeExchangingObject **)&baseptr = *(irr::scene::IParticleAffector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IParticleSystemSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::IParticleSystemSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITerrainSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::ITerrainSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_ITextSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::ITextSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IBillboardSceneNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::ISceneNode **)&baseptr = *(irr::scene::IBillboardSceneNode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SAnimatedMesh_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::IAnimatedMesh **)&baseptr = *(irr::scene::SAnimatedMesh **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SMesh_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::IMesh **)&baseptr = *(irr::scene::SMesh **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_IAnimatedMeshMD3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::scene::IAnimatedMesh **)&baseptr = *(irr::scene::IAnimatedMeshMD3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_swig_jirr_JirrJNI_SEventQueue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(irr::IEventReceiver **)&baseptr = *(irr::SEventQueue **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_swig_jirr_JirrJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[43] = {
    {
      "SwigDirector_IEventReceiver_OnEvent", "(Lorg/swig/jirr/IEventReceiver;J)Z" 
    },
    {
      "SwigDirector_ISceneNode_serializeAttributes__SWIG_0", "(Lorg/swig/jirr/ISceneNode;JJ)V" 
    },
    {
      "SwigDirector_ISceneNode_serializeAttributes__SWIG_1", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_deserializeAttributes__SWIG_0", "(Lorg/swig/jirr/ISceneNode;JJ)V" 
    },
    {
      "SwigDirector_ISceneNode_deserializeAttributes__SWIG_1", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_OnRegisterSceneNode", "(Lorg/swig/jirr/ISceneNode;)V" 
    },
    {
      "SwigDirector_ISceneNode_OnAnimate", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_render", "(Lorg/swig/jirr/ISceneNode;)V" 
    },
    {
      "SwigDirector_ISceneNode_getBoundingBoxConst", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_getTransformedBoundingBox", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_getAbsoluteTransformation", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_getRelativeTransformation", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_isVisible", "(Lorg/swig/jirr/ISceneNode;)Z" 
    },
    {
      "SwigDirector_ISceneNode_isTrulyVisible", "(Lorg/swig/jirr/ISceneNode;)Z" 
    },
    {
      "SwigDirector_ISceneNode_setVisible", "(Lorg/swig/jirr/ISceneNode;Z)V" 
    },
    {
      "SwigDirector_ISceneNode_getID", "(Lorg/swig/jirr/ISceneNode;)I" 
    },
    {
      "SwigDirector_ISceneNode_setID", "(Lorg/swig/jirr/ISceneNode;I)V" 
    },
    {
      "SwigDirector_ISceneNode_addChild", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_removeChild", "(Lorg/swig/jirr/ISceneNode;J)Z" 
    },
    {
      "SwigDirector_ISceneNode_removeAll", "(Lorg/swig/jirr/ISceneNode;)V" 
    },
    {
      "SwigDirector_ISceneNode_remove", "(Lorg/swig/jirr/ISceneNode;)V" 
    },
    {
      "SwigDirector_ISceneNode_addAnimator", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_removeAnimator", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_removeAnimators", "(Lorg/swig/jirr/ISceneNode;)V" 
    },
    {
      "SwigDirector_ISceneNode_getMaterialCount", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_getScale", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_setScale", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_getRotation", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_setRotation", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_getPosition", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_setPosition", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_getAbsolutePosition", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_setDebugDataVisible", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_setParent", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_setTriangleSelector", "(Lorg/swig/jirr/ISceneNode;J)V" 
    },
    {
      "SwigDirector_ISceneNode_updateAbsolutePosition", "(Lorg/swig/jirr/ISceneNode;)V" 
    },
    {
      "SwigDirector_ISceneNode_getType", "(Lorg/swig/jirr/ISceneNode;)I" 
    },
    {
      "SwigDirector_ISceneNode_clone__SWIG_0", "(Lorg/swig/jirr/ISceneNode;JJ)J" 
    },
    {
      "SwigDirector_ISceneNode_clone__SWIG_1", "(Lorg/swig/jirr/ISceneNode;J)J" 
    },
    {
      "SwigDirector_ISceneNode_clone__SWIG_2", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_ISceneNode_getSceneManager", "(Lorg/swig/jirr/ISceneNode;)J" 
    },
    {
      "SwigDirector_IShaderConstantSetCallBack_OnSetMaterial", "(Lorg/swig/jirr/IShaderConstantSetCallBack;J)V" 
    },
    {
      "SwigDirector_IShaderConstantSetCallBack_OnSetConstants", "(Lorg/swig/jirr/IShaderConstantSetCallBack;JI)V" 
    }
  };
  Swig::jclass_JirrJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_JirrJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

